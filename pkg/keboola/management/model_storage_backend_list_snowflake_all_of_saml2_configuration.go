/*
Manage API

The Keboola Connection Management API covers all tasks required for managing projects, as well as some super admin features for controlling and monitoring Keboola Connection.  ## Projects Management  * Create, modify and delete maintainers, organizations and projects  * Move projects between organizations  * Define project limits  * Provision Redshift and other Storage backends  * Access project management activity log  ## Projects Monitoring  * Monitoring of projects over organizations and maintainers  ## Super User Control and Monitoring  * UI release and deployment  * Components management  * Storage and Syrup jobs monitoring (will be provided by Syrup utilizing new tokens for authorization)  * Final project delete  * Workers start/shutdown, etc.  ## Authentication  The API supports authentication by a personal access token, which can be retrieved in [Account Settings](https://connection.keboola.com/admin/account/change-password) in Keboola Connection. An access token is tied to an administrator and its permissions are derived from their permissions. When the administrator is disabled or deleted, all their tokens become invalid too.  ## Token Types  There are the following types of tokens:  | Name | Tied to User | Token string is available only on create | Description  | | ------------- | ------------- | ------------------- | ----- | | user | Yes | Yes |Full access to maintainers, organizations and projects. Access is limited only to resources which are available for the token user.| | super | No | Yes | KBC management. Limited scopes can be specified `super_ui_deploy`, `super_monitoring`, ...  |

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"encoding/json"
)

// checks if the StorageBackendListSnowflakeAllOfSaml2Configuration type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StorageBackendListSnowflakeAllOfSaml2Configuration{}

// StorageBackendListSnowflakeAllOfSaml2Configuration available only for Snowflake backend
type StorageBackendListSnowflakeAllOfSaml2Configuration struct {
	// idp.com
	IdpEntityId *string `json:"idpEntityId,omitempty"`
	// sp.com
	SpEntityId *string `json:"spEntityId,omitempty"`
	// sp.com/acs
	SpAcsUrl *string `json:"spAcsUrl,omitempty"`
	PublicKey *string `json:"publicKey,omitempty"`
}

// NewStorageBackendListSnowflakeAllOfSaml2Configuration instantiates a new StorageBackendListSnowflakeAllOfSaml2Configuration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStorageBackendListSnowflakeAllOfSaml2Configuration() *StorageBackendListSnowflakeAllOfSaml2Configuration {
	this := StorageBackendListSnowflakeAllOfSaml2Configuration{}
	return &this
}

// NewStorageBackendListSnowflakeAllOfSaml2ConfigurationWithDefaults instantiates a new StorageBackendListSnowflakeAllOfSaml2Configuration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStorageBackendListSnowflakeAllOfSaml2ConfigurationWithDefaults() *StorageBackendListSnowflakeAllOfSaml2Configuration {
	this := StorageBackendListSnowflakeAllOfSaml2Configuration{}
	return &this
}

// GetIdpEntityId returns the IdpEntityId field value if set, zero value otherwise.
func (o *StorageBackendListSnowflakeAllOfSaml2Configuration) GetIdpEntityId() string {
	if o == nil || IsNil(o.IdpEntityId) {
		var ret string
		return ret
	}
	return *o.IdpEntityId
}

// GetIdpEntityIdOk returns a tuple with the IdpEntityId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageBackendListSnowflakeAllOfSaml2Configuration) GetIdpEntityIdOk() (*string, bool) {
	if o == nil || IsNil(o.IdpEntityId) {
		return nil, false
	}
	return o.IdpEntityId, true
}

// HasIdpEntityId returns a boolean if a field has been set.
func (o *StorageBackendListSnowflakeAllOfSaml2Configuration) HasIdpEntityId() bool {
	if o != nil && !IsNil(o.IdpEntityId) {
		return true
	}

	return false
}

// SetIdpEntityId gets a reference to the given string and assigns it to the IdpEntityId field.
func (o *StorageBackendListSnowflakeAllOfSaml2Configuration) SetIdpEntityId(v string) {
	o.IdpEntityId = &v
}

// GetSpEntityId returns the SpEntityId field value if set, zero value otherwise.
func (o *StorageBackendListSnowflakeAllOfSaml2Configuration) GetSpEntityId() string {
	if o == nil || IsNil(o.SpEntityId) {
		var ret string
		return ret
	}
	return *o.SpEntityId
}

// GetSpEntityIdOk returns a tuple with the SpEntityId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageBackendListSnowflakeAllOfSaml2Configuration) GetSpEntityIdOk() (*string, bool) {
	if o == nil || IsNil(o.SpEntityId) {
		return nil, false
	}
	return o.SpEntityId, true
}

// HasSpEntityId returns a boolean if a field has been set.
func (o *StorageBackendListSnowflakeAllOfSaml2Configuration) HasSpEntityId() bool {
	if o != nil && !IsNil(o.SpEntityId) {
		return true
	}

	return false
}

// SetSpEntityId gets a reference to the given string and assigns it to the SpEntityId field.
func (o *StorageBackendListSnowflakeAllOfSaml2Configuration) SetSpEntityId(v string) {
	o.SpEntityId = &v
}

// GetSpAcsUrl returns the SpAcsUrl field value if set, zero value otherwise.
func (o *StorageBackendListSnowflakeAllOfSaml2Configuration) GetSpAcsUrl() string {
	if o == nil || IsNil(o.SpAcsUrl) {
		var ret string
		return ret
	}
	return *o.SpAcsUrl
}

// GetSpAcsUrlOk returns a tuple with the SpAcsUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageBackendListSnowflakeAllOfSaml2Configuration) GetSpAcsUrlOk() (*string, bool) {
	if o == nil || IsNil(o.SpAcsUrl) {
		return nil, false
	}
	return o.SpAcsUrl, true
}

// HasSpAcsUrl returns a boolean if a field has been set.
func (o *StorageBackendListSnowflakeAllOfSaml2Configuration) HasSpAcsUrl() bool {
	if o != nil && !IsNil(o.SpAcsUrl) {
		return true
	}

	return false
}

// SetSpAcsUrl gets a reference to the given string and assigns it to the SpAcsUrl field.
func (o *StorageBackendListSnowflakeAllOfSaml2Configuration) SetSpAcsUrl(v string) {
	o.SpAcsUrl = &v
}

// GetPublicKey returns the PublicKey field value if set, zero value otherwise.
func (o *StorageBackendListSnowflakeAllOfSaml2Configuration) GetPublicKey() string {
	if o == nil || IsNil(o.PublicKey) {
		var ret string
		return ret
	}
	return *o.PublicKey
}

// GetPublicKeyOk returns a tuple with the PublicKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageBackendListSnowflakeAllOfSaml2Configuration) GetPublicKeyOk() (*string, bool) {
	if o == nil || IsNil(o.PublicKey) {
		return nil, false
	}
	return o.PublicKey, true
}

// HasPublicKey returns a boolean if a field has been set.
func (o *StorageBackendListSnowflakeAllOfSaml2Configuration) HasPublicKey() bool {
	if o != nil && !IsNil(o.PublicKey) {
		return true
	}

	return false
}

// SetPublicKey gets a reference to the given string and assigns it to the PublicKey field.
func (o *StorageBackendListSnowflakeAllOfSaml2Configuration) SetPublicKey(v string) {
	o.PublicKey = &v
}

func (o StorageBackendListSnowflakeAllOfSaml2Configuration) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StorageBackendListSnowflakeAllOfSaml2Configuration) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.IdpEntityId) {
		toSerialize["idpEntityId"] = o.IdpEntityId
	}
	if !IsNil(o.SpEntityId) {
		toSerialize["spEntityId"] = o.SpEntityId
	}
	if !IsNil(o.SpAcsUrl) {
		toSerialize["spAcsUrl"] = o.SpAcsUrl
	}
	if !IsNil(o.PublicKey) {
		toSerialize["publicKey"] = o.PublicKey
	}
	return toSerialize, nil
}

type NullableStorageBackendListSnowflakeAllOfSaml2Configuration struct {
	value *StorageBackendListSnowflakeAllOfSaml2Configuration
	isSet bool
}

func (v NullableStorageBackendListSnowflakeAllOfSaml2Configuration) Get() *StorageBackendListSnowflakeAllOfSaml2Configuration {
	return v.value
}

func (v *NullableStorageBackendListSnowflakeAllOfSaml2Configuration) Set(val *StorageBackendListSnowflakeAllOfSaml2Configuration) {
	v.value = val
	v.isSet = true
}

func (v NullableStorageBackendListSnowflakeAllOfSaml2Configuration) IsSet() bool {
	return v.isSet
}

func (v *NullableStorageBackendListSnowflakeAllOfSaml2Configuration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStorageBackendListSnowflakeAllOfSaml2Configuration(val *StorageBackendListSnowflakeAllOfSaml2Configuration) *NullableStorageBackendListSnowflakeAllOfSaml2Configuration {
	return &NullableStorageBackendListSnowflakeAllOfSaml2Configuration{value: val, isSet: true}
}

func (v NullableStorageBackendListSnowflakeAllOfSaml2Configuration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStorageBackendListSnowflakeAllOfSaml2Configuration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


