/*
Manage API

The Keboola Connection Management API covers all tasks required for managing projects, as well as some super admin features for controlling and monitoring Keboola Connection.  ## Projects Management  * Create, modify and delete maintainers, organizations and projects  * Move projects between organizations  * Define project limits  * Provision Redshift and other Storage backends  * Access project management activity log  ## Projects Monitoring  * Monitoring of projects over organizations and maintainers  ## Super User Control and Monitoring  * UI release and deployment  * Components management  * Storage and Syrup jobs monitoring (will be provided by Syrup utilizing new tokens for authorization)  * Final project delete  * Workers start/shutdown, etc.  ## Authentication  The API supports authentication by a personal access token, which can be retrieved in [Account Settings](https://connection.keboola.com/admin/account/change-password) in Keboola Connection. An access token is tied to an administrator and its permissions are derived from their permissions. When the administrator is disabled or deleted, all their tokens become invalid too.  ## Token Types  There are the following types of tokens:  | Name | Tied to User | Token string is available only on create | Description  | | ------------- | ------------- | ------------------- | ----- | | user | Yes | Yes |Full access to maintainers, organizations and projects. Access is limited only to resources which are available for the token user.| | super | No | Yes | KBC management. Limited scopes can be specified `super_ui_deploy`, `super_monitoring`, ...  |

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"encoding/json"
)

// checks if the CreateNewPromoCodes201Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateNewPromoCodes201Response{}

// CreateNewPromoCodes201Response struct for CreateNewPromoCodes201Response
type CreateNewPromoCodes201Response struct {
	Code *string `json:"code,omitempty"`
	Expires *string `json:"expires,omitempty"`
	Organization *RetrieveAllPromoCodes200ResponseInnerOrganization `json:"organization,omitempty"`
	ProjectTemplate *RetrieveAllPromoCodes200ResponseInnerProjectTemplate `json:"projectTemplate,omitempty"`
}

// NewCreateNewPromoCodes201Response instantiates a new CreateNewPromoCodes201Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateNewPromoCodes201Response() *CreateNewPromoCodes201Response {
	this := CreateNewPromoCodes201Response{}
	return &this
}

// NewCreateNewPromoCodes201ResponseWithDefaults instantiates a new CreateNewPromoCodes201Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateNewPromoCodes201ResponseWithDefaults() *CreateNewPromoCodes201Response {
	this := CreateNewPromoCodes201Response{}
	return &this
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *CreateNewPromoCodes201Response) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateNewPromoCodes201Response) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *CreateNewPromoCodes201Response) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *CreateNewPromoCodes201Response) SetCode(v string) {
	o.Code = &v
}

// GetExpires returns the Expires field value if set, zero value otherwise.
func (o *CreateNewPromoCodes201Response) GetExpires() string {
	if o == nil || IsNil(o.Expires) {
		var ret string
		return ret
	}
	return *o.Expires
}

// GetExpiresOk returns a tuple with the Expires field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateNewPromoCodes201Response) GetExpiresOk() (*string, bool) {
	if o == nil || IsNil(o.Expires) {
		return nil, false
	}
	return o.Expires, true
}

// HasExpires returns a boolean if a field has been set.
func (o *CreateNewPromoCodes201Response) HasExpires() bool {
	if o != nil && !IsNil(o.Expires) {
		return true
	}

	return false
}

// SetExpires gets a reference to the given string and assigns it to the Expires field.
func (o *CreateNewPromoCodes201Response) SetExpires(v string) {
	o.Expires = &v
}

// GetOrganization returns the Organization field value if set, zero value otherwise.
func (o *CreateNewPromoCodes201Response) GetOrganization() RetrieveAllPromoCodes200ResponseInnerOrganization {
	if o == nil || IsNil(o.Organization) {
		var ret RetrieveAllPromoCodes200ResponseInnerOrganization
		return ret
	}
	return *o.Organization
}

// GetOrganizationOk returns a tuple with the Organization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateNewPromoCodes201Response) GetOrganizationOk() (*RetrieveAllPromoCodes200ResponseInnerOrganization, bool) {
	if o == nil || IsNil(o.Organization) {
		return nil, false
	}
	return o.Organization, true
}

// HasOrganization returns a boolean if a field has been set.
func (o *CreateNewPromoCodes201Response) HasOrganization() bool {
	if o != nil && !IsNil(o.Organization) {
		return true
	}

	return false
}

// SetOrganization gets a reference to the given RetrieveAllPromoCodes200ResponseInnerOrganization and assigns it to the Organization field.
func (o *CreateNewPromoCodes201Response) SetOrganization(v RetrieveAllPromoCodes200ResponseInnerOrganization) {
	o.Organization = &v
}

// GetProjectTemplate returns the ProjectTemplate field value if set, zero value otherwise.
func (o *CreateNewPromoCodes201Response) GetProjectTemplate() RetrieveAllPromoCodes200ResponseInnerProjectTemplate {
	if o == nil || IsNil(o.ProjectTemplate) {
		var ret RetrieveAllPromoCodes200ResponseInnerProjectTemplate
		return ret
	}
	return *o.ProjectTemplate
}

// GetProjectTemplateOk returns a tuple with the ProjectTemplate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateNewPromoCodes201Response) GetProjectTemplateOk() (*RetrieveAllPromoCodes200ResponseInnerProjectTemplate, bool) {
	if o == nil || IsNil(o.ProjectTemplate) {
		return nil, false
	}
	return o.ProjectTemplate, true
}

// HasProjectTemplate returns a boolean if a field has been set.
func (o *CreateNewPromoCodes201Response) HasProjectTemplate() bool {
	if o != nil && !IsNil(o.ProjectTemplate) {
		return true
	}

	return false
}

// SetProjectTemplate gets a reference to the given RetrieveAllPromoCodes200ResponseInnerProjectTemplate and assigns it to the ProjectTemplate field.
func (o *CreateNewPromoCodes201Response) SetProjectTemplate(v RetrieveAllPromoCodes200ResponseInnerProjectTemplate) {
	o.ProjectTemplate = &v
}

func (o CreateNewPromoCodes201Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateNewPromoCodes201Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.Expires) {
		toSerialize["expires"] = o.Expires
	}
	if !IsNil(o.Organization) {
		toSerialize["organization"] = o.Organization
	}
	if !IsNil(o.ProjectTemplate) {
		toSerialize["projectTemplate"] = o.ProjectTemplate
	}
	return toSerialize, nil
}

type NullableCreateNewPromoCodes201Response struct {
	value *CreateNewPromoCodes201Response
	isSet bool
}

func (v NullableCreateNewPromoCodes201Response) Get() *CreateNewPromoCodes201Response {
	return v.value
}

func (v *NullableCreateNewPromoCodes201Response) Set(val *CreateNewPromoCodes201Response) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateNewPromoCodes201Response) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateNewPromoCodes201Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateNewPromoCodes201Response(val *CreateNewPromoCodes201Response) *NullableCreateNewPromoCodes201Response {
	return &NullableCreateNewPromoCodes201Response{value: val, isSet: true}
}

func (v NullableCreateNewPromoCodes201Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateNewPromoCodes201Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


