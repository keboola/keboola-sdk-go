/*
Manage API

The Keboola Connection Management API covers all tasks required for managing projects, as well as some super admin features for controlling and monitoring Keboola Connection.  ## Projects Management  * Create, modify and delete maintainers, organizations and projects  * Move projects between organizations  * Define project limits  * Provision Redshift and other Storage backends  * Access project management activity log  ## Projects Monitoring  * Monitoring of projects over organizations and maintainers  ## Super User Control and Monitoring  * UI release and deployment  * Components management  * Storage and Syrup jobs monitoring (will be provided by Syrup utilizing new tokens for authorization)  * Final project delete  * Workers start/shutdown, etc.  ## Authentication  The API supports authentication by a personal access token, which can be retrieved in [Account Settings](https://connection.keboola.com/admin/account/change-password) in Keboola Connection. An access token is tied to an administrator and its permissions are derived from their permissions. When the administrator is disabled or deleted, all their tokens become invalid too.  ## Token Types  There are the following types of tokens:  | Name | Tied to User | Token string is available only on create | Description  | | ------------- | ------------- | ------------------- | ----- | | user | Yes | Yes |Full access to maintainers, organizations and projects. Access is limited only to resources which are available for the token user.| | super | No | Yes | KBC management. Limited scopes can be specified `super_ui_deploy`, `super_monitoring`, ...  |

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"encoding/json"
)

// checks if the UpdateAProjectRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateAProjectRequest{}

// UpdateAProjectRequest struct for UpdateAProjectRequest
type UpdateAProjectRequest struct {
	// Rename project
	Name *string `json:"name,omitempty"`
	// Change project default backend type
	DefaultBackend *string `json:"defaultBackend,omitempty"`
	// Change project type (demo, production, poc, ...) - allowed only for a super admin
	Type *string `json:"type,omitempty"`
	// Change project expiration - allowed only for a super admin
	ExpirationDays *float32 `json:"expirationDays,omitempty"`
	// Change project monthly fee - allowed only for a super admin
	BilledMonthlyPrice *float32 `json:"billedMonthlyPrice,omitempty"`
	// (Snowflake only) Change the data retention period for this project - allowed only for a super admin
	DataRetentionTimeInDays *float32 `json:"dataRetentionTimeInDays,omitempty"`
}

// NewUpdateAProjectRequest instantiates a new UpdateAProjectRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateAProjectRequest() *UpdateAProjectRequest {
	this := UpdateAProjectRequest{}
	return &this
}

// NewUpdateAProjectRequestWithDefaults instantiates a new UpdateAProjectRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateAProjectRequestWithDefaults() *UpdateAProjectRequest {
	this := UpdateAProjectRequest{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *UpdateAProjectRequest) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateAProjectRequest) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *UpdateAProjectRequest) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *UpdateAProjectRequest) SetName(v string) {
	o.Name = &v
}

// GetDefaultBackend returns the DefaultBackend field value if set, zero value otherwise.
func (o *UpdateAProjectRequest) GetDefaultBackend() string {
	if o == nil || IsNil(o.DefaultBackend) {
		var ret string
		return ret
	}
	return *o.DefaultBackend
}

// GetDefaultBackendOk returns a tuple with the DefaultBackend field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateAProjectRequest) GetDefaultBackendOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultBackend) {
		return nil, false
	}
	return o.DefaultBackend, true
}

// HasDefaultBackend returns a boolean if a field has been set.
func (o *UpdateAProjectRequest) HasDefaultBackend() bool {
	if o != nil && !IsNil(o.DefaultBackend) {
		return true
	}

	return false
}

// SetDefaultBackend gets a reference to the given string and assigns it to the DefaultBackend field.
func (o *UpdateAProjectRequest) SetDefaultBackend(v string) {
	o.DefaultBackend = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *UpdateAProjectRequest) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateAProjectRequest) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *UpdateAProjectRequest) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *UpdateAProjectRequest) SetType(v string) {
	o.Type = &v
}

// GetExpirationDays returns the ExpirationDays field value if set, zero value otherwise.
func (o *UpdateAProjectRequest) GetExpirationDays() float32 {
	if o == nil || IsNil(o.ExpirationDays) {
		var ret float32
		return ret
	}
	return *o.ExpirationDays
}

// GetExpirationDaysOk returns a tuple with the ExpirationDays field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateAProjectRequest) GetExpirationDaysOk() (*float32, bool) {
	if o == nil || IsNil(o.ExpirationDays) {
		return nil, false
	}
	return o.ExpirationDays, true
}

// HasExpirationDays returns a boolean if a field has been set.
func (o *UpdateAProjectRequest) HasExpirationDays() bool {
	if o != nil && !IsNil(o.ExpirationDays) {
		return true
	}

	return false
}

// SetExpirationDays gets a reference to the given float32 and assigns it to the ExpirationDays field.
func (o *UpdateAProjectRequest) SetExpirationDays(v float32) {
	o.ExpirationDays = &v
}

// GetBilledMonthlyPrice returns the BilledMonthlyPrice field value if set, zero value otherwise.
func (o *UpdateAProjectRequest) GetBilledMonthlyPrice() float32 {
	if o == nil || IsNil(o.BilledMonthlyPrice) {
		var ret float32
		return ret
	}
	return *o.BilledMonthlyPrice
}

// GetBilledMonthlyPriceOk returns a tuple with the BilledMonthlyPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateAProjectRequest) GetBilledMonthlyPriceOk() (*float32, bool) {
	if o == nil || IsNil(o.BilledMonthlyPrice) {
		return nil, false
	}
	return o.BilledMonthlyPrice, true
}

// HasBilledMonthlyPrice returns a boolean if a field has been set.
func (o *UpdateAProjectRequest) HasBilledMonthlyPrice() bool {
	if o != nil && !IsNil(o.BilledMonthlyPrice) {
		return true
	}

	return false
}

// SetBilledMonthlyPrice gets a reference to the given float32 and assigns it to the BilledMonthlyPrice field.
func (o *UpdateAProjectRequest) SetBilledMonthlyPrice(v float32) {
	o.BilledMonthlyPrice = &v
}

// GetDataRetentionTimeInDays returns the DataRetentionTimeInDays field value if set, zero value otherwise.
func (o *UpdateAProjectRequest) GetDataRetentionTimeInDays() float32 {
	if o == nil || IsNil(o.DataRetentionTimeInDays) {
		var ret float32
		return ret
	}
	return *o.DataRetentionTimeInDays
}

// GetDataRetentionTimeInDaysOk returns a tuple with the DataRetentionTimeInDays field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateAProjectRequest) GetDataRetentionTimeInDaysOk() (*float32, bool) {
	if o == nil || IsNil(o.DataRetentionTimeInDays) {
		return nil, false
	}
	return o.DataRetentionTimeInDays, true
}

// HasDataRetentionTimeInDays returns a boolean if a field has been set.
func (o *UpdateAProjectRequest) HasDataRetentionTimeInDays() bool {
	if o != nil && !IsNil(o.DataRetentionTimeInDays) {
		return true
	}

	return false
}

// SetDataRetentionTimeInDays gets a reference to the given float32 and assigns it to the DataRetentionTimeInDays field.
func (o *UpdateAProjectRequest) SetDataRetentionTimeInDays(v float32) {
	o.DataRetentionTimeInDays = &v
}

func (o UpdateAProjectRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateAProjectRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.DefaultBackend) {
		toSerialize["defaultBackend"] = o.DefaultBackend
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.ExpirationDays) {
		toSerialize["expirationDays"] = o.ExpirationDays
	}
	if !IsNil(o.BilledMonthlyPrice) {
		toSerialize["billedMonthlyPrice"] = o.BilledMonthlyPrice
	}
	if !IsNil(o.DataRetentionTimeInDays) {
		toSerialize["dataRetentionTimeInDays"] = o.DataRetentionTimeInDays
	}
	return toSerialize, nil
}

type NullableUpdateAProjectRequest struct {
	value *UpdateAProjectRequest
	isSet bool
}

func (v NullableUpdateAProjectRequest) Get() *UpdateAProjectRequest {
	return v.value
}

func (v *NullableUpdateAProjectRequest) Set(val *UpdateAProjectRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateAProjectRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateAProjectRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateAProjectRequest(val *UpdateAProjectRequest) *NullableUpdateAProjectRequest {
	return &NullableUpdateAProjectRequest{value: val, isSet: true}
}

func (v NullableUpdateAProjectRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateAProjectRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


