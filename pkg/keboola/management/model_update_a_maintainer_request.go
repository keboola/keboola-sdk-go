/*
Manage API

The Keboola Connection Management API covers all tasks required for managing projects, as well as some super admin features for controlling and monitoring Keboola Connection.  ## Projects Management  * Create, modify and delete maintainers, organizations and projects  * Move projects between organizations  * Define project limits  * Provision Redshift and other Storage backends  * Access project management activity log  ## Projects Monitoring  * Monitoring of projects over organizations and maintainers  ## Super User Control and Monitoring  * UI release and deployment  * Components management  * Storage and Syrup jobs monitoring (will be provided by Syrup utilizing new tokens for authorization)  * Final project delete  * Workers start/shutdown, etc.  ## Authentication  The API supports authentication by a personal access token, which can be retrieved in [Account Settings](https://connection.keboola.com/admin/account/change-password) in Keboola Connection. An access token is tied to an administrator and its permissions are derived from their permissions. When the administrator is disabled or deleted, all their tokens become invalid too.  ## Token Types  There are the following types of tokens:  | Name | Tied to User | Token string is available only on create | Description  | | ------------- | ------------- | ------------------- | ----- | | user | Yes | Yes |Full access to maintainers, organizations and projects. Access is limited only to resources which are available for the token user.| | super | No | Yes | KBC management. Limited scopes can be specified `super_ui_deploy`, `super_monitoring`, ...  |

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"encoding/json"
)

// checks if the UpdateAMaintainerRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateAMaintainerRequest{}

// UpdateAMaintainerRequest struct for UpdateAMaintainerRequest
type UpdateAMaintainerRequest struct {
	// Maintainer name
	Name *string `json:"name,omitempty"`
	// Default Redshift Connection ID
	DefaultConnectionRedshiftId *string `json:"defaultConnectionRedshiftId,omitempty"`
	// Default Snowflake Connection ID
	DefaultConnectionSnowflakeId *string `json:"defaultConnectionSnowflakeId,omitempty"`
	// Default Synapse Connection ID
	DefaultConnectionSynapseId *string `json:"defaultConnectionSynapseId,omitempty"`
	// Default Exasol Connection ID
	DefaultConnectionExasolId *string `json:"defaultConnectionExasolId,omitempty"`
	// Default Teradata Connection ID
	DefaultConnectionTeradataId *string `json:"defaultConnectionTeradataId,omitempty"`
	// Default File Storage ID
	DefaultFileStorageId *string `json:"defaultFileStorageId,omitempty"`
	ZendeskUrl *string `json:"zendeskUrl,omitempty"`
}

// NewUpdateAMaintainerRequest instantiates a new UpdateAMaintainerRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateAMaintainerRequest() *UpdateAMaintainerRequest {
	this := UpdateAMaintainerRequest{}
	return &this
}

// NewUpdateAMaintainerRequestWithDefaults instantiates a new UpdateAMaintainerRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateAMaintainerRequestWithDefaults() *UpdateAMaintainerRequest {
	this := UpdateAMaintainerRequest{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *UpdateAMaintainerRequest) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateAMaintainerRequest) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *UpdateAMaintainerRequest) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *UpdateAMaintainerRequest) SetName(v string) {
	o.Name = &v
}

// GetDefaultConnectionRedshiftId returns the DefaultConnectionRedshiftId field value if set, zero value otherwise.
func (o *UpdateAMaintainerRequest) GetDefaultConnectionRedshiftId() string {
	if o == nil || IsNil(o.DefaultConnectionRedshiftId) {
		var ret string
		return ret
	}
	return *o.DefaultConnectionRedshiftId
}

// GetDefaultConnectionRedshiftIdOk returns a tuple with the DefaultConnectionRedshiftId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateAMaintainerRequest) GetDefaultConnectionRedshiftIdOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultConnectionRedshiftId) {
		return nil, false
	}
	return o.DefaultConnectionRedshiftId, true
}

// HasDefaultConnectionRedshiftId returns a boolean if a field has been set.
func (o *UpdateAMaintainerRequest) HasDefaultConnectionRedshiftId() bool {
	if o != nil && !IsNil(o.DefaultConnectionRedshiftId) {
		return true
	}

	return false
}

// SetDefaultConnectionRedshiftId gets a reference to the given string and assigns it to the DefaultConnectionRedshiftId field.
func (o *UpdateAMaintainerRequest) SetDefaultConnectionRedshiftId(v string) {
	o.DefaultConnectionRedshiftId = &v
}

// GetDefaultConnectionSnowflakeId returns the DefaultConnectionSnowflakeId field value if set, zero value otherwise.
func (o *UpdateAMaintainerRequest) GetDefaultConnectionSnowflakeId() string {
	if o == nil || IsNil(o.DefaultConnectionSnowflakeId) {
		var ret string
		return ret
	}
	return *o.DefaultConnectionSnowflakeId
}

// GetDefaultConnectionSnowflakeIdOk returns a tuple with the DefaultConnectionSnowflakeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateAMaintainerRequest) GetDefaultConnectionSnowflakeIdOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultConnectionSnowflakeId) {
		return nil, false
	}
	return o.DefaultConnectionSnowflakeId, true
}

// HasDefaultConnectionSnowflakeId returns a boolean if a field has been set.
func (o *UpdateAMaintainerRequest) HasDefaultConnectionSnowflakeId() bool {
	if o != nil && !IsNil(o.DefaultConnectionSnowflakeId) {
		return true
	}

	return false
}

// SetDefaultConnectionSnowflakeId gets a reference to the given string and assigns it to the DefaultConnectionSnowflakeId field.
func (o *UpdateAMaintainerRequest) SetDefaultConnectionSnowflakeId(v string) {
	o.DefaultConnectionSnowflakeId = &v
}

// GetDefaultConnectionSynapseId returns the DefaultConnectionSynapseId field value if set, zero value otherwise.
func (o *UpdateAMaintainerRequest) GetDefaultConnectionSynapseId() string {
	if o == nil || IsNil(o.DefaultConnectionSynapseId) {
		var ret string
		return ret
	}
	return *o.DefaultConnectionSynapseId
}

// GetDefaultConnectionSynapseIdOk returns a tuple with the DefaultConnectionSynapseId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateAMaintainerRequest) GetDefaultConnectionSynapseIdOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultConnectionSynapseId) {
		return nil, false
	}
	return o.DefaultConnectionSynapseId, true
}

// HasDefaultConnectionSynapseId returns a boolean if a field has been set.
func (o *UpdateAMaintainerRequest) HasDefaultConnectionSynapseId() bool {
	if o != nil && !IsNil(o.DefaultConnectionSynapseId) {
		return true
	}

	return false
}

// SetDefaultConnectionSynapseId gets a reference to the given string and assigns it to the DefaultConnectionSynapseId field.
func (o *UpdateAMaintainerRequest) SetDefaultConnectionSynapseId(v string) {
	o.DefaultConnectionSynapseId = &v
}

// GetDefaultConnectionExasolId returns the DefaultConnectionExasolId field value if set, zero value otherwise.
func (o *UpdateAMaintainerRequest) GetDefaultConnectionExasolId() string {
	if o == nil || IsNil(o.DefaultConnectionExasolId) {
		var ret string
		return ret
	}
	return *o.DefaultConnectionExasolId
}

// GetDefaultConnectionExasolIdOk returns a tuple with the DefaultConnectionExasolId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateAMaintainerRequest) GetDefaultConnectionExasolIdOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultConnectionExasolId) {
		return nil, false
	}
	return o.DefaultConnectionExasolId, true
}

// HasDefaultConnectionExasolId returns a boolean if a field has been set.
func (o *UpdateAMaintainerRequest) HasDefaultConnectionExasolId() bool {
	if o != nil && !IsNil(o.DefaultConnectionExasolId) {
		return true
	}

	return false
}

// SetDefaultConnectionExasolId gets a reference to the given string and assigns it to the DefaultConnectionExasolId field.
func (o *UpdateAMaintainerRequest) SetDefaultConnectionExasolId(v string) {
	o.DefaultConnectionExasolId = &v
}

// GetDefaultConnectionTeradataId returns the DefaultConnectionTeradataId field value if set, zero value otherwise.
func (o *UpdateAMaintainerRequest) GetDefaultConnectionTeradataId() string {
	if o == nil || IsNil(o.DefaultConnectionTeradataId) {
		var ret string
		return ret
	}
	return *o.DefaultConnectionTeradataId
}

// GetDefaultConnectionTeradataIdOk returns a tuple with the DefaultConnectionTeradataId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateAMaintainerRequest) GetDefaultConnectionTeradataIdOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultConnectionTeradataId) {
		return nil, false
	}
	return o.DefaultConnectionTeradataId, true
}

// HasDefaultConnectionTeradataId returns a boolean if a field has been set.
func (o *UpdateAMaintainerRequest) HasDefaultConnectionTeradataId() bool {
	if o != nil && !IsNil(o.DefaultConnectionTeradataId) {
		return true
	}

	return false
}

// SetDefaultConnectionTeradataId gets a reference to the given string and assigns it to the DefaultConnectionTeradataId field.
func (o *UpdateAMaintainerRequest) SetDefaultConnectionTeradataId(v string) {
	o.DefaultConnectionTeradataId = &v
}

// GetDefaultFileStorageId returns the DefaultFileStorageId field value if set, zero value otherwise.
func (o *UpdateAMaintainerRequest) GetDefaultFileStorageId() string {
	if o == nil || IsNil(o.DefaultFileStorageId) {
		var ret string
		return ret
	}
	return *o.DefaultFileStorageId
}

// GetDefaultFileStorageIdOk returns a tuple with the DefaultFileStorageId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateAMaintainerRequest) GetDefaultFileStorageIdOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultFileStorageId) {
		return nil, false
	}
	return o.DefaultFileStorageId, true
}

// HasDefaultFileStorageId returns a boolean if a field has been set.
func (o *UpdateAMaintainerRequest) HasDefaultFileStorageId() bool {
	if o != nil && !IsNil(o.DefaultFileStorageId) {
		return true
	}

	return false
}

// SetDefaultFileStorageId gets a reference to the given string and assigns it to the DefaultFileStorageId field.
func (o *UpdateAMaintainerRequest) SetDefaultFileStorageId(v string) {
	o.DefaultFileStorageId = &v
}

// GetZendeskUrl returns the ZendeskUrl field value if set, zero value otherwise.
func (o *UpdateAMaintainerRequest) GetZendeskUrl() string {
	if o == nil || IsNil(o.ZendeskUrl) {
		var ret string
		return ret
	}
	return *o.ZendeskUrl
}

// GetZendeskUrlOk returns a tuple with the ZendeskUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateAMaintainerRequest) GetZendeskUrlOk() (*string, bool) {
	if o == nil || IsNil(o.ZendeskUrl) {
		return nil, false
	}
	return o.ZendeskUrl, true
}

// HasZendeskUrl returns a boolean if a field has been set.
func (o *UpdateAMaintainerRequest) HasZendeskUrl() bool {
	if o != nil && !IsNil(o.ZendeskUrl) {
		return true
	}

	return false
}

// SetZendeskUrl gets a reference to the given string and assigns it to the ZendeskUrl field.
func (o *UpdateAMaintainerRequest) SetZendeskUrl(v string) {
	o.ZendeskUrl = &v
}

func (o UpdateAMaintainerRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateAMaintainerRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.DefaultConnectionRedshiftId) {
		toSerialize["defaultConnectionRedshiftId"] = o.DefaultConnectionRedshiftId
	}
	if !IsNil(o.DefaultConnectionSnowflakeId) {
		toSerialize["defaultConnectionSnowflakeId"] = o.DefaultConnectionSnowflakeId
	}
	if !IsNil(o.DefaultConnectionSynapseId) {
		toSerialize["defaultConnectionSynapseId"] = o.DefaultConnectionSynapseId
	}
	if !IsNil(o.DefaultConnectionExasolId) {
		toSerialize["defaultConnectionExasolId"] = o.DefaultConnectionExasolId
	}
	if !IsNil(o.DefaultConnectionTeradataId) {
		toSerialize["defaultConnectionTeradataId"] = o.DefaultConnectionTeradataId
	}
	if !IsNil(o.DefaultFileStorageId) {
		toSerialize["defaultFileStorageId"] = o.DefaultFileStorageId
	}
	if !IsNil(o.ZendeskUrl) {
		toSerialize["zendeskUrl"] = o.ZendeskUrl
	}
	return toSerialize, nil
}

type NullableUpdateAMaintainerRequest struct {
	value *UpdateAMaintainerRequest
	isSet bool
}

func (v NullableUpdateAMaintainerRequest) Get() *UpdateAMaintainerRequest {
	return v.value
}

func (v *NullableUpdateAMaintainerRequest) Set(val *UpdateAMaintainerRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateAMaintainerRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateAMaintainerRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateAMaintainerRequest(val *UpdateAMaintainerRequest) *NullableUpdateAMaintainerRequest {
	return &NullableUpdateAMaintainerRequest{value: val, isSet: true}
}

func (v NullableUpdateAMaintainerRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateAMaintainerRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


