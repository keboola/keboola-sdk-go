/*
Manage API

The Keboola Connection Management API covers all tasks required for managing projects, as well as some super admin features for controlling and monitoring Keboola Connection.  ## Projects Management  * Create, modify and delete maintainers, organizations and projects  * Move projects between organizations  * Define project limits  * Provision Redshift and other Storage backends  * Access project management activity log  ## Projects Monitoring  * Monitoring of projects over organizations and maintainers  ## Super User Control and Monitoring  * UI release and deployment  * Components management  * Storage and Syrup jobs monitoring (will be provided by Syrup utilizing new tokens for authorization)  * Final project delete  * Workers start/shutdown, etc.  ## Authentication  The API supports authentication by a personal access token, which can be retrieved in [Account Settings](https://connection.keboola.com/admin/account/change-password) in Keboola Connection. An access token is tied to an administrator and its permissions are derived from their permissions. When the administrator is disabled or deleted, all their tokens become invalid too.  ## Token Types  There are the following types of tokens:  | Name | Tied to User | Token string is available only on create | Description  | | ------------- | ------------- | ------------------- | ----- | | user | Yes | Yes |Full access to maintainers, organizations and projects. Access is limited only to resources which are available for the token user.| | super | No | Yes | KBC management. Limited scopes can be specified `super_ui_deploy`, `super_monitoring`, ...  |

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ListUsedPromoCodes200ResponseInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListUsedPromoCodes200ResponseInner{}

// ListUsedPromoCodes200ResponseInner struct for ListUsedPromoCodes200ResponseInner
type ListUsedPromoCodes200ResponseInner struct {
	Code string `json:"code"`
	UsedAt string `json:"usedAt"`
	Project TokenVerification200ResponseCreator `json:"project"`
}

type _ListUsedPromoCodes200ResponseInner ListUsedPromoCodes200ResponseInner

// NewListUsedPromoCodes200ResponseInner instantiates a new ListUsedPromoCodes200ResponseInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListUsedPromoCodes200ResponseInner(code string, usedAt string, project TokenVerification200ResponseCreator) *ListUsedPromoCodes200ResponseInner {
	this := ListUsedPromoCodes200ResponseInner{}
	this.Code = code
	this.UsedAt = usedAt
	this.Project = project
	return &this
}

// NewListUsedPromoCodes200ResponseInnerWithDefaults instantiates a new ListUsedPromoCodes200ResponseInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListUsedPromoCodes200ResponseInnerWithDefaults() *ListUsedPromoCodes200ResponseInner {
	this := ListUsedPromoCodes200ResponseInner{}
	return &this
}

// GetCode returns the Code field value
func (o *ListUsedPromoCodes200ResponseInner) GetCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Code
}

// GetCodeOk returns a tuple with the Code field value
// and a boolean to check if the value has been set.
func (o *ListUsedPromoCodes200ResponseInner) GetCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Code, true
}

// SetCode sets field value
func (o *ListUsedPromoCodes200ResponseInner) SetCode(v string) {
	o.Code = v
}

// GetUsedAt returns the UsedAt field value
func (o *ListUsedPromoCodes200ResponseInner) GetUsedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UsedAt
}

// GetUsedAtOk returns a tuple with the UsedAt field value
// and a boolean to check if the value has been set.
func (o *ListUsedPromoCodes200ResponseInner) GetUsedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UsedAt, true
}

// SetUsedAt sets field value
func (o *ListUsedPromoCodes200ResponseInner) SetUsedAt(v string) {
	o.UsedAt = v
}

// GetProject returns the Project field value
func (o *ListUsedPromoCodes200ResponseInner) GetProject() TokenVerification200ResponseCreator {
	if o == nil {
		var ret TokenVerification200ResponseCreator
		return ret
	}

	return o.Project
}

// GetProjectOk returns a tuple with the Project field value
// and a boolean to check if the value has been set.
func (o *ListUsedPromoCodes200ResponseInner) GetProjectOk() (*TokenVerification200ResponseCreator, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Project, true
}

// SetProject sets field value
func (o *ListUsedPromoCodes200ResponseInner) SetProject(v TokenVerification200ResponseCreator) {
	o.Project = v
}

func (o ListUsedPromoCodes200ResponseInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListUsedPromoCodes200ResponseInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["code"] = o.Code
	toSerialize["usedAt"] = o.UsedAt
	toSerialize["project"] = o.Project
	return toSerialize, nil
}

func (o *ListUsedPromoCodes200ResponseInner) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"code",
		"usedAt",
		"project",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varListUsedPromoCodes200ResponseInner := _ListUsedPromoCodes200ResponseInner{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varListUsedPromoCodes200ResponseInner)

	if err != nil {
		return err
	}

	*o = ListUsedPromoCodes200ResponseInner(varListUsedPromoCodes200ResponseInner)

	return err
}

type NullableListUsedPromoCodes200ResponseInner struct {
	value *ListUsedPromoCodes200ResponseInner
	isSet bool
}

func (v NullableListUsedPromoCodes200ResponseInner) Get() *ListUsedPromoCodes200ResponseInner {
	return v.value
}

func (v *NullableListUsedPromoCodes200ResponseInner) Set(val *ListUsedPromoCodes200ResponseInner) {
	v.value = val
	v.isSet = true
}

func (v NullableListUsedPromoCodes200ResponseInner) IsSet() bool {
	return v.isSet
}

func (v *NullableListUsedPromoCodes200ResponseInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListUsedPromoCodes200ResponseInner(val *ListUsedPromoCodes200ResponseInner) *NullableListUsedPromoCodes200ResponseInner {
	return &NullableListUsedPromoCodes200ResponseInner{value: val, isSet: true}
}

func (v NullableListUsedPromoCodes200ResponseInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListUsedPromoCodes200ResponseInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


