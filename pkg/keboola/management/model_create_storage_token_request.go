/*
Manage API

The Keboola Connection Management API covers all tasks required for managing projects, as well as some super admin features for controlling and monitoring Keboola Connection.  ## Projects Management  * Create, modify and delete maintainers, organizations and projects  * Move projects between organizations  * Define project limits  * Provision Redshift and other Storage backends  * Access project management activity log  ## Projects Monitoring  * Monitoring of projects over organizations and maintainers  ## Super User Control and Monitoring  * UI release and deployment  * Components management  * Storage and Syrup jobs monitoring (will be provided by Syrup utilizing new tokens for authorization)  * Final project delete  * Workers start/shutdown, etc.  ## Authentication  The API supports authentication by a personal access token, which can be retrieved in [Account Settings](https://connection.keboola.com/admin/account/change-password) in Keboola Connection. An access token is tied to an administrator and its permissions are derived from their permissions. When the administrator is disabled or deleted, all their tokens become invalid too.  ## Token Types  There are the following types of tokens:  | Name | Tied to User | Token string is available only on create | Description  | | ------------- | ------------- | ------------------- | ----- | | user | Yes | Yes |Full access to maintainers, organizations and projects. Access is limited only to resources which are available for the token user.| | super | No | Yes | KBC management. Limited scopes can be specified `super_ui_deploy`, `super_monitoring`, ...  |

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CreateStorageTokenRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateStorageTokenRequest{}

// CreateStorageTokenRequest struct for CreateStorageTokenRequest
type CreateStorageTokenRequest struct {
	// Token description
	Description string `json:"description"`
	// Token has full permissions on tabular storage
	CanManageBuckets *bool `json:"canManageBuckets,omitempty"`
	// deprecated & will be ignored - Token has permission to create tokens in project
	CanManageTokens *bool `json:"canManageTokens,omitempty"`
	// Token has full permissions to files staging
	CanReadAllFileUploads *bool `json:"canReadAllFileUploads,omitempty"`
	// Allows permanently remove deleted configurations.
	CanPurgeTrash *bool `json:"canPurgeTrash,omitempty"`
	// Token lifetime
	ExpiresIn *float32 `json:"expiresIn,omitempty"`
	BucketPermissions *CreateStorageTokenRequestBucketPermissions `json:"bucketPermissions,omitempty"`
	// Grants access for component configurations. Allowed values are [valid component IDs](https://components.keboola.com/components).
	ComponentAccess *string `json:"componentAccess[],omitempty"`
}

type _CreateStorageTokenRequest CreateStorageTokenRequest

// NewCreateStorageTokenRequest instantiates a new CreateStorageTokenRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateStorageTokenRequest(description string) *CreateStorageTokenRequest {
	this := CreateStorageTokenRequest{}
	this.Description = description
	return &this
}

// NewCreateStorageTokenRequestWithDefaults instantiates a new CreateStorageTokenRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateStorageTokenRequestWithDefaults() *CreateStorageTokenRequest {
	this := CreateStorageTokenRequest{}
	return &this
}

// GetDescription returns the Description field value
func (o *CreateStorageTokenRequest) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *CreateStorageTokenRequest) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *CreateStorageTokenRequest) SetDescription(v string) {
	o.Description = v
}

// GetCanManageBuckets returns the CanManageBuckets field value if set, zero value otherwise.
func (o *CreateStorageTokenRequest) GetCanManageBuckets() bool {
	if o == nil || IsNil(o.CanManageBuckets) {
		var ret bool
		return ret
	}
	return *o.CanManageBuckets
}

// GetCanManageBucketsOk returns a tuple with the CanManageBuckets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateStorageTokenRequest) GetCanManageBucketsOk() (*bool, bool) {
	if o == nil || IsNil(o.CanManageBuckets) {
		return nil, false
	}
	return o.CanManageBuckets, true
}

// HasCanManageBuckets returns a boolean if a field has been set.
func (o *CreateStorageTokenRequest) HasCanManageBuckets() bool {
	if o != nil && !IsNil(o.CanManageBuckets) {
		return true
	}

	return false
}

// SetCanManageBuckets gets a reference to the given bool and assigns it to the CanManageBuckets field.
func (o *CreateStorageTokenRequest) SetCanManageBuckets(v bool) {
	o.CanManageBuckets = &v
}

// GetCanManageTokens returns the CanManageTokens field value if set, zero value otherwise.
func (o *CreateStorageTokenRequest) GetCanManageTokens() bool {
	if o == nil || IsNil(o.CanManageTokens) {
		var ret bool
		return ret
	}
	return *o.CanManageTokens
}

// GetCanManageTokensOk returns a tuple with the CanManageTokens field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateStorageTokenRequest) GetCanManageTokensOk() (*bool, bool) {
	if o == nil || IsNil(o.CanManageTokens) {
		return nil, false
	}
	return o.CanManageTokens, true
}

// HasCanManageTokens returns a boolean if a field has been set.
func (o *CreateStorageTokenRequest) HasCanManageTokens() bool {
	if o != nil && !IsNil(o.CanManageTokens) {
		return true
	}

	return false
}

// SetCanManageTokens gets a reference to the given bool and assigns it to the CanManageTokens field.
func (o *CreateStorageTokenRequest) SetCanManageTokens(v bool) {
	o.CanManageTokens = &v
}

// GetCanReadAllFileUploads returns the CanReadAllFileUploads field value if set, zero value otherwise.
func (o *CreateStorageTokenRequest) GetCanReadAllFileUploads() bool {
	if o == nil || IsNil(o.CanReadAllFileUploads) {
		var ret bool
		return ret
	}
	return *o.CanReadAllFileUploads
}

// GetCanReadAllFileUploadsOk returns a tuple with the CanReadAllFileUploads field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateStorageTokenRequest) GetCanReadAllFileUploadsOk() (*bool, bool) {
	if o == nil || IsNil(o.CanReadAllFileUploads) {
		return nil, false
	}
	return o.CanReadAllFileUploads, true
}

// HasCanReadAllFileUploads returns a boolean if a field has been set.
func (o *CreateStorageTokenRequest) HasCanReadAllFileUploads() bool {
	if o != nil && !IsNil(o.CanReadAllFileUploads) {
		return true
	}

	return false
}

// SetCanReadAllFileUploads gets a reference to the given bool and assigns it to the CanReadAllFileUploads field.
func (o *CreateStorageTokenRequest) SetCanReadAllFileUploads(v bool) {
	o.CanReadAllFileUploads = &v
}

// GetCanPurgeTrash returns the CanPurgeTrash field value if set, zero value otherwise.
func (o *CreateStorageTokenRequest) GetCanPurgeTrash() bool {
	if o == nil || IsNil(o.CanPurgeTrash) {
		var ret bool
		return ret
	}
	return *o.CanPurgeTrash
}

// GetCanPurgeTrashOk returns a tuple with the CanPurgeTrash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateStorageTokenRequest) GetCanPurgeTrashOk() (*bool, bool) {
	if o == nil || IsNil(o.CanPurgeTrash) {
		return nil, false
	}
	return o.CanPurgeTrash, true
}

// HasCanPurgeTrash returns a boolean if a field has been set.
func (o *CreateStorageTokenRequest) HasCanPurgeTrash() bool {
	if o != nil && !IsNil(o.CanPurgeTrash) {
		return true
	}

	return false
}

// SetCanPurgeTrash gets a reference to the given bool and assigns it to the CanPurgeTrash field.
func (o *CreateStorageTokenRequest) SetCanPurgeTrash(v bool) {
	o.CanPurgeTrash = &v
}

// GetExpiresIn returns the ExpiresIn field value if set, zero value otherwise.
func (o *CreateStorageTokenRequest) GetExpiresIn() float32 {
	if o == nil || IsNil(o.ExpiresIn) {
		var ret float32
		return ret
	}
	return *o.ExpiresIn
}

// GetExpiresInOk returns a tuple with the ExpiresIn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateStorageTokenRequest) GetExpiresInOk() (*float32, bool) {
	if o == nil || IsNil(o.ExpiresIn) {
		return nil, false
	}
	return o.ExpiresIn, true
}

// HasExpiresIn returns a boolean if a field has been set.
func (o *CreateStorageTokenRequest) HasExpiresIn() bool {
	if o != nil && !IsNil(o.ExpiresIn) {
		return true
	}

	return false
}

// SetExpiresIn gets a reference to the given float32 and assigns it to the ExpiresIn field.
func (o *CreateStorageTokenRequest) SetExpiresIn(v float32) {
	o.ExpiresIn = &v
}

// GetBucketPermissions returns the BucketPermissions field value if set, zero value otherwise.
func (o *CreateStorageTokenRequest) GetBucketPermissions() CreateStorageTokenRequestBucketPermissions {
	if o == nil || IsNil(o.BucketPermissions) {
		var ret CreateStorageTokenRequestBucketPermissions
		return ret
	}
	return *o.BucketPermissions
}

// GetBucketPermissionsOk returns a tuple with the BucketPermissions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateStorageTokenRequest) GetBucketPermissionsOk() (*CreateStorageTokenRequestBucketPermissions, bool) {
	if o == nil || IsNil(o.BucketPermissions) {
		return nil, false
	}
	return o.BucketPermissions, true
}

// HasBucketPermissions returns a boolean if a field has been set.
func (o *CreateStorageTokenRequest) HasBucketPermissions() bool {
	if o != nil && !IsNil(o.BucketPermissions) {
		return true
	}

	return false
}

// SetBucketPermissions gets a reference to the given CreateStorageTokenRequestBucketPermissions and assigns it to the BucketPermissions field.
func (o *CreateStorageTokenRequest) SetBucketPermissions(v CreateStorageTokenRequestBucketPermissions) {
	o.BucketPermissions = &v
}

// GetComponentAccess returns the ComponentAccess field value if set, zero value otherwise.
func (o *CreateStorageTokenRequest) GetComponentAccess() string {
	if o == nil || IsNil(o.ComponentAccess) {
		var ret string
		return ret
	}
	return *o.ComponentAccess
}

// GetComponentAccessOk returns a tuple with the ComponentAccess field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateStorageTokenRequest) GetComponentAccessOk() (*string, bool) {
	if o == nil || IsNil(o.ComponentAccess) {
		return nil, false
	}
	return o.ComponentAccess, true
}

// HasComponentAccess returns a boolean if a field has been set.
func (o *CreateStorageTokenRequest) HasComponentAccess() bool {
	if o != nil && !IsNil(o.ComponentAccess) {
		return true
	}

	return false
}

// SetComponentAccess gets a reference to the given string and assigns it to the ComponentAccess field.
func (o *CreateStorageTokenRequest) SetComponentAccess(v string) {
	o.ComponentAccess = &v
}

func (o CreateStorageTokenRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateStorageTokenRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["description"] = o.Description
	if !IsNil(o.CanManageBuckets) {
		toSerialize["canManageBuckets"] = o.CanManageBuckets
	}
	if !IsNil(o.CanManageTokens) {
		toSerialize["canManageTokens"] = o.CanManageTokens
	}
	if !IsNil(o.CanReadAllFileUploads) {
		toSerialize["canReadAllFileUploads"] = o.CanReadAllFileUploads
	}
	if !IsNil(o.CanPurgeTrash) {
		toSerialize["canPurgeTrash"] = o.CanPurgeTrash
	}
	if !IsNil(o.ExpiresIn) {
		toSerialize["expiresIn"] = o.ExpiresIn
	}
	if !IsNil(o.BucketPermissions) {
		toSerialize["bucketPermissions"] = o.BucketPermissions
	}
	if !IsNil(o.ComponentAccess) {
		toSerialize["componentAccess[]"] = o.ComponentAccess
	}
	return toSerialize, nil
}

func (o *CreateStorageTokenRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"description",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateStorageTokenRequest := _CreateStorageTokenRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateStorageTokenRequest)

	if err != nil {
		return err
	}

	*o = CreateStorageTokenRequest(varCreateStorageTokenRequest)

	return err
}

type NullableCreateStorageTokenRequest struct {
	value *CreateStorageTokenRequest
	isSet bool
}

func (v NullableCreateStorageTokenRequest) Get() *CreateStorageTokenRequest {
	return v.value
}

func (v *NullableCreateStorageTokenRequest) Set(val *CreateStorageTokenRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateStorageTokenRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateStorageTokenRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateStorageTokenRequest(val *CreateStorageTokenRequest) *NullableCreateStorageTokenRequest {
	return &NullableCreateStorageTokenRequest{value: val, isSet: true}
}

func (v NullableCreateStorageTokenRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateStorageTokenRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


