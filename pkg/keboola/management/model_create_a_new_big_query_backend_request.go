/*
Manage API

The Keboola Connection Management API covers all tasks required for managing projects, as well as some super admin features for controlling and monitoring Keboola Connection.  ## Projects Management  * Create, modify and delete maintainers, organizations and projects  * Move projects between organizations  * Define project limits  * Provision Redshift and other Storage backends  * Access project management activity log  ## Projects Monitoring  * Monitoring of projects over organizations and maintainers  ## Super User Control and Monitoring  * UI release and deployment  * Components management  * Storage and Syrup jobs monitoring (will be provided by Syrup utilizing new tokens for authorization)  * Final project delete  * Workers start/shutdown, etc.  ## Authentication  The API supports authentication by a personal access token, which can be retrieved in [Account Settings](https://connection.keboola.com/admin/account/change-password) in Keboola Connection. An access token is tied to an administrator and its permissions are derived from their permissions. When the administrator is disabled or deleted, all their tokens become invalid too.  ## Token Types  There are the following types of tokens:  | Name | Tied to User | Token string is available only on create | Description  | | ------------- | ------------- | ------------------- | ----- | | user | Yes | Yes |Full access to maintainers, organizations and projects. Access is limited only to resources which are available for the token user.| | super | No | Yes | KBC management. Limited scopes can be specified `super_ui_deploy`, `super_monitoring`, ...  |

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CreateANewBigQueryBackendRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateANewBigQueryBackendRequest{}

// CreateANewBigQueryBackendRequest struct for CreateANewBigQueryBackendRequest
type CreateANewBigQueryBackendRequest struct {
	// associated GCP account owner
	Owner string `json:"owner"`
	// where is service account created
	FolderId string `json:"folderId"`
	Region string `json:"region"`
	Credentials *CreateNewGoogleCloudStorageRequestGcsCredentials `json:"credentials,omitempty"`
}

type _CreateANewBigQueryBackendRequest CreateANewBigQueryBackendRequest

// NewCreateANewBigQueryBackendRequest instantiates a new CreateANewBigQueryBackendRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateANewBigQueryBackendRequest(owner string, folderId string, region string) *CreateANewBigQueryBackendRequest {
	this := CreateANewBigQueryBackendRequest{}
	this.Owner = owner
	this.FolderId = folderId
	this.Region = region
	return &this
}

// NewCreateANewBigQueryBackendRequestWithDefaults instantiates a new CreateANewBigQueryBackendRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateANewBigQueryBackendRequestWithDefaults() *CreateANewBigQueryBackendRequest {
	this := CreateANewBigQueryBackendRequest{}
	return &this
}

// GetOwner returns the Owner field value
func (o *CreateANewBigQueryBackendRequest) GetOwner() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value
// and a boolean to check if the value has been set.
func (o *CreateANewBigQueryBackendRequest) GetOwnerOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Owner, true
}

// SetOwner sets field value
func (o *CreateANewBigQueryBackendRequest) SetOwner(v string) {
	o.Owner = v
}

// GetFolderId returns the FolderId field value
func (o *CreateANewBigQueryBackendRequest) GetFolderId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FolderId
}

// GetFolderIdOk returns a tuple with the FolderId field value
// and a boolean to check if the value has been set.
func (o *CreateANewBigQueryBackendRequest) GetFolderIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FolderId, true
}

// SetFolderId sets field value
func (o *CreateANewBigQueryBackendRequest) SetFolderId(v string) {
	o.FolderId = v
}

// GetRegion returns the Region field value
func (o *CreateANewBigQueryBackendRequest) GetRegion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Region
}

// GetRegionOk returns a tuple with the Region field value
// and a boolean to check if the value has been set.
func (o *CreateANewBigQueryBackendRequest) GetRegionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Region, true
}

// SetRegion sets field value
func (o *CreateANewBigQueryBackendRequest) SetRegion(v string) {
	o.Region = v
}

// GetCredentials returns the Credentials field value if set, zero value otherwise.
func (o *CreateANewBigQueryBackendRequest) GetCredentials() CreateNewGoogleCloudStorageRequestGcsCredentials {
	if o == nil || IsNil(o.Credentials) {
		var ret CreateNewGoogleCloudStorageRequestGcsCredentials
		return ret
	}
	return *o.Credentials
}

// GetCredentialsOk returns a tuple with the Credentials field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateANewBigQueryBackendRequest) GetCredentialsOk() (*CreateNewGoogleCloudStorageRequestGcsCredentials, bool) {
	if o == nil || IsNil(o.Credentials) {
		return nil, false
	}
	return o.Credentials, true
}

// HasCredentials returns a boolean if a field has been set.
func (o *CreateANewBigQueryBackendRequest) HasCredentials() bool {
	if o != nil && !IsNil(o.Credentials) {
		return true
	}

	return false
}

// SetCredentials gets a reference to the given CreateNewGoogleCloudStorageRequestGcsCredentials and assigns it to the Credentials field.
func (o *CreateANewBigQueryBackendRequest) SetCredentials(v CreateNewGoogleCloudStorageRequestGcsCredentials) {
	o.Credentials = &v
}

func (o CreateANewBigQueryBackendRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateANewBigQueryBackendRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["owner"] = o.Owner
	toSerialize["folderId"] = o.FolderId
	toSerialize["region"] = o.Region
	if !IsNil(o.Credentials) {
		toSerialize["credentials"] = o.Credentials
	}
	return toSerialize, nil
}

func (o *CreateANewBigQueryBackendRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"owner",
		"folderId",
		"region",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateANewBigQueryBackendRequest := _CreateANewBigQueryBackendRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateANewBigQueryBackendRequest)

	if err != nil {
		return err
	}

	*o = CreateANewBigQueryBackendRequest(varCreateANewBigQueryBackendRequest)

	return err
}

type NullableCreateANewBigQueryBackendRequest struct {
	value *CreateANewBigQueryBackendRequest
	isSet bool
}

func (v NullableCreateANewBigQueryBackendRequest) Get() *CreateANewBigQueryBackendRequest {
	return v.value
}

func (v *NullableCreateANewBigQueryBackendRequest) Set(val *CreateANewBigQueryBackendRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateANewBigQueryBackendRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateANewBigQueryBackendRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateANewBigQueryBackendRequest(val *CreateANewBigQueryBackendRequest) *NullableCreateANewBigQueryBackendRequest {
	return &NullableCreateANewBigQueryBackendRequest{value: val, isSet: true}
}

func (v NullableCreateANewBigQueryBackendRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateANewBigQueryBackendRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


