/*
Manage API

The Keboola Connection Management API covers all tasks required for managing projects, as well as some super admin features for controlling and monitoring Keboola Connection.  ## Projects Management  * Create, modify and delete maintainers, organizations and projects  * Move projects between organizations  * Define project limits  * Provision Redshift and other Storage backends  * Access project management activity log  ## Projects Monitoring  * Monitoring of projects over organizations and maintainers  ## Super User Control and Monitoring  * UI release and deployment  * Components management  * Storage and Syrup jobs monitoring (will be provided by Syrup utilizing new tokens for authorization)  * Final project delete  * Workers start/shutdown, etc.  ## Authentication  The API supports authentication by a personal access token, which can be retrieved in [Account Settings](https://connection.keboola.com/admin/account/change-password) in Keboola Connection. An access token is tied to an administrator and its permissions are derived from their permissions. When the administrator is disabled or deleted, all their tokens become invalid too.  ## Token Types  There are the following types of tokens:  | Name | Tied to User | Token string is available only on create | Description  | | ------------- | ------------- | ------------------- | ----- | | user | Yes | Yes |Full access to maintainers, organizations and projects. Access is limited only to resources which are available for the token user.| | super | No | Yes | KBC management. Limited scopes can be specified `super_ui_deploy`, `super_monitoring`, ...  |

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"encoding/json"
)

// checks if the CreateProject201ResponseLimits type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateProject201ResponseLimits{}

// CreateProject201ResponseLimits struct for CreateProject201ResponseLimits
type CreateProject201ResponseLimits struct {
	ComponentsJobsParallelism *ListProjectsForAnOrganization200ResponseLimitsLimitName `json:"components.jobsParallelism,omitempty"`
	GoodDataDataSizeBytes *ListProjectsForAnOrganization200ResponseLimitsLimitName `json:"goodData.dataSizeBytes,omitempty"`
	GoodDataDemoTokenEnabled *ListProjectsForAnOrganization200ResponseLimitsLimitName `json:"goodData.demoTokenEnabled,omitempty"`
	GoodDataProdTokenEnabled *ListProjectsForAnOrganization200ResponseLimitsLimitName `json:"goodData.prodTokenEnabled,omitempty"`
	GoodDataUsersCount *ListProjectsForAnOrganization200ResponseLimitsLimitName `json:"goodData.usersCount,omitempty"`
	KbcAdminsCount *ListProjectsForAnOrganization200ResponseLimitsLimitName `json:"kbc.adminsCount,omitempty"`
	KbcExtractorsCount *ListProjectsForAnOrganization200ResponseLimitsLimitName `json:"kbc.extractorsCount,omitempty"`
	KbcWritersCount *ListProjectsForAnOrganization200ResponseLimitsLimitName `json:"kbc.writersCount,omitempty"`
	OrchestrationsCount *ListProjectsForAnOrganization200ResponseLimitsLimitName `json:"orchestrations.count,omitempty"`
	StorageDataSizeBytes *ListProjectsForAnOrganization200ResponseLimitsLimitName `json:"storage.dataSizeBytes,omitempty"`
	StorageJobsParallelism *ListProjectsForAnOrganization200ResponseLimitsLimitName `json:"storage.jobsParallelism,omitempty"`
}

// NewCreateProject201ResponseLimits instantiates a new CreateProject201ResponseLimits object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateProject201ResponseLimits() *CreateProject201ResponseLimits {
	this := CreateProject201ResponseLimits{}
	return &this
}

// NewCreateProject201ResponseLimitsWithDefaults instantiates a new CreateProject201ResponseLimits object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateProject201ResponseLimitsWithDefaults() *CreateProject201ResponseLimits {
	this := CreateProject201ResponseLimits{}
	return &this
}

// GetComponentsJobsParallelism returns the ComponentsJobsParallelism field value if set, zero value otherwise.
func (o *CreateProject201ResponseLimits) GetComponentsJobsParallelism() ListProjectsForAnOrganization200ResponseLimitsLimitName {
	if o == nil || IsNil(o.ComponentsJobsParallelism) {
		var ret ListProjectsForAnOrganization200ResponseLimitsLimitName
		return ret
	}
	return *o.ComponentsJobsParallelism
}

// GetComponentsJobsParallelismOk returns a tuple with the ComponentsJobsParallelism field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateProject201ResponseLimits) GetComponentsJobsParallelismOk() (*ListProjectsForAnOrganization200ResponseLimitsLimitName, bool) {
	if o == nil || IsNil(o.ComponentsJobsParallelism) {
		return nil, false
	}
	return o.ComponentsJobsParallelism, true
}

// HasComponentsJobsParallelism returns a boolean if a field has been set.
func (o *CreateProject201ResponseLimits) HasComponentsJobsParallelism() bool {
	if o != nil && !IsNil(o.ComponentsJobsParallelism) {
		return true
	}

	return false
}

// SetComponentsJobsParallelism gets a reference to the given ListProjectsForAnOrganization200ResponseLimitsLimitName and assigns it to the ComponentsJobsParallelism field.
func (o *CreateProject201ResponseLimits) SetComponentsJobsParallelism(v ListProjectsForAnOrganization200ResponseLimitsLimitName) {
	o.ComponentsJobsParallelism = &v
}

// GetGoodDataDataSizeBytes returns the GoodDataDataSizeBytes field value if set, zero value otherwise.
func (o *CreateProject201ResponseLimits) GetGoodDataDataSizeBytes() ListProjectsForAnOrganization200ResponseLimitsLimitName {
	if o == nil || IsNil(o.GoodDataDataSizeBytes) {
		var ret ListProjectsForAnOrganization200ResponseLimitsLimitName
		return ret
	}
	return *o.GoodDataDataSizeBytes
}

// GetGoodDataDataSizeBytesOk returns a tuple with the GoodDataDataSizeBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateProject201ResponseLimits) GetGoodDataDataSizeBytesOk() (*ListProjectsForAnOrganization200ResponseLimitsLimitName, bool) {
	if o == nil || IsNil(o.GoodDataDataSizeBytes) {
		return nil, false
	}
	return o.GoodDataDataSizeBytes, true
}

// HasGoodDataDataSizeBytes returns a boolean if a field has been set.
func (o *CreateProject201ResponseLimits) HasGoodDataDataSizeBytes() bool {
	if o != nil && !IsNil(o.GoodDataDataSizeBytes) {
		return true
	}

	return false
}

// SetGoodDataDataSizeBytes gets a reference to the given ListProjectsForAnOrganization200ResponseLimitsLimitName and assigns it to the GoodDataDataSizeBytes field.
func (o *CreateProject201ResponseLimits) SetGoodDataDataSizeBytes(v ListProjectsForAnOrganization200ResponseLimitsLimitName) {
	o.GoodDataDataSizeBytes = &v
}

// GetGoodDataDemoTokenEnabled returns the GoodDataDemoTokenEnabled field value if set, zero value otherwise.
func (o *CreateProject201ResponseLimits) GetGoodDataDemoTokenEnabled() ListProjectsForAnOrganization200ResponseLimitsLimitName {
	if o == nil || IsNil(o.GoodDataDemoTokenEnabled) {
		var ret ListProjectsForAnOrganization200ResponseLimitsLimitName
		return ret
	}
	return *o.GoodDataDemoTokenEnabled
}

// GetGoodDataDemoTokenEnabledOk returns a tuple with the GoodDataDemoTokenEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateProject201ResponseLimits) GetGoodDataDemoTokenEnabledOk() (*ListProjectsForAnOrganization200ResponseLimitsLimitName, bool) {
	if o == nil || IsNil(o.GoodDataDemoTokenEnabled) {
		return nil, false
	}
	return o.GoodDataDemoTokenEnabled, true
}

// HasGoodDataDemoTokenEnabled returns a boolean if a field has been set.
func (o *CreateProject201ResponseLimits) HasGoodDataDemoTokenEnabled() bool {
	if o != nil && !IsNil(o.GoodDataDemoTokenEnabled) {
		return true
	}

	return false
}

// SetGoodDataDemoTokenEnabled gets a reference to the given ListProjectsForAnOrganization200ResponseLimitsLimitName and assigns it to the GoodDataDemoTokenEnabled field.
func (o *CreateProject201ResponseLimits) SetGoodDataDemoTokenEnabled(v ListProjectsForAnOrganization200ResponseLimitsLimitName) {
	o.GoodDataDemoTokenEnabled = &v
}

// GetGoodDataProdTokenEnabled returns the GoodDataProdTokenEnabled field value if set, zero value otherwise.
func (o *CreateProject201ResponseLimits) GetGoodDataProdTokenEnabled() ListProjectsForAnOrganization200ResponseLimitsLimitName {
	if o == nil || IsNil(o.GoodDataProdTokenEnabled) {
		var ret ListProjectsForAnOrganization200ResponseLimitsLimitName
		return ret
	}
	return *o.GoodDataProdTokenEnabled
}

// GetGoodDataProdTokenEnabledOk returns a tuple with the GoodDataProdTokenEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateProject201ResponseLimits) GetGoodDataProdTokenEnabledOk() (*ListProjectsForAnOrganization200ResponseLimitsLimitName, bool) {
	if o == nil || IsNil(o.GoodDataProdTokenEnabled) {
		return nil, false
	}
	return o.GoodDataProdTokenEnabled, true
}

// HasGoodDataProdTokenEnabled returns a boolean if a field has been set.
func (o *CreateProject201ResponseLimits) HasGoodDataProdTokenEnabled() bool {
	if o != nil && !IsNil(o.GoodDataProdTokenEnabled) {
		return true
	}

	return false
}

// SetGoodDataProdTokenEnabled gets a reference to the given ListProjectsForAnOrganization200ResponseLimitsLimitName and assigns it to the GoodDataProdTokenEnabled field.
func (o *CreateProject201ResponseLimits) SetGoodDataProdTokenEnabled(v ListProjectsForAnOrganization200ResponseLimitsLimitName) {
	o.GoodDataProdTokenEnabled = &v
}

// GetGoodDataUsersCount returns the GoodDataUsersCount field value if set, zero value otherwise.
func (o *CreateProject201ResponseLimits) GetGoodDataUsersCount() ListProjectsForAnOrganization200ResponseLimitsLimitName {
	if o == nil || IsNil(o.GoodDataUsersCount) {
		var ret ListProjectsForAnOrganization200ResponseLimitsLimitName
		return ret
	}
	return *o.GoodDataUsersCount
}

// GetGoodDataUsersCountOk returns a tuple with the GoodDataUsersCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateProject201ResponseLimits) GetGoodDataUsersCountOk() (*ListProjectsForAnOrganization200ResponseLimitsLimitName, bool) {
	if o == nil || IsNil(o.GoodDataUsersCount) {
		return nil, false
	}
	return o.GoodDataUsersCount, true
}

// HasGoodDataUsersCount returns a boolean if a field has been set.
func (o *CreateProject201ResponseLimits) HasGoodDataUsersCount() bool {
	if o != nil && !IsNil(o.GoodDataUsersCount) {
		return true
	}

	return false
}

// SetGoodDataUsersCount gets a reference to the given ListProjectsForAnOrganization200ResponseLimitsLimitName and assigns it to the GoodDataUsersCount field.
func (o *CreateProject201ResponseLimits) SetGoodDataUsersCount(v ListProjectsForAnOrganization200ResponseLimitsLimitName) {
	o.GoodDataUsersCount = &v
}

// GetKbcAdminsCount returns the KbcAdminsCount field value if set, zero value otherwise.
func (o *CreateProject201ResponseLimits) GetKbcAdminsCount() ListProjectsForAnOrganization200ResponseLimitsLimitName {
	if o == nil || IsNil(o.KbcAdminsCount) {
		var ret ListProjectsForAnOrganization200ResponseLimitsLimitName
		return ret
	}
	return *o.KbcAdminsCount
}

// GetKbcAdminsCountOk returns a tuple with the KbcAdminsCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateProject201ResponseLimits) GetKbcAdminsCountOk() (*ListProjectsForAnOrganization200ResponseLimitsLimitName, bool) {
	if o == nil || IsNil(o.KbcAdminsCount) {
		return nil, false
	}
	return o.KbcAdminsCount, true
}

// HasKbcAdminsCount returns a boolean if a field has been set.
func (o *CreateProject201ResponseLimits) HasKbcAdminsCount() bool {
	if o != nil && !IsNil(o.KbcAdminsCount) {
		return true
	}

	return false
}

// SetKbcAdminsCount gets a reference to the given ListProjectsForAnOrganization200ResponseLimitsLimitName and assigns it to the KbcAdminsCount field.
func (o *CreateProject201ResponseLimits) SetKbcAdminsCount(v ListProjectsForAnOrganization200ResponseLimitsLimitName) {
	o.KbcAdminsCount = &v
}

// GetKbcExtractorsCount returns the KbcExtractorsCount field value if set, zero value otherwise.
func (o *CreateProject201ResponseLimits) GetKbcExtractorsCount() ListProjectsForAnOrganization200ResponseLimitsLimitName {
	if o == nil || IsNil(o.KbcExtractorsCount) {
		var ret ListProjectsForAnOrganization200ResponseLimitsLimitName
		return ret
	}
	return *o.KbcExtractorsCount
}

// GetKbcExtractorsCountOk returns a tuple with the KbcExtractorsCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateProject201ResponseLimits) GetKbcExtractorsCountOk() (*ListProjectsForAnOrganization200ResponseLimitsLimitName, bool) {
	if o == nil || IsNil(o.KbcExtractorsCount) {
		return nil, false
	}
	return o.KbcExtractorsCount, true
}

// HasKbcExtractorsCount returns a boolean if a field has been set.
func (o *CreateProject201ResponseLimits) HasKbcExtractorsCount() bool {
	if o != nil && !IsNil(o.KbcExtractorsCount) {
		return true
	}

	return false
}

// SetKbcExtractorsCount gets a reference to the given ListProjectsForAnOrganization200ResponseLimitsLimitName and assigns it to the KbcExtractorsCount field.
func (o *CreateProject201ResponseLimits) SetKbcExtractorsCount(v ListProjectsForAnOrganization200ResponseLimitsLimitName) {
	o.KbcExtractorsCount = &v
}

// GetKbcWritersCount returns the KbcWritersCount field value if set, zero value otherwise.
func (o *CreateProject201ResponseLimits) GetKbcWritersCount() ListProjectsForAnOrganization200ResponseLimitsLimitName {
	if o == nil || IsNil(o.KbcWritersCount) {
		var ret ListProjectsForAnOrganization200ResponseLimitsLimitName
		return ret
	}
	return *o.KbcWritersCount
}

// GetKbcWritersCountOk returns a tuple with the KbcWritersCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateProject201ResponseLimits) GetKbcWritersCountOk() (*ListProjectsForAnOrganization200ResponseLimitsLimitName, bool) {
	if o == nil || IsNil(o.KbcWritersCount) {
		return nil, false
	}
	return o.KbcWritersCount, true
}

// HasKbcWritersCount returns a boolean if a field has been set.
func (o *CreateProject201ResponseLimits) HasKbcWritersCount() bool {
	if o != nil && !IsNil(o.KbcWritersCount) {
		return true
	}

	return false
}

// SetKbcWritersCount gets a reference to the given ListProjectsForAnOrganization200ResponseLimitsLimitName and assigns it to the KbcWritersCount field.
func (o *CreateProject201ResponseLimits) SetKbcWritersCount(v ListProjectsForAnOrganization200ResponseLimitsLimitName) {
	o.KbcWritersCount = &v
}

// GetOrchestrationsCount returns the OrchestrationsCount field value if set, zero value otherwise.
func (o *CreateProject201ResponseLimits) GetOrchestrationsCount() ListProjectsForAnOrganization200ResponseLimitsLimitName {
	if o == nil || IsNil(o.OrchestrationsCount) {
		var ret ListProjectsForAnOrganization200ResponseLimitsLimitName
		return ret
	}
	return *o.OrchestrationsCount
}

// GetOrchestrationsCountOk returns a tuple with the OrchestrationsCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateProject201ResponseLimits) GetOrchestrationsCountOk() (*ListProjectsForAnOrganization200ResponseLimitsLimitName, bool) {
	if o == nil || IsNil(o.OrchestrationsCount) {
		return nil, false
	}
	return o.OrchestrationsCount, true
}

// HasOrchestrationsCount returns a boolean if a field has been set.
func (o *CreateProject201ResponseLimits) HasOrchestrationsCount() bool {
	if o != nil && !IsNil(o.OrchestrationsCount) {
		return true
	}

	return false
}

// SetOrchestrationsCount gets a reference to the given ListProjectsForAnOrganization200ResponseLimitsLimitName and assigns it to the OrchestrationsCount field.
func (o *CreateProject201ResponseLimits) SetOrchestrationsCount(v ListProjectsForAnOrganization200ResponseLimitsLimitName) {
	o.OrchestrationsCount = &v
}

// GetStorageDataSizeBytes returns the StorageDataSizeBytes field value if set, zero value otherwise.
func (o *CreateProject201ResponseLimits) GetStorageDataSizeBytes() ListProjectsForAnOrganization200ResponseLimitsLimitName {
	if o == nil || IsNil(o.StorageDataSizeBytes) {
		var ret ListProjectsForAnOrganization200ResponseLimitsLimitName
		return ret
	}
	return *o.StorageDataSizeBytes
}

// GetStorageDataSizeBytesOk returns a tuple with the StorageDataSizeBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateProject201ResponseLimits) GetStorageDataSizeBytesOk() (*ListProjectsForAnOrganization200ResponseLimitsLimitName, bool) {
	if o == nil || IsNil(o.StorageDataSizeBytes) {
		return nil, false
	}
	return o.StorageDataSizeBytes, true
}

// HasStorageDataSizeBytes returns a boolean if a field has been set.
func (o *CreateProject201ResponseLimits) HasStorageDataSizeBytes() bool {
	if o != nil && !IsNil(o.StorageDataSizeBytes) {
		return true
	}

	return false
}

// SetStorageDataSizeBytes gets a reference to the given ListProjectsForAnOrganization200ResponseLimitsLimitName and assigns it to the StorageDataSizeBytes field.
func (o *CreateProject201ResponseLimits) SetStorageDataSizeBytes(v ListProjectsForAnOrganization200ResponseLimitsLimitName) {
	o.StorageDataSizeBytes = &v
}

// GetStorageJobsParallelism returns the StorageJobsParallelism field value if set, zero value otherwise.
func (o *CreateProject201ResponseLimits) GetStorageJobsParallelism() ListProjectsForAnOrganization200ResponseLimitsLimitName {
	if o == nil || IsNil(o.StorageJobsParallelism) {
		var ret ListProjectsForAnOrganization200ResponseLimitsLimitName
		return ret
	}
	return *o.StorageJobsParallelism
}

// GetStorageJobsParallelismOk returns a tuple with the StorageJobsParallelism field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateProject201ResponseLimits) GetStorageJobsParallelismOk() (*ListProjectsForAnOrganization200ResponseLimitsLimitName, bool) {
	if o == nil || IsNil(o.StorageJobsParallelism) {
		return nil, false
	}
	return o.StorageJobsParallelism, true
}

// HasStorageJobsParallelism returns a boolean if a field has been set.
func (o *CreateProject201ResponseLimits) HasStorageJobsParallelism() bool {
	if o != nil && !IsNil(o.StorageJobsParallelism) {
		return true
	}

	return false
}

// SetStorageJobsParallelism gets a reference to the given ListProjectsForAnOrganization200ResponseLimitsLimitName and assigns it to the StorageJobsParallelism field.
func (o *CreateProject201ResponseLimits) SetStorageJobsParallelism(v ListProjectsForAnOrganization200ResponseLimitsLimitName) {
	o.StorageJobsParallelism = &v
}

func (o CreateProject201ResponseLimits) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateProject201ResponseLimits) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ComponentsJobsParallelism) {
		toSerialize["components.jobsParallelism"] = o.ComponentsJobsParallelism
	}
	if !IsNil(o.GoodDataDataSizeBytes) {
		toSerialize["goodData.dataSizeBytes"] = o.GoodDataDataSizeBytes
	}
	if !IsNil(o.GoodDataDemoTokenEnabled) {
		toSerialize["goodData.demoTokenEnabled"] = o.GoodDataDemoTokenEnabled
	}
	if !IsNil(o.GoodDataProdTokenEnabled) {
		toSerialize["goodData.prodTokenEnabled"] = o.GoodDataProdTokenEnabled
	}
	if !IsNil(o.GoodDataUsersCount) {
		toSerialize["goodData.usersCount"] = o.GoodDataUsersCount
	}
	if !IsNil(o.KbcAdminsCount) {
		toSerialize["kbc.adminsCount"] = o.KbcAdminsCount
	}
	if !IsNil(o.KbcExtractorsCount) {
		toSerialize["kbc.extractorsCount"] = o.KbcExtractorsCount
	}
	if !IsNil(o.KbcWritersCount) {
		toSerialize["kbc.writersCount"] = o.KbcWritersCount
	}
	if !IsNil(o.OrchestrationsCount) {
		toSerialize["orchestrations.count"] = o.OrchestrationsCount
	}
	if !IsNil(o.StorageDataSizeBytes) {
		toSerialize["storage.dataSizeBytes"] = o.StorageDataSizeBytes
	}
	if !IsNil(o.StorageJobsParallelism) {
		toSerialize["storage.jobsParallelism"] = o.StorageJobsParallelism
	}
	return toSerialize, nil
}

type NullableCreateProject201ResponseLimits struct {
	value *CreateProject201ResponseLimits
	isSet bool
}

func (v NullableCreateProject201ResponseLimits) Get() *CreateProject201ResponseLimits {
	return v.value
}

func (v *NullableCreateProject201ResponseLimits) Set(val *CreateProject201ResponseLimits) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateProject201ResponseLimits) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateProject201ResponseLimits) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateProject201ResponseLimits(val *CreateProject201ResponseLimits) *NullableCreateProject201ResponseLimits {
	return &NullableCreateProject201ResponseLimits{value: val, isSet: true}
}

func (v NullableCreateProject201ResponseLimits) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateProject201ResponseLimits) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


