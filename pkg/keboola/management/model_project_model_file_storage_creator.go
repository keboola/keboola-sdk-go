/*
Manage API

The Keboola Connection Management API covers all tasks required for managing projects, as well as some super admin features for controlling and monitoring Keboola Connection.  ## Projects Management  * Create, modify and delete maintainers, organizations and projects  * Move projects between organizations  * Define project limits  * Provision Redshift and other Storage backends  * Access project management activity log  ## Projects Monitoring  * Monitoring of projects over organizations and maintainers  ## Super User Control and Monitoring  * UI release and deployment  * Components management  * Storage and Syrup jobs monitoring (will be provided by Syrup utilizing new tokens for authorization)  * Final project delete  * Workers start/shutdown, etc.  ## Authentication  The API supports authentication by a personal access token, which can be retrieved in [Account Settings](https://connection.keboola.com/admin/account/change-password) in Keboola Connection. An access token is tied to an administrator and its permissions are derived from their permissions. When the administrator is disabled or deleted, all their tokens become invalid too.  ## Token Types  There are the following types of tokens:  | Name | Tied to User | Token string is available only on create | Description  | | ------------- | ------------- | ------------------- | ----- | | user | Yes | Yes |Full access to maintainers, organizations and projects. Access is limited only to resources which are available for the token user.| | super | No | Yes | KBC management. Limited scopes can be specified `super_ui_deploy`, `super_monitoring`, ...  |

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"encoding/json"
)

// checks if the ProjectModelFileStorageCreator type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProjectModelFileStorageCreator{}

// ProjectModelFileStorageCreator struct for ProjectModelFileStorageCreator
type ProjectModelFileStorageCreator struct {
	Id *float32 `json:"id,omitempty"`
	Name interface{} `json:"name,omitempty"`
}

// NewProjectModelFileStorageCreator instantiates a new ProjectModelFileStorageCreator object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProjectModelFileStorageCreator() *ProjectModelFileStorageCreator {
	this := ProjectModelFileStorageCreator{}
	return &this
}

// NewProjectModelFileStorageCreatorWithDefaults instantiates a new ProjectModelFileStorageCreator object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProjectModelFileStorageCreatorWithDefaults() *ProjectModelFileStorageCreator {
	this := ProjectModelFileStorageCreator{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ProjectModelFileStorageCreator) GetId() float32 {
	if o == nil || IsNil(o.Id) {
		var ret float32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectModelFileStorageCreator) GetIdOk() (*float32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ProjectModelFileStorageCreator) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given float32 and assigns it to the Id field.
func (o *ProjectModelFileStorageCreator) SetId(v float32) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProjectModelFileStorageCreator) GetName() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProjectModelFileStorageCreator) GetNameOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return &o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ProjectModelFileStorageCreator) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given interface{} and assigns it to the Name field.
func (o *ProjectModelFileStorageCreator) SetName(v interface{}) {
	o.Name = v
}

func (o ProjectModelFileStorageCreator) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProjectModelFileStorageCreator) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	return toSerialize, nil
}

type NullableProjectModelFileStorageCreator struct {
	value *ProjectModelFileStorageCreator
	isSet bool
}

func (v NullableProjectModelFileStorageCreator) Get() *ProjectModelFileStorageCreator {
	return v.value
}

func (v *NullableProjectModelFileStorageCreator) Set(val *ProjectModelFileStorageCreator) {
	v.value = val
	v.isSet = true
}

func (v NullableProjectModelFileStorageCreator) IsSet() bool {
	return v.isSet
}

func (v *NullableProjectModelFileStorageCreator) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProjectModelFileStorageCreator(val *ProjectModelFileStorageCreator) *NullableProjectModelFileStorageCreator {
	return &NullableProjectModelFileStorageCreator{value: val, isSet: true}
}

func (v NullableProjectModelFileStorageCreator) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProjectModelFileStorageCreator) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


