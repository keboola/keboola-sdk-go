/*
Manage API

The Keboola Connection Management API covers all tasks required for managing projects, as well as some super admin features for controlling and monitoring Keboola Connection.  ## Projects Management  * Create, modify and delete maintainers, organizations and projects  * Move projects between organizations  * Define project limits  * Provision Redshift and other Storage backends  * Access project management activity log  ## Projects Monitoring  * Monitoring of projects over organizations and maintainers  ## Super User Control and Monitoring  * UI release and deployment  * Components management  * Storage and Syrup jobs monitoring (will be provided by Syrup utilizing new tokens for authorization)  * Final project delete  * Workers start/shutdown, etc.  ## Authentication  The API supports authentication by a personal access token, which can be retrieved in [Account Settings](https://connection.keboola.com/admin/account/change-password) in Keboola Connection. An access token is tied to an administrator and its permissions are derived from their permissions. When the administrator is disabled or deleted, all their tokens become invalid too.  ## Token Types  There are the following types of tokens:  | Name | Tied to User | Token string is available only on create | Description  | | ------------- | ------------- | ------------------- | ----- | | user | Yes | Yes |Full access to maintainers, organizations and projects. Access is limited only to resources which are available for the token user.| | super | No | Yes | KBC management. Limited scopes can be specified `super_ui_deploy`, `super_monitoring`, ...  |

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"encoding/json"
)

// checks if the ProjectModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProjectModel{}

// ProjectModel struct for ProjectModel
type ProjectModel struct {
	Id *float32 `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	Type *string `json:"type,omitempty"`
	Region *string `json:"region,omitempty"`
	Created *string `json:"created,omitempty"`
	Expires interface{} `json:"expires,omitempty"`
	Features []interface{} `json:"features,omitempty"`
	DataSizeBytes *float32 `json:"dataSizeBytes,omitempty"`
	RowsCount *float32 `json:"rowsCount,omitempty"`
	HasMysql *bool `json:"hasMysql,omitempty"`
	HasRedshift *bool `json:"hasRedshift,omitempty"`
	HasSnowflake *bool `json:"hasSnowflake,omitempty"`
	HasSynapse *bool `json:"hasSynapse,omitempty"`
	HasExasol *bool `json:"hasExasol,omitempty"`
	HasTeradata *bool `json:"hasTeradata,omitempty"`
	DefaultBackend *string `json:"defaultBackend,omitempty"`
	HasTryModeOn *string `json:"hasTryModeOn,omitempty"`
	Limits *ProjectModelLimits `json:"limits,omitempty"`
	Metrics *ProjectModelMetrics `json:"metrics,omitempty"`
	IsDisabled *bool `json:"isDisabled,omitempty"`
	BilledMonthlyPrice interface{} `json:"billedMonthlyPrice,omitempty"`
	DataRetentionTimeInDays *float32 `json:"dataRetentionTimeInDays,omitempty"`
	Organization *ProjectModelOrganization `json:"organization,omitempty"`
	FileStorage *ProjectModelFileStorage `json:"fileStorage,omitempty"`
	Backends *ProjectModelBackends `json:"backends,omitempty"`
	PayAsYouGo *ProjectModelPayAsYouGo `json:"payAsYouGo,omitempty"`
}

// NewProjectModel instantiates a new ProjectModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProjectModel() *ProjectModel {
	this := ProjectModel{}
	return &this
}

// NewProjectModelWithDefaults instantiates a new ProjectModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProjectModelWithDefaults() *ProjectModel {
	this := ProjectModel{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ProjectModel) GetId() float32 {
	if o == nil || IsNil(o.Id) {
		var ret float32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectModel) GetIdOk() (*float32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ProjectModel) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given float32 and assigns it to the Id field.
func (o *ProjectModel) SetId(v float32) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ProjectModel) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectModel) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ProjectModel) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ProjectModel) SetName(v string) {
	o.Name = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ProjectModel) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectModel) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ProjectModel) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ProjectModel) SetType(v string) {
	o.Type = &v
}

// GetRegion returns the Region field value if set, zero value otherwise.
func (o *ProjectModel) GetRegion() string {
	if o == nil || IsNil(o.Region) {
		var ret string
		return ret
	}
	return *o.Region
}

// GetRegionOk returns a tuple with the Region field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectModel) GetRegionOk() (*string, bool) {
	if o == nil || IsNil(o.Region) {
		return nil, false
	}
	return o.Region, true
}

// HasRegion returns a boolean if a field has been set.
func (o *ProjectModel) HasRegion() bool {
	if o != nil && !IsNil(o.Region) {
		return true
	}

	return false
}

// SetRegion gets a reference to the given string and assigns it to the Region field.
func (o *ProjectModel) SetRegion(v string) {
	o.Region = &v
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *ProjectModel) GetCreated() string {
	if o == nil || IsNil(o.Created) {
		var ret string
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectModel) GetCreatedOk() (*string, bool) {
	if o == nil || IsNil(o.Created) {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *ProjectModel) HasCreated() bool {
	if o != nil && !IsNil(o.Created) {
		return true
	}

	return false
}

// SetCreated gets a reference to the given string and assigns it to the Created field.
func (o *ProjectModel) SetCreated(v string) {
	o.Created = &v
}

// GetExpires returns the Expires field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProjectModel) GetExpires() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Expires
}

// GetExpiresOk returns a tuple with the Expires field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProjectModel) GetExpiresOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Expires) {
		return nil, false
	}
	return &o.Expires, true
}

// HasExpires returns a boolean if a field has been set.
func (o *ProjectModel) HasExpires() bool {
	if o != nil && !IsNil(o.Expires) {
		return true
	}

	return false
}

// SetExpires gets a reference to the given interface{} and assigns it to the Expires field.
func (o *ProjectModel) SetExpires(v interface{}) {
	o.Expires = v
}

// GetFeatures returns the Features field value if set, zero value otherwise.
func (o *ProjectModel) GetFeatures() []interface{} {
	if o == nil || IsNil(o.Features) {
		var ret []interface{}
		return ret
	}
	return o.Features
}

// GetFeaturesOk returns a tuple with the Features field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectModel) GetFeaturesOk() ([]interface{}, bool) {
	if o == nil || IsNil(o.Features) {
		return nil, false
	}
	return o.Features, true
}

// HasFeatures returns a boolean if a field has been set.
func (o *ProjectModel) HasFeatures() bool {
	if o != nil && !IsNil(o.Features) {
		return true
	}

	return false
}

// SetFeatures gets a reference to the given []interface{} and assigns it to the Features field.
func (o *ProjectModel) SetFeatures(v []interface{}) {
	o.Features = v
}

// GetDataSizeBytes returns the DataSizeBytes field value if set, zero value otherwise.
func (o *ProjectModel) GetDataSizeBytes() float32 {
	if o == nil || IsNil(o.DataSizeBytes) {
		var ret float32
		return ret
	}
	return *o.DataSizeBytes
}

// GetDataSizeBytesOk returns a tuple with the DataSizeBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectModel) GetDataSizeBytesOk() (*float32, bool) {
	if o == nil || IsNil(o.DataSizeBytes) {
		return nil, false
	}
	return o.DataSizeBytes, true
}

// HasDataSizeBytes returns a boolean if a field has been set.
func (o *ProjectModel) HasDataSizeBytes() bool {
	if o != nil && !IsNil(o.DataSizeBytes) {
		return true
	}

	return false
}

// SetDataSizeBytes gets a reference to the given float32 and assigns it to the DataSizeBytes field.
func (o *ProjectModel) SetDataSizeBytes(v float32) {
	o.DataSizeBytes = &v
}

// GetRowsCount returns the RowsCount field value if set, zero value otherwise.
func (o *ProjectModel) GetRowsCount() float32 {
	if o == nil || IsNil(o.RowsCount) {
		var ret float32
		return ret
	}
	return *o.RowsCount
}

// GetRowsCountOk returns a tuple with the RowsCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectModel) GetRowsCountOk() (*float32, bool) {
	if o == nil || IsNil(o.RowsCount) {
		return nil, false
	}
	return o.RowsCount, true
}

// HasRowsCount returns a boolean if a field has been set.
func (o *ProjectModel) HasRowsCount() bool {
	if o != nil && !IsNil(o.RowsCount) {
		return true
	}

	return false
}

// SetRowsCount gets a reference to the given float32 and assigns it to the RowsCount field.
func (o *ProjectModel) SetRowsCount(v float32) {
	o.RowsCount = &v
}

// GetHasMysql returns the HasMysql field value if set, zero value otherwise.
func (o *ProjectModel) GetHasMysql() bool {
	if o == nil || IsNil(o.HasMysql) {
		var ret bool
		return ret
	}
	return *o.HasMysql
}

// GetHasMysqlOk returns a tuple with the HasMysql field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectModel) GetHasMysqlOk() (*bool, bool) {
	if o == nil || IsNil(o.HasMysql) {
		return nil, false
	}
	return o.HasMysql, true
}

// HasHasMysql returns a boolean if a field has been set.
func (o *ProjectModel) HasHasMysql() bool {
	if o != nil && !IsNil(o.HasMysql) {
		return true
	}

	return false
}

// SetHasMysql gets a reference to the given bool and assigns it to the HasMysql field.
func (o *ProjectModel) SetHasMysql(v bool) {
	o.HasMysql = &v
}

// GetHasRedshift returns the HasRedshift field value if set, zero value otherwise.
func (o *ProjectModel) GetHasRedshift() bool {
	if o == nil || IsNil(o.HasRedshift) {
		var ret bool
		return ret
	}
	return *o.HasRedshift
}

// GetHasRedshiftOk returns a tuple with the HasRedshift field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectModel) GetHasRedshiftOk() (*bool, bool) {
	if o == nil || IsNil(o.HasRedshift) {
		return nil, false
	}
	return o.HasRedshift, true
}

// HasHasRedshift returns a boolean if a field has been set.
func (o *ProjectModel) HasHasRedshift() bool {
	if o != nil && !IsNil(o.HasRedshift) {
		return true
	}

	return false
}

// SetHasRedshift gets a reference to the given bool and assigns it to the HasRedshift field.
func (o *ProjectModel) SetHasRedshift(v bool) {
	o.HasRedshift = &v
}

// GetHasSnowflake returns the HasSnowflake field value if set, zero value otherwise.
func (o *ProjectModel) GetHasSnowflake() bool {
	if o == nil || IsNil(o.HasSnowflake) {
		var ret bool
		return ret
	}
	return *o.HasSnowflake
}

// GetHasSnowflakeOk returns a tuple with the HasSnowflake field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectModel) GetHasSnowflakeOk() (*bool, bool) {
	if o == nil || IsNil(o.HasSnowflake) {
		return nil, false
	}
	return o.HasSnowflake, true
}

// HasHasSnowflake returns a boolean if a field has been set.
func (o *ProjectModel) HasHasSnowflake() bool {
	if o != nil && !IsNil(o.HasSnowflake) {
		return true
	}

	return false
}

// SetHasSnowflake gets a reference to the given bool and assigns it to the HasSnowflake field.
func (o *ProjectModel) SetHasSnowflake(v bool) {
	o.HasSnowflake = &v
}

// GetHasSynapse returns the HasSynapse field value if set, zero value otherwise.
func (o *ProjectModel) GetHasSynapse() bool {
	if o == nil || IsNil(o.HasSynapse) {
		var ret bool
		return ret
	}
	return *o.HasSynapse
}

// GetHasSynapseOk returns a tuple with the HasSynapse field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectModel) GetHasSynapseOk() (*bool, bool) {
	if o == nil || IsNil(o.HasSynapse) {
		return nil, false
	}
	return o.HasSynapse, true
}

// HasHasSynapse returns a boolean if a field has been set.
func (o *ProjectModel) HasHasSynapse() bool {
	if o != nil && !IsNil(o.HasSynapse) {
		return true
	}

	return false
}

// SetHasSynapse gets a reference to the given bool and assigns it to the HasSynapse field.
func (o *ProjectModel) SetHasSynapse(v bool) {
	o.HasSynapse = &v
}

// GetHasExasol returns the HasExasol field value if set, zero value otherwise.
func (o *ProjectModel) GetHasExasol() bool {
	if o == nil || IsNil(o.HasExasol) {
		var ret bool
		return ret
	}
	return *o.HasExasol
}

// GetHasExasolOk returns a tuple with the HasExasol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectModel) GetHasExasolOk() (*bool, bool) {
	if o == nil || IsNil(o.HasExasol) {
		return nil, false
	}
	return o.HasExasol, true
}

// HasHasExasol returns a boolean if a field has been set.
func (o *ProjectModel) HasHasExasol() bool {
	if o != nil && !IsNil(o.HasExasol) {
		return true
	}

	return false
}

// SetHasExasol gets a reference to the given bool and assigns it to the HasExasol field.
func (o *ProjectModel) SetHasExasol(v bool) {
	o.HasExasol = &v
}

// GetHasTeradata returns the HasTeradata field value if set, zero value otherwise.
func (o *ProjectModel) GetHasTeradata() bool {
	if o == nil || IsNil(o.HasTeradata) {
		var ret bool
		return ret
	}
	return *o.HasTeradata
}

// GetHasTeradataOk returns a tuple with the HasTeradata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectModel) GetHasTeradataOk() (*bool, bool) {
	if o == nil || IsNil(o.HasTeradata) {
		return nil, false
	}
	return o.HasTeradata, true
}

// HasHasTeradata returns a boolean if a field has been set.
func (o *ProjectModel) HasHasTeradata() bool {
	if o != nil && !IsNil(o.HasTeradata) {
		return true
	}

	return false
}

// SetHasTeradata gets a reference to the given bool and assigns it to the HasTeradata field.
func (o *ProjectModel) SetHasTeradata(v bool) {
	o.HasTeradata = &v
}

// GetDefaultBackend returns the DefaultBackend field value if set, zero value otherwise.
func (o *ProjectModel) GetDefaultBackend() string {
	if o == nil || IsNil(o.DefaultBackend) {
		var ret string
		return ret
	}
	return *o.DefaultBackend
}

// GetDefaultBackendOk returns a tuple with the DefaultBackend field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectModel) GetDefaultBackendOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultBackend) {
		return nil, false
	}
	return o.DefaultBackend, true
}

// HasDefaultBackend returns a boolean if a field has been set.
func (o *ProjectModel) HasDefaultBackend() bool {
	if o != nil && !IsNil(o.DefaultBackend) {
		return true
	}

	return false
}

// SetDefaultBackend gets a reference to the given string and assigns it to the DefaultBackend field.
func (o *ProjectModel) SetDefaultBackend(v string) {
	o.DefaultBackend = &v
}

// GetHasTryModeOn returns the HasTryModeOn field value if set, zero value otherwise.
func (o *ProjectModel) GetHasTryModeOn() string {
	if o == nil || IsNil(o.HasTryModeOn) {
		var ret string
		return ret
	}
	return *o.HasTryModeOn
}

// GetHasTryModeOnOk returns a tuple with the HasTryModeOn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectModel) GetHasTryModeOnOk() (*string, bool) {
	if o == nil || IsNil(o.HasTryModeOn) {
		return nil, false
	}
	return o.HasTryModeOn, true
}

// HasHasTryModeOn returns a boolean if a field has been set.
func (o *ProjectModel) HasHasTryModeOn() bool {
	if o != nil && !IsNil(o.HasTryModeOn) {
		return true
	}

	return false
}

// SetHasTryModeOn gets a reference to the given string and assigns it to the HasTryModeOn field.
func (o *ProjectModel) SetHasTryModeOn(v string) {
	o.HasTryModeOn = &v
}

// GetLimits returns the Limits field value if set, zero value otherwise.
func (o *ProjectModel) GetLimits() ProjectModelLimits {
	if o == nil || IsNil(o.Limits) {
		var ret ProjectModelLimits
		return ret
	}
	return *o.Limits
}

// GetLimitsOk returns a tuple with the Limits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectModel) GetLimitsOk() (*ProjectModelLimits, bool) {
	if o == nil || IsNil(o.Limits) {
		return nil, false
	}
	return o.Limits, true
}

// HasLimits returns a boolean if a field has been set.
func (o *ProjectModel) HasLimits() bool {
	if o != nil && !IsNil(o.Limits) {
		return true
	}

	return false
}

// SetLimits gets a reference to the given ProjectModelLimits and assigns it to the Limits field.
func (o *ProjectModel) SetLimits(v ProjectModelLimits) {
	o.Limits = &v
}

// GetMetrics returns the Metrics field value if set, zero value otherwise.
func (o *ProjectModel) GetMetrics() ProjectModelMetrics {
	if o == nil || IsNil(o.Metrics) {
		var ret ProjectModelMetrics
		return ret
	}
	return *o.Metrics
}

// GetMetricsOk returns a tuple with the Metrics field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectModel) GetMetricsOk() (*ProjectModelMetrics, bool) {
	if o == nil || IsNil(o.Metrics) {
		return nil, false
	}
	return o.Metrics, true
}

// HasMetrics returns a boolean if a field has been set.
func (o *ProjectModel) HasMetrics() bool {
	if o != nil && !IsNil(o.Metrics) {
		return true
	}

	return false
}

// SetMetrics gets a reference to the given ProjectModelMetrics and assigns it to the Metrics field.
func (o *ProjectModel) SetMetrics(v ProjectModelMetrics) {
	o.Metrics = &v
}

// GetIsDisabled returns the IsDisabled field value if set, zero value otherwise.
func (o *ProjectModel) GetIsDisabled() bool {
	if o == nil || IsNil(o.IsDisabled) {
		var ret bool
		return ret
	}
	return *o.IsDisabled
}

// GetIsDisabledOk returns a tuple with the IsDisabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectModel) GetIsDisabledOk() (*bool, bool) {
	if o == nil || IsNil(o.IsDisabled) {
		return nil, false
	}
	return o.IsDisabled, true
}

// HasIsDisabled returns a boolean if a field has been set.
func (o *ProjectModel) HasIsDisabled() bool {
	if o != nil && !IsNil(o.IsDisabled) {
		return true
	}

	return false
}

// SetIsDisabled gets a reference to the given bool and assigns it to the IsDisabled field.
func (o *ProjectModel) SetIsDisabled(v bool) {
	o.IsDisabled = &v
}

// GetBilledMonthlyPrice returns the BilledMonthlyPrice field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProjectModel) GetBilledMonthlyPrice() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.BilledMonthlyPrice
}

// GetBilledMonthlyPriceOk returns a tuple with the BilledMonthlyPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProjectModel) GetBilledMonthlyPriceOk() (*interface{}, bool) {
	if o == nil || IsNil(o.BilledMonthlyPrice) {
		return nil, false
	}
	return &o.BilledMonthlyPrice, true
}

// HasBilledMonthlyPrice returns a boolean if a field has been set.
func (o *ProjectModel) HasBilledMonthlyPrice() bool {
	if o != nil && !IsNil(o.BilledMonthlyPrice) {
		return true
	}

	return false
}

// SetBilledMonthlyPrice gets a reference to the given interface{} and assigns it to the BilledMonthlyPrice field.
func (o *ProjectModel) SetBilledMonthlyPrice(v interface{}) {
	o.BilledMonthlyPrice = v
}

// GetDataRetentionTimeInDays returns the DataRetentionTimeInDays field value if set, zero value otherwise.
func (o *ProjectModel) GetDataRetentionTimeInDays() float32 {
	if o == nil || IsNil(o.DataRetentionTimeInDays) {
		var ret float32
		return ret
	}
	return *o.DataRetentionTimeInDays
}

// GetDataRetentionTimeInDaysOk returns a tuple with the DataRetentionTimeInDays field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectModel) GetDataRetentionTimeInDaysOk() (*float32, bool) {
	if o == nil || IsNil(o.DataRetentionTimeInDays) {
		return nil, false
	}
	return o.DataRetentionTimeInDays, true
}

// HasDataRetentionTimeInDays returns a boolean if a field has been set.
func (o *ProjectModel) HasDataRetentionTimeInDays() bool {
	if o != nil && !IsNil(o.DataRetentionTimeInDays) {
		return true
	}

	return false
}

// SetDataRetentionTimeInDays gets a reference to the given float32 and assigns it to the DataRetentionTimeInDays field.
func (o *ProjectModel) SetDataRetentionTimeInDays(v float32) {
	o.DataRetentionTimeInDays = &v
}

// GetOrganization returns the Organization field value if set, zero value otherwise.
func (o *ProjectModel) GetOrganization() ProjectModelOrganization {
	if o == nil || IsNil(o.Organization) {
		var ret ProjectModelOrganization
		return ret
	}
	return *o.Organization
}

// GetOrganizationOk returns a tuple with the Organization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectModel) GetOrganizationOk() (*ProjectModelOrganization, bool) {
	if o == nil || IsNil(o.Organization) {
		return nil, false
	}
	return o.Organization, true
}

// HasOrganization returns a boolean if a field has been set.
func (o *ProjectModel) HasOrganization() bool {
	if o != nil && !IsNil(o.Organization) {
		return true
	}

	return false
}

// SetOrganization gets a reference to the given ProjectModelOrganization and assigns it to the Organization field.
func (o *ProjectModel) SetOrganization(v ProjectModelOrganization) {
	o.Organization = &v
}

// GetFileStorage returns the FileStorage field value if set, zero value otherwise.
func (o *ProjectModel) GetFileStorage() ProjectModelFileStorage {
	if o == nil || IsNil(o.FileStorage) {
		var ret ProjectModelFileStorage
		return ret
	}
	return *o.FileStorage
}

// GetFileStorageOk returns a tuple with the FileStorage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectModel) GetFileStorageOk() (*ProjectModelFileStorage, bool) {
	if o == nil || IsNil(o.FileStorage) {
		return nil, false
	}
	return o.FileStorage, true
}

// HasFileStorage returns a boolean if a field has been set.
func (o *ProjectModel) HasFileStorage() bool {
	if o != nil && !IsNil(o.FileStorage) {
		return true
	}

	return false
}

// SetFileStorage gets a reference to the given ProjectModelFileStorage and assigns it to the FileStorage field.
func (o *ProjectModel) SetFileStorage(v ProjectModelFileStorage) {
	o.FileStorage = &v
}

// GetBackends returns the Backends field value if set, zero value otherwise.
func (o *ProjectModel) GetBackends() ProjectModelBackends {
	if o == nil || IsNil(o.Backends) {
		var ret ProjectModelBackends
		return ret
	}
	return *o.Backends
}

// GetBackendsOk returns a tuple with the Backends field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectModel) GetBackendsOk() (*ProjectModelBackends, bool) {
	if o == nil || IsNil(o.Backends) {
		return nil, false
	}
	return o.Backends, true
}

// HasBackends returns a boolean if a field has been set.
func (o *ProjectModel) HasBackends() bool {
	if o != nil && !IsNil(o.Backends) {
		return true
	}

	return false
}

// SetBackends gets a reference to the given ProjectModelBackends and assigns it to the Backends field.
func (o *ProjectModel) SetBackends(v ProjectModelBackends) {
	o.Backends = &v
}

// GetPayAsYouGo returns the PayAsYouGo field value if set, zero value otherwise.
func (o *ProjectModel) GetPayAsYouGo() ProjectModelPayAsYouGo {
	if o == nil || IsNil(o.PayAsYouGo) {
		var ret ProjectModelPayAsYouGo
		return ret
	}
	return *o.PayAsYouGo
}

// GetPayAsYouGoOk returns a tuple with the PayAsYouGo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectModel) GetPayAsYouGoOk() (*ProjectModelPayAsYouGo, bool) {
	if o == nil || IsNil(o.PayAsYouGo) {
		return nil, false
	}
	return o.PayAsYouGo, true
}

// HasPayAsYouGo returns a boolean if a field has been set.
func (o *ProjectModel) HasPayAsYouGo() bool {
	if o != nil && !IsNil(o.PayAsYouGo) {
		return true
	}

	return false
}

// SetPayAsYouGo gets a reference to the given ProjectModelPayAsYouGo and assigns it to the PayAsYouGo field.
func (o *ProjectModel) SetPayAsYouGo(v ProjectModelPayAsYouGo) {
	o.PayAsYouGo = &v
}

func (o ProjectModel) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProjectModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Region) {
		toSerialize["region"] = o.Region
	}
	if !IsNil(o.Created) {
		toSerialize["created"] = o.Created
	}
	if o.Expires != nil {
		toSerialize["expires"] = o.Expires
	}
	if !IsNil(o.Features) {
		toSerialize["features"] = o.Features
	}
	if !IsNil(o.DataSizeBytes) {
		toSerialize["dataSizeBytes"] = o.DataSizeBytes
	}
	if !IsNil(o.RowsCount) {
		toSerialize["rowsCount"] = o.RowsCount
	}
	if !IsNil(o.HasMysql) {
		toSerialize["hasMysql"] = o.HasMysql
	}
	if !IsNil(o.HasRedshift) {
		toSerialize["hasRedshift"] = o.HasRedshift
	}
	if !IsNil(o.HasSnowflake) {
		toSerialize["hasSnowflake"] = o.HasSnowflake
	}
	if !IsNil(o.HasSynapse) {
		toSerialize["hasSynapse"] = o.HasSynapse
	}
	if !IsNil(o.HasExasol) {
		toSerialize["hasExasol"] = o.HasExasol
	}
	if !IsNil(o.HasTeradata) {
		toSerialize["hasTeradata"] = o.HasTeradata
	}
	if !IsNil(o.DefaultBackend) {
		toSerialize["defaultBackend"] = o.DefaultBackend
	}
	if !IsNil(o.HasTryModeOn) {
		toSerialize["hasTryModeOn"] = o.HasTryModeOn
	}
	if !IsNil(o.Limits) {
		toSerialize["limits"] = o.Limits
	}
	if !IsNil(o.Metrics) {
		toSerialize["metrics"] = o.Metrics
	}
	if !IsNil(o.IsDisabled) {
		toSerialize["isDisabled"] = o.IsDisabled
	}
	if o.BilledMonthlyPrice != nil {
		toSerialize["billedMonthlyPrice"] = o.BilledMonthlyPrice
	}
	if !IsNil(o.DataRetentionTimeInDays) {
		toSerialize["dataRetentionTimeInDays"] = o.DataRetentionTimeInDays
	}
	if !IsNil(o.Organization) {
		toSerialize["organization"] = o.Organization
	}
	if !IsNil(o.FileStorage) {
		toSerialize["fileStorage"] = o.FileStorage
	}
	if !IsNil(o.Backends) {
		toSerialize["backends"] = o.Backends
	}
	if !IsNil(o.PayAsYouGo) {
		toSerialize["payAsYouGo"] = o.PayAsYouGo
	}
	return toSerialize, nil
}

type NullableProjectModel struct {
	value *ProjectModel
	isSet bool
}

func (v NullableProjectModel) Get() *ProjectModel {
	return v.value
}

func (v *NullableProjectModel) Set(val *ProjectModel) {
	v.value = val
	v.isSet = true
}

func (v NullableProjectModel) IsSet() bool {
	return v.isSet
}

func (v *NullableProjectModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProjectModel(val *ProjectModel) *NullableProjectModel {
	return &NullableProjectModel{value: val, isSet: true}
}

func (v NullableProjectModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProjectModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


