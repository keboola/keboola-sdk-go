/*
Manage API

The Keboola Connection Management API covers all tasks required for managing projects, as well as some super admin features for controlling and monitoring Keboola Connection.  ## Projects Management  * Create, modify and delete maintainers, organizations and projects  * Move projects between organizations  * Define project limits  * Provision Redshift and other Storage backends  * Access project management activity log  ## Projects Monitoring  * Monitoring of projects over organizations and maintainers  ## Super User Control and Monitoring  * UI release and deployment  * Components management  * Storage and Syrup jobs monitoring (will be provided by Syrup utilizing new tokens for authorization)  * Final project delete  * Workers start/shutdown, etc.  ## Authentication  The API supports authentication by a personal access token, which can be retrieved in [Account Settings](https://connection.keboola.com/admin/account/change-password) in Keboola Connection. An access token is tied to an administrator and its permissions are derived from their permissions. When the administrator is disabled or deleted, all their tokens become invalid too.  ## Token Types  There are the following types of tokens:  | Name | Tied to User | Token string is available only on create | Description  | | ------------- | ------------- | ------------------- | ----- | | user | Yes | Yes |Full access to maintainers, organizations and projects. Access is limited only to resources which are available for the token user.| | super | No | Yes | KBC management. Limited scopes can be specified `super_ui_deploy`, `super_monitoring`, ...  |

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CreateNewGoogleCloudStorageRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateNewGoogleCloudStorageRequest{}

// CreateNewGoogleCloudStorageRequest struct for CreateNewGoogleCloudStorageRequest
type CreateNewGoogleCloudStorageRequest struct {
	GcsCredentials *CreateNewGoogleCloudStorageRequestGcsCredentials `json:"gcsCredentials,omitempty"`
	// name of the bucket
	FilesBucket string `json:"filesBucket"`
	Owner string `json:"owner"`
	Region string `json:"region"`
}

type _CreateNewGoogleCloudStorageRequest CreateNewGoogleCloudStorageRequest

// NewCreateNewGoogleCloudStorageRequest instantiates a new CreateNewGoogleCloudStorageRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateNewGoogleCloudStorageRequest(filesBucket string, owner string, region string) *CreateNewGoogleCloudStorageRequest {
	this := CreateNewGoogleCloudStorageRequest{}
	this.FilesBucket = filesBucket
	this.Owner = owner
	this.Region = region
	return &this
}

// NewCreateNewGoogleCloudStorageRequestWithDefaults instantiates a new CreateNewGoogleCloudStorageRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateNewGoogleCloudStorageRequestWithDefaults() *CreateNewGoogleCloudStorageRequest {
	this := CreateNewGoogleCloudStorageRequest{}
	return &this
}

// GetGcsCredentials returns the GcsCredentials field value if set, zero value otherwise.
func (o *CreateNewGoogleCloudStorageRequest) GetGcsCredentials() CreateNewGoogleCloudStorageRequestGcsCredentials {
	if o == nil || IsNil(o.GcsCredentials) {
		var ret CreateNewGoogleCloudStorageRequestGcsCredentials
		return ret
	}
	return *o.GcsCredentials
}

// GetGcsCredentialsOk returns a tuple with the GcsCredentials field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateNewGoogleCloudStorageRequest) GetGcsCredentialsOk() (*CreateNewGoogleCloudStorageRequestGcsCredentials, bool) {
	if o == nil || IsNil(o.GcsCredentials) {
		return nil, false
	}
	return o.GcsCredentials, true
}

// HasGcsCredentials returns a boolean if a field has been set.
func (o *CreateNewGoogleCloudStorageRequest) HasGcsCredentials() bool {
	if o != nil && !IsNil(o.GcsCredentials) {
		return true
	}

	return false
}

// SetGcsCredentials gets a reference to the given CreateNewGoogleCloudStorageRequestGcsCredentials and assigns it to the GcsCredentials field.
func (o *CreateNewGoogleCloudStorageRequest) SetGcsCredentials(v CreateNewGoogleCloudStorageRequestGcsCredentials) {
	o.GcsCredentials = &v
}

// GetFilesBucket returns the FilesBucket field value
func (o *CreateNewGoogleCloudStorageRequest) GetFilesBucket() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FilesBucket
}

// GetFilesBucketOk returns a tuple with the FilesBucket field value
// and a boolean to check if the value has been set.
func (o *CreateNewGoogleCloudStorageRequest) GetFilesBucketOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FilesBucket, true
}

// SetFilesBucket sets field value
func (o *CreateNewGoogleCloudStorageRequest) SetFilesBucket(v string) {
	o.FilesBucket = v
}

// GetOwner returns the Owner field value
func (o *CreateNewGoogleCloudStorageRequest) GetOwner() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value
// and a boolean to check if the value has been set.
func (o *CreateNewGoogleCloudStorageRequest) GetOwnerOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Owner, true
}

// SetOwner sets field value
func (o *CreateNewGoogleCloudStorageRequest) SetOwner(v string) {
	o.Owner = v
}

// GetRegion returns the Region field value
func (o *CreateNewGoogleCloudStorageRequest) GetRegion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Region
}

// GetRegionOk returns a tuple with the Region field value
// and a boolean to check if the value has been set.
func (o *CreateNewGoogleCloudStorageRequest) GetRegionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Region, true
}

// SetRegion sets field value
func (o *CreateNewGoogleCloudStorageRequest) SetRegion(v string) {
	o.Region = v
}

func (o CreateNewGoogleCloudStorageRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateNewGoogleCloudStorageRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.GcsCredentials) {
		toSerialize["gcsCredentials"] = o.GcsCredentials
	}
	toSerialize["filesBucket"] = o.FilesBucket
	toSerialize["owner"] = o.Owner
	toSerialize["region"] = o.Region
	return toSerialize, nil
}

func (o *CreateNewGoogleCloudStorageRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"filesBucket",
		"owner",
		"region",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateNewGoogleCloudStorageRequest := _CreateNewGoogleCloudStorageRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateNewGoogleCloudStorageRequest)

	if err != nil {
		return err
	}

	*o = CreateNewGoogleCloudStorageRequest(varCreateNewGoogleCloudStorageRequest)

	return err
}

type NullableCreateNewGoogleCloudStorageRequest struct {
	value *CreateNewGoogleCloudStorageRequest
	isSet bool
}

func (v NullableCreateNewGoogleCloudStorageRequest) Get() *CreateNewGoogleCloudStorageRequest {
	return v.value
}

func (v *NullableCreateNewGoogleCloudStorageRequest) Set(val *CreateNewGoogleCloudStorageRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateNewGoogleCloudStorageRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateNewGoogleCloudStorageRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateNewGoogleCloudStorageRequest(val *CreateNewGoogleCloudStorageRequest) *NullableCreateNewGoogleCloudStorageRequest {
	return &NullableCreateNewGoogleCloudStorageRequest{value: val, isSet: true}
}

func (v NullableCreateNewGoogleCloudStorageRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateNewGoogleCloudStorageRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


