/*
Manage API

The Keboola Connection Management API covers all tasks required for managing projects, as well as some super admin features for controlling and monitoring Keboola Connection.  ## Projects Management  * Create, modify and delete maintainers, organizations and projects  * Move projects between organizations  * Define project limits  * Provision Redshift and other Storage backends  * Access project management activity log  ## Projects Monitoring  * Monitoring of projects over organizations and maintainers  ## Super User Control and Monitoring  * UI release and deployment  * Components management  * Storage and Syrup jobs monitoring (will be provided by Syrup utilizing new tokens for authorization)  * Final project delete  * Workers start/shutdown, etc.  ## Authentication  The API supports authentication by a personal access token, which can be retrieved in [Account Settings](https://connection.keboola.com/admin/account/change-password) in Keboola Connection. An access token is tied to an administrator and its permissions are derived from their permissions. When the administrator is disabled or deleted, all their tokens become invalid too.  ## Token Types  There are the following types of tokens:  | Name | Tied to User | Token string is available only on create | Description  | | ------------- | ------------- | ------------------- | ----- | | user | Yes | Yes |Full access to maintainers, organizations and projects. Access is limited only to resources which are available for the token user.| | super | No | Yes | KBC management. Limited scopes can be specified `super_ui_deploy`, `super_monitoring`, ...  |

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"encoding/json"
)

// checks if the GCSRotate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GCSRotate{}

// GCSRotate struct for GCSRotate
type GCSRotate struct {
	Credentials *GCPCredentials `json:"credentials,omitempty"`
}

// NewGCSRotate instantiates a new GCSRotate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGCSRotate() *GCSRotate {
	this := GCSRotate{}
	return &this
}

// NewGCSRotateWithDefaults instantiates a new GCSRotate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGCSRotateWithDefaults() *GCSRotate {
	this := GCSRotate{}
	return &this
}

// GetCredentials returns the Credentials field value if set, zero value otherwise.
func (o *GCSRotate) GetCredentials() GCPCredentials {
	if o == nil || IsNil(o.Credentials) {
		var ret GCPCredentials
		return ret
	}
	return *o.Credentials
}

// GetCredentialsOk returns a tuple with the Credentials field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GCSRotate) GetCredentialsOk() (*GCPCredentials, bool) {
	if o == nil || IsNil(o.Credentials) {
		return nil, false
	}
	return o.Credentials, true
}

// HasCredentials returns a boolean if a field has been set.
func (o *GCSRotate) HasCredentials() bool {
	if o != nil && !IsNil(o.Credentials) {
		return true
	}

	return false
}

// SetCredentials gets a reference to the given GCPCredentials and assigns it to the Credentials field.
func (o *GCSRotate) SetCredentials(v GCPCredentials) {
	o.Credentials = &v
}

func (o GCSRotate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GCSRotate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Credentials) {
		toSerialize["credentials"] = o.Credentials
	}
	return toSerialize, nil
}

type NullableGCSRotate struct {
	value *GCSRotate
	isSet bool
}

func (v NullableGCSRotate) Get() *GCSRotate {
	return v.value
}

func (v *NullableGCSRotate) Set(val *GCSRotate) {
	v.value = val
	v.isSet = true
}

func (v NullableGCSRotate) IsSet() bool {
	return v.isSet
}

func (v *NullableGCSRotate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGCSRotate(val *GCSRotate) *NullableGCSRotate {
	return &NullableGCSRotate{value: val, isSet: true}
}

func (v NullableGCSRotate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGCSRotate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


