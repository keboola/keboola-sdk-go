/*
Manage API

The Keboola Connection Management API covers all tasks required for managing projects, as well as some super admin features for controlling and monitoring Keboola Connection.  ## Projects Management  * Create, modify and delete maintainers, organizations and projects  * Move projects between organizations  * Define project limits  * Provision Redshift and other Storage backends  * Access project management activity log  ## Projects Monitoring  * Monitoring of projects over organizations and maintainers  ## Super User Control and Monitoring  * UI release and deployment  * Components management  * Storage and Syrup jobs monitoring (will be provided by Syrup utilizing new tokens for authorization)  * Final project delete  * Workers start/shutdown, etc.  ## Authentication  The API supports authentication by a personal access token, which can be retrieved in [Account Settings](https://connection.keboola.com/admin/account/change-password) in Keboola Connection. An access token is tied to an administrator and its permissions are derived from their permissions. When the administrator is disabled or deleted, all their tokens become invalid too.  ## Token Types  There are the following types of tokens:  | Name | Tied to User | Token string is available only on create | Description  | | ------------- | ------------- | ------------------- | ----- | | user | Yes | Yes |Full access to maintainers, organizations and projects. Access is limited only to resources which are available for the token user.| | super | No | Yes | KBC management. Limited scopes can be specified `super_ui_deploy`, `super_monitoring`, ...  |

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"encoding/json"
)

// checks if the GCSCreated type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GCSCreated{}

// GCSCreated struct for GCSCreated
type GCSCreated struct {
	Id *float32 `json:"id,omitempty"`
	IsDefault *bool `json:"isDefault,omitempty"`
	Provider *string `json:"provider,omitempty"`
	Region *string `json:"region,omitempty"`
	// (ISO8601 format) `Y-m-d\\TH:i:sO`
	Created *string `json:"created,omitempty"`
	Creator *AdminIdAndName `json:"creator,omitempty"`
	GcsCredentials *GCPCredentialsNoPK `json:"gcsCredentials,omitempty"`
	GcsSnowflakeIntegrationName *string `json:"gcsSnowflakeIntegrationName,omitempty"`
	// name of the bucket
	FilesBucket *string `json:"filesBucket,omitempty"`
}

// NewGCSCreated instantiates a new GCSCreated object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGCSCreated() *GCSCreated {
	this := GCSCreated{}
	return &this
}

// NewGCSCreatedWithDefaults instantiates a new GCSCreated object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGCSCreatedWithDefaults() *GCSCreated {
	this := GCSCreated{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *GCSCreated) GetId() float32 {
	if o == nil || IsNil(o.Id) {
		var ret float32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GCSCreated) GetIdOk() (*float32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *GCSCreated) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given float32 and assigns it to the Id field.
func (o *GCSCreated) SetId(v float32) {
	o.Id = &v
}

// GetIsDefault returns the IsDefault field value if set, zero value otherwise.
func (o *GCSCreated) GetIsDefault() bool {
	if o == nil || IsNil(o.IsDefault) {
		var ret bool
		return ret
	}
	return *o.IsDefault
}

// GetIsDefaultOk returns a tuple with the IsDefault field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GCSCreated) GetIsDefaultOk() (*bool, bool) {
	if o == nil || IsNil(o.IsDefault) {
		return nil, false
	}
	return o.IsDefault, true
}

// HasIsDefault returns a boolean if a field has been set.
func (o *GCSCreated) HasIsDefault() bool {
	if o != nil && !IsNil(o.IsDefault) {
		return true
	}

	return false
}

// SetIsDefault gets a reference to the given bool and assigns it to the IsDefault field.
func (o *GCSCreated) SetIsDefault(v bool) {
	o.IsDefault = &v
}

// GetProvider returns the Provider field value if set, zero value otherwise.
func (o *GCSCreated) GetProvider() string {
	if o == nil || IsNil(o.Provider) {
		var ret string
		return ret
	}
	return *o.Provider
}

// GetProviderOk returns a tuple with the Provider field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GCSCreated) GetProviderOk() (*string, bool) {
	if o == nil || IsNil(o.Provider) {
		return nil, false
	}
	return o.Provider, true
}

// HasProvider returns a boolean if a field has been set.
func (o *GCSCreated) HasProvider() bool {
	if o != nil && !IsNil(o.Provider) {
		return true
	}

	return false
}

// SetProvider gets a reference to the given string and assigns it to the Provider field.
func (o *GCSCreated) SetProvider(v string) {
	o.Provider = &v
}

// GetRegion returns the Region field value if set, zero value otherwise.
func (o *GCSCreated) GetRegion() string {
	if o == nil || IsNil(o.Region) {
		var ret string
		return ret
	}
	return *o.Region
}

// GetRegionOk returns a tuple with the Region field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GCSCreated) GetRegionOk() (*string, bool) {
	if o == nil || IsNil(o.Region) {
		return nil, false
	}
	return o.Region, true
}

// HasRegion returns a boolean if a field has been set.
func (o *GCSCreated) HasRegion() bool {
	if o != nil && !IsNil(o.Region) {
		return true
	}

	return false
}

// SetRegion gets a reference to the given string and assigns it to the Region field.
func (o *GCSCreated) SetRegion(v string) {
	o.Region = &v
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *GCSCreated) GetCreated() string {
	if o == nil || IsNil(o.Created) {
		var ret string
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GCSCreated) GetCreatedOk() (*string, bool) {
	if o == nil || IsNil(o.Created) {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *GCSCreated) HasCreated() bool {
	if o != nil && !IsNil(o.Created) {
		return true
	}

	return false
}

// SetCreated gets a reference to the given string and assigns it to the Created field.
func (o *GCSCreated) SetCreated(v string) {
	o.Created = &v
}

// GetCreator returns the Creator field value if set, zero value otherwise.
func (o *GCSCreated) GetCreator() AdminIdAndName {
	if o == nil || IsNil(o.Creator) {
		var ret AdminIdAndName
		return ret
	}
	return *o.Creator
}

// GetCreatorOk returns a tuple with the Creator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GCSCreated) GetCreatorOk() (*AdminIdAndName, bool) {
	if o == nil || IsNil(o.Creator) {
		return nil, false
	}
	return o.Creator, true
}

// HasCreator returns a boolean if a field has been set.
func (o *GCSCreated) HasCreator() bool {
	if o != nil && !IsNil(o.Creator) {
		return true
	}

	return false
}

// SetCreator gets a reference to the given AdminIdAndName and assigns it to the Creator field.
func (o *GCSCreated) SetCreator(v AdminIdAndName) {
	o.Creator = &v
}

// GetGcsCredentials returns the GcsCredentials field value if set, zero value otherwise.
func (o *GCSCreated) GetGcsCredentials() GCPCredentialsNoPK {
	if o == nil || IsNil(o.GcsCredentials) {
		var ret GCPCredentialsNoPK
		return ret
	}
	return *o.GcsCredentials
}

// GetGcsCredentialsOk returns a tuple with the GcsCredentials field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GCSCreated) GetGcsCredentialsOk() (*GCPCredentialsNoPK, bool) {
	if o == nil || IsNil(o.GcsCredentials) {
		return nil, false
	}
	return o.GcsCredentials, true
}

// HasGcsCredentials returns a boolean if a field has been set.
func (o *GCSCreated) HasGcsCredentials() bool {
	if o != nil && !IsNil(o.GcsCredentials) {
		return true
	}

	return false
}

// SetGcsCredentials gets a reference to the given GCPCredentialsNoPK and assigns it to the GcsCredentials field.
func (o *GCSCreated) SetGcsCredentials(v GCPCredentialsNoPK) {
	o.GcsCredentials = &v
}

// GetGcsSnowflakeIntegrationName returns the GcsSnowflakeIntegrationName field value if set, zero value otherwise.
func (o *GCSCreated) GetGcsSnowflakeIntegrationName() string {
	if o == nil || IsNil(o.GcsSnowflakeIntegrationName) {
		var ret string
		return ret
	}
	return *o.GcsSnowflakeIntegrationName
}

// GetGcsSnowflakeIntegrationNameOk returns a tuple with the GcsSnowflakeIntegrationName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GCSCreated) GetGcsSnowflakeIntegrationNameOk() (*string, bool) {
	if o == nil || IsNil(o.GcsSnowflakeIntegrationName) {
		return nil, false
	}
	return o.GcsSnowflakeIntegrationName, true
}

// HasGcsSnowflakeIntegrationName returns a boolean if a field has been set.
func (o *GCSCreated) HasGcsSnowflakeIntegrationName() bool {
	if o != nil && !IsNil(o.GcsSnowflakeIntegrationName) {
		return true
	}

	return false
}

// SetGcsSnowflakeIntegrationName gets a reference to the given string and assigns it to the GcsSnowflakeIntegrationName field.
func (o *GCSCreated) SetGcsSnowflakeIntegrationName(v string) {
	o.GcsSnowflakeIntegrationName = &v
}

// GetFilesBucket returns the FilesBucket field value if set, zero value otherwise.
func (o *GCSCreated) GetFilesBucket() string {
	if o == nil || IsNil(o.FilesBucket) {
		var ret string
		return ret
	}
	return *o.FilesBucket
}

// GetFilesBucketOk returns a tuple with the FilesBucket field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GCSCreated) GetFilesBucketOk() (*string, bool) {
	if o == nil || IsNil(o.FilesBucket) {
		return nil, false
	}
	return o.FilesBucket, true
}

// HasFilesBucket returns a boolean if a field has been set.
func (o *GCSCreated) HasFilesBucket() bool {
	if o != nil && !IsNil(o.FilesBucket) {
		return true
	}

	return false
}

// SetFilesBucket gets a reference to the given string and assigns it to the FilesBucket field.
func (o *GCSCreated) SetFilesBucket(v string) {
	o.FilesBucket = &v
}

func (o GCSCreated) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GCSCreated) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.IsDefault) {
		toSerialize["isDefault"] = o.IsDefault
	}
	if !IsNil(o.Provider) {
		toSerialize["provider"] = o.Provider
	}
	if !IsNil(o.Region) {
		toSerialize["region"] = o.Region
	}
	if !IsNil(o.Created) {
		toSerialize["created"] = o.Created
	}
	if !IsNil(o.Creator) {
		toSerialize["creator"] = o.Creator
	}
	if !IsNil(o.GcsCredentials) {
		toSerialize["gcsCredentials"] = o.GcsCredentials
	}
	if !IsNil(o.GcsSnowflakeIntegrationName) {
		toSerialize["gcsSnowflakeIntegrationName"] = o.GcsSnowflakeIntegrationName
	}
	if !IsNil(o.FilesBucket) {
		toSerialize["filesBucket"] = o.FilesBucket
	}
	return toSerialize, nil
}

type NullableGCSCreated struct {
	value *GCSCreated
	isSet bool
}

func (v NullableGCSCreated) Get() *GCSCreated {
	return v.value
}

func (v *NullableGCSCreated) Set(val *GCSCreated) {
	v.value = val
	v.isSet = true
}

func (v NullableGCSCreated) IsSet() bool {
	return v.isSet
}

func (v *NullableGCSCreated) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGCSCreated(val *GCSCreated) *NullableGCSCreated {
	return &NullableGCSCreated{value: val, isSet: true}
}

func (v NullableGCSCreated) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGCSCreated) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


