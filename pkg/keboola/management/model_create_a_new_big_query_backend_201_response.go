/*
Manage API

The Keboola Connection Management API covers all tasks required for managing projects, as well as some super admin features for controlling and monitoring Keboola Connection.  ## Projects Management  * Create, modify and delete maintainers, organizations and projects  * Move projects between organizations  * Define project limits  * Provision Redshift and other Storage backends  * Access project management activity log  ## Projects Monitoring  * Monitoring of projects over organizations and maintainers  ## Super User Control and Monitoring  * UI release and deployment  * Components management  * Storage and Syrup jobs monitoring (will be provided by Syrup utilizing new tokens for authorization)  * Final project delete  * Workers start/shutdown, etc.  ## Authentication  The API supports authentication by a personal access token, which can be retrieved in [Account Settings](https://connection.keboola.com/admin/account/change-password) in Keboola Connection. An access token is tied to an administrator and its permissions are derived from their permissions. When the administrator is disabled or deleted, all their tokens become invalid too.  ## Token Types  There are the following types of tokens:  | Name | Tied to User | Token string is available only on create | Description  | | ------------- | ------------- | ------------------- | ----- | | user | Yes | Yes |Full access to maintainers, organizations and projects. Access is limited only to resources which are available for the token user.| | super | No | Yes | KBC management. Limited scopes can be specified `super_ui_deploy`, `super_monitoring`, ...  |

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CreateANewBigQueryBackend201Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateANewBigQueryBackend201Response{}

// CreateANewBigQueryBackend201Response struct for CreateANewBigQueryBackend201Response
type CreateANewBigQueryBackend201Response struct {
	Id *float32 `json:"id,omitempty"`
	Region string `json:"region"`
	Backend *string `json:"backend,omitempty"`
	Credentials *CreateNewGoogleCloudStorage201ResponseGcsCredentials `json:"credentials,omitempty"`
	FolderId *float32 `json:"folderId,omitempty"`
}

type _CreateANewBigQueryBackend201Response CreateANewBigQueryBackend201Response

// NewCreateANewBigQueryBackend201Response instantiates a new CreateANewBigQueryBackend201Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateANewBigQueryBackend201Response(region string) *CreateANewBigQueryBackend201Response {
	this := CreateANewBigQueryBackend201Response{}
	this.Region = region
	return &this
}

// NewCreateANewBigQueryBackend201ResponseWithDefaults instantiates a new CreateANewBigQueryBackend201Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateANewBigQueryBackend201ResponseWithDefaults() *CreateANewBigQueryBackend201Response {
	this := CreateANewBigQueryBackend201Response{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CreateANewBigQueryBackend201Response) GetId() float32 {
	if o == nil || IsNil(o.Id) {
		var ret float32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateANewBigQueryBackend201Response) GetIdOk() (*float32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CreateANewBigQueryBackend201Response) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given float32 and assigns it to the Id field.
func (o *CreateANewBigQueryBackend201Response) SetId(v float32) {
	o.Id = &v
}

// GetRegion returns the Region field value
func (o *CreateANewBigQueryBackend201Response) GetRegion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Region
}

// GetRegionOk returns a tuple with the Region field value
// and a boolean to check if the value has been set.
func (o *CreateANewBigQueryBackend201Response) GetRegionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Region, true
}

// SetRegion sets field value
func (o *CreateANewBigQueryBackend201Response) SetRegion(v string) {
	o.Region = v
}

// GetBackend returns the Backend field value if set, zero value otherwise.
func (o *CreateANewBigQueryBackend201Response) GetBackend() string {
	if o == nil || IsNil(o.Backend) {
		var ret string
		return ret
	}
	return *o.Backend
}

// GetBackendOk returns a tuple with the Backend field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateANewBigQueryBackend201Response) GetBackendOk() (*string, bool) {
	if o == nil || IsNil(o.Backend) {
		return nil, false
	}
	return o.Backend, true
}

// HasBackend returns a boolean if a field has been set.
func (o *CreateANewBigQueryBackend201Response) HasBackend() bool {
	if o != nil && !IsNil(o.Backend) {
		return true
	}

	return false
}

// SetBackend gets a reference to the given string and assigns it to the Backend field.
func (o *CreateANewBigQueryBackend201Response) SetBackend(v string) {
	o.Backend = &v
}

// GetCredentials returns the Credentials field value if set, zero value otherwise.
func (o *CreateANewBigQueryBackend201Response) GetCredentials() CreateNewGoogleCloudStorage201ResponseGcsCredentials {
	if o == nil || IsNil(o.Credentials) {
		var ret CreateNewGoogleCloudStorage201ResponseGcsCredentials
		return ret
	}
	return *o.Credentials
}

// GetCredentialsOk returns a tuple with the Credentials field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateANewBigQueryBackend201Response) GetCredentialsOk() (*CreateNewGoogleCloudStorage201ResponseGcsCredentials, bool) {
	if o == nil || IsNil(o.Credentials) {
		return nil, false
	}
	return o.Credentials, true
}

// HasCredentials returns a boolean if a field has been set.
func (o *CreateANewBigQueryBackend201Response) HasCredentials() bool {
	if o != nil && !IsNil(o.Credentials) {
		return true
	}

	return false
}

// SetCredentials gets a reference to the given CreateNewGoogleCloudStorage201ResponseGcsCredentials and assigns it to the Credentials field.
func (o *CreateANewBigQueryBackend201Response) SetCredentials(v CreateNewGoogleCloudStorage201ResponseGcsCredentials) {
	o.Credentials = &v
}

// GetFolderId returns the FolderId field value if set, zero value otherwise.
func (o *CreateANewBigQueryBackend201Response) GetFolderId() float32 {
	if o == nil || IsNil(o.FolderId) {
		var ret float32
		return ret
	}
	return *o.FolderId
}

// GetFolderIdOk returns a tuple with the FolderId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateANewBigQueryBackend201Response) GetFolderIdOk() (*float32, bool) {
	if o == nil || IsNil(o.FolderId) {
		return nil, false
	}
	return o.FolderId, true
}

// HasFolderId returns a boolean if a field has been set.
func (o *CreateANewBigQueryBackend201Response) HasFolderId() bool {
	if o != nil && !IsNil(o.FolderId) {
		return true
	}

	return false
}

// SetFolderId gets a reference to the given float32 and assigns it to the FolderId field.
func (o *CreateANewBigQueryBackend201Response) SetFolderId(v float32) {
	o.FolderId = &v
}

func (o CreateANewBigQueryBackend201Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateANewBigQueryBackend201Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["region"] = o.Region
	if !IsNil(o.Backend) {
		toSerialize["backend"] = o.Backend
	}
	if !IsNil(o.Credentials) {
		toSerialize["credentials"] = o.Credentials
	}
	if !IsNil(o.FolderId) {
		toSerialize["folderId"] = o.FolderId
	}
	return toSerialize, nil
}

func (o *CreateANewBigQueryBackend201Response) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"region",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateANewBigQueryBackend201Response := _CreateANewBigQueryBackend201Response{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateANewBigQueryBackend201Response)

	if err != nil {
		return err
	}

	*o = CreateANewBigQueryBackend201Response(varCreateANewBigQueryBackend201Response)

	return err
}

type NullableCreateANewBigQueryBackend201Response struct {
	value *CreateANewBigQueryBackend201Response
	isSet bool
}

func (v NullableCreateANewBigQueryBackend201Response) Get() *CreateANewBigQueryBackend201Response {
	return v.value
}

func (v *NullableCreateANewBigQueryBackend201Response) Set(val *CreateANewBigQueryBackend201Response) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateANewBigQueryBackend201Response) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateANewBigQueryBackend201Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateANewBigQueryBackend201Response(val *CreateANewBigQueryBackend201Response) *NullableCreateANewBigQueryBackend201Response {
	return &NullableCreateANewBigQueryBackend201Response{value: val, isSet: true}
}

func (v NullableCreateANewBigQueryBackend201Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateANewBigQueryBackend201Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


