/*
Manage API

The Keboola Connection Management API covers all tasks required for managing projects, as well as some super admin features for controlling and monitoring Keboola Connection.  ## Projects Management  * Create, modify and delete maintainers, organizations and projects  * Move projects between organizations  * Define project limits  * Provision Redshift and other Storage backends  * Access project management activity log  ## Projects Monitoring  * Monitoring of projects over organizations and maintainers  ## Super User Control and Monitoring  * UI release and deployment  * Components management  * Storage and Syrup jobs monitoring (will be provided by Syrup utilizing new tokens for authorization)  * Final project delete  * Workers start/shutdown, etc.  ## Authentication  The API supports authentication by a personal access token, which can be retrieved in [Account Settings](https://connection.keboola.com/admin/account/change-password) in Keboola Connection. An access token is tied to an administrator and its permissions are derived from their permissions. When the administrator is disabled or deleted, all their tokens become invalid too.  ## Token Types  There are the following types of tokens:  | Name | Tied to User | Token string is available only on create | Description  | | ------------- | ------------- | ------------------- | ----- | | user | Yes | Yes |Full access to maintainers, organizations and projects. Access is limited only to resources which are available for the token user.| | super | No | Yes | KBC management. Limited scopes can be specified `super_ui_deploy`, `super_monitoring`, ...  |

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"encoding/json"
)

// checks if the CreateStorageToken201Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateStorageToken201Response{}

// CreateStorageToken201Response struct for CreateStorageToken201Response
type CreateStorageToken201Response struct {
	Id *string `json:"id,omitempty"`
	Token *string `json:"token,omitempty"`
	Created *string `json:"created,omitempty"`
	Description *string `json:"description,omitempty"`
	Uri *string `json:"uri,omitempty"`
	IsMasterToken *bool `json:"isMasterToken,omitempty"`
	CanManageBuckets *bool `json:"canManageBuckets,omitempty"`
	CanManageTokens *bool `json:"canManageTokens,omitempty"`
	CanReadAllFileUploads *bool `json:"canReadAllFileUploads,omitempty"`
	CanPurgeTrash *bool `json:"canPurgeTrash,omitempty"`
	Expires interface{} `json:"expires,omitempty"`
	IsExpired *bool `json:"isExpired,omitempty"`
	IsDisabled *bool `json:"isDisabled,omitempty"`
	DailyCapacity *float32 `json:"dailyCapacity,omitempty"`
	BucketPermissions map[string]interface{} `json:"bucketPermissions,omitempty"`
}

// NewCreateStorageToken201Response instantiates a new CreateStorageToken201Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateStorageToken201Response() *CreateStorageToken201Response {
	this := CreateStorageToken201Response{}
	return &this
}

// NewCreateStorageToken201ResponseWithDefaults instantiates a new CreateStorageToken201Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateStorageToken201ResponseWithDefaults() *CreateStorageToken201Response {
	this := CreateStorageToken201Response{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CreateStorageToken201Response) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateStorageToken201Response) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CreateStorageToken201Response) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given float32 and assigns it to the Id field.
func (o *CreateStorageToken201Response) SetId(v string) {
	o.Id = &v
}

// GetToken returns the Token field value if set, zero value otherwise.
func (o *CreateStorageToken201Response) GetToken() string {
	if o == nil || IsNil(o.Token) {
		var ret string
		return ret
	}
	return *o.Token
}

// GetTokenOk returns a tuple with the Token field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateStorageToken201Response) GetTokenOk() (*string, bool) {
	if o == nil || IsNil(o.Token) {
		return nil, false
	}
	return o.Token, true
}

// HasToken returns a boolean if a field has been set.
func (o *CreateStorageToken201Response) HasToken() bool {
	if o != nil && !IsNil(o.Token) {
		return true
	}

	return false
}

// SetToken gets a reference to the given string and assigns it to the Token field.
func (o *CreateStorageToken201Response) SetToken(v string) {
	o.Token = &v
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *CreateStorageToken201Response) GetCreated() string {
	if o == nil || IsNil(o.Created) {
		var ret string
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateStorageToken201Response) GetCreatedOk() (*string, bool) {
	if o == nil || IsNil(o.Created) {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *CreateStorageToken201Response) HasCreated() bool {
	if o != nil && !IsNil(o.Created) {
		return true
	}

	return false
}

// SetCreated gets a reference to the given string and assigns it to the Created field.
func (o *CreateStorageToken201Response) SetCreated(v string) {
	o.Created = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *CreateStorageToken201Response) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateStorageToken201Response) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *CreateStorageToken201Response) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *CreateStorageToken201Response) SetDescription(v string) {
	o.Description = &v
}

// GetUri returns the Uri field value if set, zero value otherwise.
func (o *CreateStorageToken201Response) GetUri() string {
	if o == nil || IsNil(o.Uri) {
		var ret string
		return ret
	}
	return *o.Uri
}

// GetUriOk returns a tuple with the Uri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateStorageToken201Response) GetUriOk() (*string, bool) {
	if o == nil || IsNil(o.Uri) {
		return nil, false
	}
	return o.Uri, true
}

// HasUri returns a boolean if a field has been set.
func (o *CreateStorageToken201Response) HasUri() bool {
	if o != nil && !IsNil(o.Uri) {
		return true
	}

	return false
}

// SetUri gets a reference to the given string and assigns it to the Uri field.
func (o *CreateStorageToken201Response) SetUri(v string) {
	o.Uri = &v
}

// GetIsMasterToken returns the IsMasterToken field value if set, zero value otherwise.
func (o *CreateStorageToken201Response) GetIsMasterToken() bool {
	if o == nil || IsNil(o.IsMasterToken) {
		var ret bool
		return ret
	}
	return *o.IsMasterToken
}

// GetIsMasterTokenOk returns a tuple with the IsMasterToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateStorageToken201Response) GetIsMasterTokenOk() (*bool, bool) {
	if o == nil || IsNil(o.IsMasterToken) {
		return nil, false
	}
	return o.IsMasterToken, true
}

// HasIsMasterToken returns a boolean if a field has been set.
func (o *CreateStorageToken201Response) HasIsMasterToken() bool {
	if o != nil && !IsNil(o.IsMasterToken) {
		return true
	}

	return false
}

// SetIsMasterToken gets a reference to the given bool and assigns it to the IsMasterToken field.
func (o *CreateStorageToken201Response) SetIsMasterToken(v bool) {
	o.IsMasterToken = &v
}

// GetCanManageBuckets returns the CanManageBuckets field value if set, zero value otherwise.
func (o *CreateStorageToken201Response) GetCanManageBuckets() bool {
	if o == nil || IsNil(o.CanManageBuckets) {
		var ret bool
		return ret
	}
	return *o.CanManageBuckets
}

// GetCanManageBucketsOk returns a tuple with the CanManageBuckets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateStorageToken201Response) GetCanManageBucketsOk() (*bool, bool) {
	if o == nil || IsNil(o.CanManageBuckets) {
		return nil, false
	}
	return o.CanManageBuckets, true
}

// HasCanManageBuckets returns a boolean if a field has been set.
func (o *CreateStorageToken201Response) HasCanManageBuckets() bool {
	if o != nil && !IsNil(o.CanManageBuckets) {
		return true
	}

	return false
}

// SetCanManageBuckets gets a reference to the given bool and assigns it to the CanManageBuckets field.
func (o *CreateStorageToken201Response) SetCanManageBuckets(v bool) {
	o.CanManageBuckets = &v
}

// GetCanManageTokens returns the CanManageTokens field value if set, zero value otherwise.
func (o *CreateStorageToken201Response) GetCanManageTokens() bool {
	if o == nil || IsNil(o.CanManageTokens) {
		var ret bool
		return ret
	}
	return *o.CanManageTokens
}

// GetCanManageTokensOk returns a tuple with the CanManageTokens field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateStorageToken201Response) GetCanManageTokensOk() (*bool, bool) {
	if o == nil || IsNil(o.CanManageTokens) {
		return nil, false
	}
	return o.CanManageTokens, true
}

// HasCanManageTokens returns a boolean if a field has been set.
func (o *CreateStorageToken201Response) HasCanManageTokens() bool {
	if o != nil && !IsNil(o.CanManageTokens) {
		return true
	}

	return false
}

// SetCanManageTokens gets a reference to the given bool and assigns it to the CanManageTokens field.
func (o *CreateStorageToken201Response) SetCanManageTokens(v bool) {
	o.CanManageTokens = &v
}

// GetCanReadAllFileUploads returns the CanReadAllFileUploads field value if set, zero value otherwise.
func (o *CreateStorageToken201Response) GetCanReadAllFileUploads() bool {
	if o == nil || IsNil(o.CanReadAllFileUploads) {
		var ret bool
		return ret
	}
	return *o.CanReadAllFileUploads
}

// GetCanReadAllFileUploadsOk returns a tuple with the CanReadAllFileUploads field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateStorageToken201Response) GetCanReadAllFileUploadsOk() (*bool, bool) {
	if o == nil || IsNil(o.CanReadAllFileUploads) {
		return nil, false
	}
	return o.CanReadAllFileUploads, true
}

// HasCanReadAllFileUploads returns a boolean if a field has been set.
func (o *CreateStorageToken201Response) HasCanReadAllFileUploads() bool {
	if o != nil && !IsNil(o.CanReadAllFileUploads) {
		return true
	}

	return false
}

// SetCanReadAllFileUploads gets a reference to the given bool and assigns it to the CanReadAllFileUploads field.
func (o *CreateStorageToken201Response) SetCanReadAllFileUploads(v bool) {
	o.CanReadAllFileUploads = &v
}

// GetCanPurgeTrash returns the CanPurgeTrash field value if set, zero value otherwise.
func (o *CreateStorageToken201Response) GetCanPurgeTrash() bool {
	if o == nil || IsNil(o.CanPurgeTrash) {
		var ret bool
		return ret
	}
	return *o.CanPurgeTrash
}

// GetCanPurgeTrashOk returns a tuple with the CanPurgeTrash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateStorageToken201Response) GetCanPurgeTrashOk() (*bool, bool) {
	if o == nil || IsNil(o.CanPurgeTrash) {
		return nil, false
	}
	return o.CanPurgeTrash, true
}

// HasCanPurgeTrash returns a boolean if a field has been set.
func (o *CreateStorageToken201Response) HasCanPurgeTrash() bool {
	if o != nil && !IsNil(o.CanPurgeTrash) {
		return true
	}

	return false
}

// SetCanPurgeTrash gets a reference to the given bool and assigns it to the CanPurgeTrash field.
func (o *CreateStorageToken201Response) SetCanPurgeTrash(v bool) {
	o.CanPurgeTrash = &v
}

// GetExpires returns the Expires field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateStorageToken201Response) GetExpires() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Expires
}

// GetExpiresOk returns a tuple with the Expires field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateStorageToken201Response) GetExpiresOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Expires) {
		return nil, false
	}
	return &o.Expires, true
}

// HasExpires returns a boolean if a field has been set.
func (o *CreateStorageToken201Response) HasExpires() bool {
	if o != nil && !IsNil(o.Expires) {
		return true
	}

	return false
}

// SetExpires gets a reference to the given interface{} and assigns it to the Expires field.
func (o *CreateStorageToken201Response) SetExpires(v interface{}) {
	o.Expires = v
}

// GetIsExpired returns the IsExpired field value if set, zero value otherwise.
func (o *CreateStorageToken201Response) GetIsExpired() bool {
	if o == nil || IsNil(o.IsExpired) {
		var ret bool
		return ret
	}
	return *o.IsExpired
}

// GetIsExpiredOk returns a tuple with the IsExpired field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateStorageToken201Response) GetIsExpiredOk() (*bool, bool) {
	if o == nil || IsNil(o.IsExpired) {
		return nil, false
	}
	return o.IsExpired, true
}

// HasIsExpired returns a boolean if a field has been set.
func (o *CreateStorageToken201Response) HasIsExpired() bool {
	if o != nil && !IsNil(o.IsExpired) {
		return true
	}

	return false
}

// SetIsExpired gets a reference to the given bool and assigns it to the IsExpired field.
func (o *CreateStorageToken201Response) SetIsExpired(v bool) {
	o.IsExpired = &v
}

// GetIsDisabled returns the IsDisabled field value if set, zero value otherwise.
func (o *CreateStorageToken201Response) GetIsDisabled() bool {
	if o == nil || IsNil(o.IsDisabled) {
		var ret bool
		return ret
	}
	return *o.IsDisabled
}

// GetIsDisabledOk returns a tuple with the IsDisabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateStorageToken201Response) GetIsDisabledOk() (*bool, bool) {
	if o == nil || IsNil(o.IsDisabled) {
		return nil, false
	}
	return o.IsDisabled, true
}

// HasIsDisabled returns a boolean if a field has been set.
func (o *CreateStorageToken201Response) HasIsDisabled() bool {
	if o != nil && !IsNil(o.IsDisabled) {
		return true
	}

	return false
}

// SetIsDisabled gets a reference to the given bool and assigns it to the IsDisabled field.
func (o *CreateStorageToken201Response) SetIsDisabled(v bool) {
	o.IsDisabled = &v
}

// GetDailyCapacity returns the DailyCapacity field value if set, zero value otherwise.
func (o *CreateStorageToken201Response) GetDailyCapacity() float32 {
	if o == nil || IsNil(o.DailyCapacity) {
		var ret float32
		return ret
	}
	return *o.DailyCapacity
}

// GetDailyCapacityOk returns a tuple with the DailyCapacity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateStorageToken201Response) GetDailyCapacityOk() (*float32, bool) {
	if o == nil || IsNil(o.DailyCapacity) {
		return nil, false
	}
	return o.DailyCapacity, true
}

// HasDailyCapacity returns a boolean if a field has been set.
func (o *CreateStorageToken201Response) HasDailyCapacity() bool {
	if o != nil && !IsNil(o.DailyCapacity) {
		return true
	}

	return false
}

// SetDailyCapacity gets a reference to the given float32 and assigns it to the DailyCapacity field.
func (o *CreateStorageToken201Response) SetDailyCapacity(v float32) {
	o.DailyCapacity = &v
}

// GetBucketPermissions returns the BucketPermissions field value if set, zero value otherwise.
func (o *CreateStorageToken201Response) GetBucketPermissions() map[string]interface{} {
	if o == nil || IsNil(o.BucketPermissions) {
		var ret map[string]interface{}
		return ret
	}
	return o.BucketPermissions
}

// GetBucketPermissionsOk returns a tuple with the BucketPermissions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateStorageToken201Response) GetBucketPermissionsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.BucketPermissions) {
		return map[string]interface{}{}, false
	}
	return o.BucketPermissions, true
}

// HasBucketPermissions returns a boolean if a field has been set.
func (o *CreateStorageToken201Response) HasBucketPermissions() bool {
	if o != nil && !IsNil(o.BucketPermissions) {
		return true
	}

	return false
}

// SetBucketPermissions gets a reference to the given map[string]interface{} and assigns it to the BucketPermissions field.
func (o *CreateStorageToken201Response) SetBucketPermissions(v map[string]interface{}) {
	o.BucketPermissions = v
}

func (o CreateStorageToken201Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateStorageToken201Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Token) {
		toSerialize["token"] = o.Token
	}
	if !IsNil(o.Created) {
		toSerialize["created"] = o.Created
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Uri) {
		toSerialize["uri"] = o.Uri
	}
	if !IsNil(o.IsMasterToken) {
		toSerialize["isMasterToken"] = o.IsMasterToken
	}
	if !IsNil(o.CanManageBuckets) {
		toSerialize["canManageBuckets"] = o.CanManageBuckets
	}
	if !IsNil(o.CanManageTokens) {
		toSerialize["canManageTokens"] = o.CanManageTokens
	}
	if !IsNil(o.CanReadAllFileUploads) {
		toSerialize["canReadAllFileUploads"] = o.CanReadAllFileUploads
	}
	if !IsNil(o.CanPurgeTrash) {
		toSerialize["canPurgeTrash"] = o.CanPurgeTrash
	}
	if o.Expires != nil {
		toSerialize["expires"] = o.Expires
	}
	if !IsNil(o.IsExpired) {
		toSerialize["isExpired"] = o.IsExpired
	}
	if !IsNil(o.IsDisabled) {
		toSerialize["isDisabled"] = o.IsDisabled
	}
	if !IsNil(o.DailyCapacity) {
		toSerialize["dailyCapacity"] = o.DailyCapacity
	}
	if !IsNil(o.BucketPermissions) {
		toSerialize["bucketPermissions"] = o.BucketPermissions
	}
	return toSerialize, nil
}

type NullableCreateStorageToken201Response struct {
	value *CreateStorageToken201Response
	isSet bool
}

func (v NullableCreateStorageToken201Response) Get() *CreateStorageToken201Response {
	return v.value
}

func (v *NullableCreateStorageToken201Response) Set(val *CreateStorageToken201Response) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateStorageToken201Response) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateStorageToken201Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateStorageToken201Response(val *CreateStorageToken201Response) *NullableCreateStorageToken201Response {
	return &NullableCreateStorageToken201Response{value: val, isSet: true}
}

func (v NullableCreateStorageToken201Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateStorageToken201Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


