/*
Manage API

The Keboola Connection Management API covers all tasks required for managing projects, as well as some super admin features for controlling and monitoring Keboola Connection.  ## Projects Management  * Create, modify and delete maintainers, organizations and projects  * Move projects between organizations  * Define project limits  * Provision Redshift and other Storage backends  * Access project management activity log  ## Projects Monitoring  * Monitoring of projects over organizations and maintainers  ## Super User Control and Monitoring  * UI release and deployment  * Components management  * Storage and Syrup jobs monitoring (will be provided by Syrup utilizing new tokens for authorization)  * Final project delete  * Workers start/shutdown, etc.  ## Authentication  The API supports authentication by a personal access token, which can be retrieved in [Account Settings](https://connection.keboola.com/admin/account/change-password) in Keboola Connection. An access token is tied to an administrator and its permissions are derived from their permissions. When the administrator is disabled or deleted, all their tokens become invalid too.  ## Token Types  There are the following types of tokens:  | Name | Tied to User | Token string is available only on create | Description  | | ------------- | ------------- | ------------------- | ----- | | user | Yes | Yes |Full access to maintainers, organizations and projects. Access is limited only to resources which are available for the token user.| | super | No | Yes | KBC management. Limited scopes can be specified `super_ui_deploy`, `super_monitoring`, ...  |

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CommandExecute type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CommandExecute{}

// CommandExecute struct for CommandExecute
type CommandExecute struct {
	// command to execute
	Command string `json:"command"`
	// command parameters
	Parameters []interface{} `json:"parameters,omitempty"`
}

type _CommandExecute CommandExecute

// NewCommandExecute instantiates a new CommandExecute object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommandExecute(command string) *CommandExecute {
	this := CommandExecute{}
	this.Command = command
	return &this
}

// NewCommandExecuteWithDefaults instantiates a new CommandExecute object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommandExecuteWithDefaults() *CommandExecute {
	this := CommandExecute{}
	return &this
}

// GetCommand returns the Command field value
func (o *CommandExecute) GetCommand() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Command
}

// GetCommandOk returns a tuple with the Command field value
// and a boolean to check if the value has been set.
func (o *CommandExecute) GetCommandOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Command, true
}

// SetCommand sets field value
func (o *CommandExecute) SetCommand(v string) {
	o.Command = v
}

// GetParameters returns the Parameters field value if set, zero value otherwise.
func (o *CommandExecute) GetParameters() []interface{} {
	if o == nil || IsNil(o.Parameters) {
		var ret []interface{}
		return ret
	}
	return o.Parameters
}

// GetParametersOk returns a tuple with the Parameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommandExecute) GetParametersOk() ([]interface{}, bool) {
	if o == nil || IsNil(o.Parameters) {
		return nil, false
	}
	return o.Parameters, true
}

// HasParameters returns a boolean if a field has been set.
func (o *CommandExecute) HasParameters() bool {
	if o != nil && !IsNil(o.Parameters) {
		return true
	}

	return false
}

// SetParameters gets a reference to the given []interface{} and assigns it to the Parameters field.
func (o *CommandExecute) SetParameters(v []interface{}) {
	o.Parameters = v
}

func (o CommandExecute) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CommandExecute) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["command"] = o.Command
	if !IsNil(o.Parameters) {
		toSerialize["parameters"] = o.Parameters
	}
	return toSerialize, nil
}

func (o *CommandExecute) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"command",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCommandExecute := _CommandExecute{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCommandExecute)

	if err != nil {
		return err
	}

	*o = CommandExecute(varCommandExecute)

	return err
}

type NullableCommandExecute struct {
	value *CommandExecute
	isSet bool
}

func (v NullableCommandExecute) Get() *CommandExecute {
	return v.value
}

func (v *NullableCommandExecute) Set(val *CommandExecute) {
	v.value = val
	v.isSet = true
}

func (v NullableCommandExecute) IsSet() bool {
	return v.isSet
}

func (v *NullableCommandExecute) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommandExecute(val *CommandExecute) *NullableCommandExecute {
	return &NullableCommandExecute{value: val, isSet: true}
}

func (v NullableCommandExecute) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommandExecute) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


