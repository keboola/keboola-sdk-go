/*
Manage API

The Keboola Connection Management API covers all tasks required for managing projects, as well as some super admin features for controlling and monitoring Keboola Connection.  ## Projects Management  * Create, modify and delete maintainers, organizations and projects  * Move projects between organizations  * Define project limits  * Provision Redshift and other Storage backends  * Access project management activity log  ## Projects Monitoring  * Monitoring of projects over organizations and maintainers  ## Super User Control and Monitoring  * UI release and deployment  * Components management  * Storage and Syrup jobs monitoring (will be provided by Syrup utilizing new tokens for authorization)  * Final project delete  * Workers start/shutdown, etc.  ## Authentication  The API supports authentication by a personal access token, which can be retrieved in [Account Settings](https://connection.keboola.com/admin/account/change-password) in Keboola Connection. An access token is tied to an administrator and its permissions are derived from their permissions. When the administrator is disabled or deleted, all their tokens become invalid too.  ## Token Types  There are the following types of tokens:  | Name | Tied to User | Token string is available only on create | Description  | | ------------- | ------------- | ------------------- | ----- | | user | Yes | Yes |Full access to maintainers, organizations and projects. Access is limited only to resources which are available for the token user.| | super | No | Yes | KBC management. Limited scopes can be specified `super_ui_deploy`, `super_monitoring`, ...  |

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the StorageBackendListBaseStats type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StorageBackendListBaseStats{}

// StorageBackendListBaseStats struct for StorageBackendListBaseStats
type StorageBackendListBaseStats struct {
	ProjectsCount float32 `json:"projectsCount"`
	BucketsCount float32 `json:"bucketsCount"`
	DataSizeGB float32 `json:"dataSizeGB"`
	RowsCount float32 `json:"rowsCount"`
}

type _StorageBackendListBaseStats StorageBackendListBaseStats

// NewStorageBackendListBaseStats instantiates a new StorageBackendListBaseStats object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStorageBackendListBaseStats(projectsCount float32, bucketsCount float32, dataSizeGB float32, rowsCount float32) *StorageBackendListBaseStats {
	this := StorageBackendListBaseStats{}
	this.ProjectsCount = projectsCount
	this.BucketsCount = bucketsCount
	this.DataSizeGB = dataSizeGB
	this.RowsCount = rowsCount
	return &this
}

// NewStorageBackendListBaseStatsWithDefaults instantiates a new StorageBackendListBaseStats object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStorageBackendListBaseStatsWithDefaults() *StorageBackendListBaseStats {
	this := StorageBackendListBaseStats{}
	return &this
}

// GetProjectsCount returns the ProjectsCount field value
func (o *StorageBackendListBaseStats) GetProjectsCount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.ProjectsCount
}

// GetProjectsCountOk returns a tuple with the ProjectsCount field value
// and a boolean to check if the value has been set.
func (o *StorageBackendListBaseStats) GetProjectsCountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProjectsCount, true
}

// SetProjectsCount sets field value
func (o *StorageBackendListBaseStats) SetProjectsCount(v float32) {
	o.ProjectsCount = v
}

// GetBucketsCount returns the BucketsCount field value
func (o *StorageBackendListBaseStats) GetBucketsCount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.BucketsCount
}

// GetBucketsCountOk returns a tuple with the BucketsCount field value
// and a boolean to check if the value has been set.
func (o *StorageBackendListBaseStats) GetBucketsCountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BucketsCount, true
}

// SetBucketsCount sets field value
func (o *StorageBackendListBaseStats) SetBucketsCount(v float32) {
	o.BucketsCount = v
}

// GetDataSizeGB returns the DataSizeGB field value
func (o *StorageBackendListBaseStats) GetDataSizeGB() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.DataSizeGB
}

// GetDataSizeGBOk returns a tuple with the DataSizeGB field value
// and a boolean to check if the value has been set.
func (o *StorageBackendListBaseStats) GetDataSizeGBOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DataSizeGB, true
}

// SetDataSizeGB sets field value
func (o *StorageBackendListBaseStats) SetDataSizeGB(v float32) {
	o.DataSizeGB = v
}

// GetRowsCount returns the RowsCount field value
func (o *StorageBackendListBaseStats) GetRowsCount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.RowsCount
}

// GetRowsCountOk returns a tuple with the RowsCount field value
// and a boolean to check if the value has been set.
func (o *StorageBackendListBaseStats) GetRowsCountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RowsCount, true
}

// SetRowsCount sets field value
func (o *StorageBackendListBaseStats) SetRowsCount(v float32) {
	o.RowsCount = v
}

func (o StorageBackendListBaseStats) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StorageBackendListBaseStats) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["projectsCount"] = o.ProjectsCount
	toSerialize["bucketsCount"] = o.BucketsCount
	toSerialize["dataSizeGB"] = o.DataSizeGB
	toSerialize["rowsCount"] = o.RowsCount
	return toSerialize, nil
}

func (o *StorageBackendListBaseStats) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"projectsCount",
		"bucketsCount",
		"dataSizeGB",
		"rowsCount",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varStorageBackendListBaseStats := _StorageBackendListBaseStats{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varStorageBackendListBaseStats)

	if err != nil {
		return err
	}

	*o = StorageBackendListBaseStats(varStorageBackendListBaseStats)

	return err
}

type NullableStorageBackendListBaseStats struct {
	value *StorageBackendListBaseStats
	isSet bool
}

func (v NullableStorageBackendListBaseStats) Get() *StorageBackendListBaseStats {
	return v.value
}

func (v *NullableStorageBackendListBaseStats) Set(val *StorageBackendListBaseStats) {
	v.value = val
	v.isSet = true
}

func (v NullableStorageBackendListBaseStats) IsSet() bool {
	return v.isSet
}

func (v *NullableStorageBackendListBaseStats) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStorageBackendListBaseStats(val *StorageBackendListBaseStats) *NullableStorageBackendListBaseStats {
	return &NullableStorageBackendListBaseStats{value: val, isSet: true}
}

func (v NullableStorageBackendListBaseStats) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStorageBackendListBaseStats) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


