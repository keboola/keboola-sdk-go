/*
Manage API

The Keboola Connection Management API covers all tasks required for managing projects, as well as some super admin features for controlling and monitoring Keboola Connection.  ## Projects Management  * Create, modify and delete maintainers, organizations and projects  * Move projects between organizations  * Define project limits  * Provision Redshift and other Storage backends  * Access project management activity log  ## Projects Monitoring  * Monitoring of projects over organizations and maintainers  ## Super User Control and Monitoring  * UI release and deployment  * Components management  * Storage and Syrup jobs monitoring (will be provided by Syrup utilizing new tokens for authorization)  * Final project delete  * Workers start/shutdown, etc.  ## Authentication  The API supports authentication by a personal access token, which can be retrieved in [Account Settings](https://connection.keboola.com/admin/account/change-password) in Keboola Connection. An access token is tied to an administrator and its permissions are derived from their permissions. When the administrator is disabled or deleted, all their tokens become invalid too.  ## Token Types  There are the following types of tokens:  | Name | Tied to User | Token string is available only on create | Description  | | ------------- | ------------- | ------------------- | ----- | | user | Yes | Yes |Full access to maintainers, organizations and projects. Access is limited only to resources which are available for the token user.| | super | No | Yes | KBC management. Limited scopes can be specified `super_ui_deploy`, `super_monitoring`, ...  |

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ListOrganizationMetadata200ResponseInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListOrganizationMetadata200ResponseInner{}

// ListOrganizationMetadata200ResponseInner struct for ListOrganizationMetadata200ResponseInner
type ListOrganizationMetadata200ResponseInner struct {
	Id float32 `json:"id"`
	Provider string `json:"provider"`
	Timestamp string `json:"timestamp"`
	Key string `json:"key"`
	Value string `json:"value"`
}

type _ListOrganizationMetadata200ResponseInner ListOrganizationMetadata200ResponseInner

// NewListOrganizationMetadata200ResponseInner instantiates a new ListOrganizationMetadata200ResponseInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListOrganizationMetadata200ResponseInner(id float32, provider string, timestamp string, key string, value string) *ListOrganizationMetadata200ResponseInner {
	this := ListOrganizationMetadata200ResponseInner{}
	this.Id = id
	this.Provider = provider
	this.Timestamp = timestamp
	this.Key = key
	this.Value = value
	return &this
}

// NewListOrganizationMetadata200ResponseInnerWithDefaults instantiates a new ListOrganizationMetadata200ResponseInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListOrganizationMetadata200ResponseInnerWithDefaults() *ListOrganizationMetadata200ResponseInner {
	this := ListOrganizationMetadata200ResponseInner{}
	return &this
}

// GetId returns the Id field value
func (o *ListOrganizationMetadata200ResponseInner) GetId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ListOrganizationMetadata200ResponseInner) GetIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ListOrganizationMetadata200ResponseInner) SetId(v float32) {
	o.Id = v
}

// GetProvider returns the Provider field value
func (o *ListOrganizationMetadata200ResponseInner) GetProvider() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Provider
}

// GetProviderOk returns a tuple with the Provider field value
// and a boolean to check if the value has been set.
func (o *ListOrganizationMetadata200ResponseInner) GetProviderOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Provider, true
}

// SetProvider sets field value
func (o *ListOrganizationMetadata200ResponseInner) SetProvider(v string) {
	o.Provider = v
}

// GetTimestamp returns the Timestamp field value
func (o *ListOrganizationMetadata200ResponseInner) GetTimestamp() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value
// and a boolean to check if the value has been set.
func (o *ListOrganizationMetadata200ResponseInner) GetTimestampOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timestamp, true
}

// SetTimestamp sets field value
func (o *ListOrganizationMetadata200ResponseInner) SetTimestamp(v string) {
	o.Timestamp = v
}

// GetKey returns the Key field value
func (o *ListOrganizationMetadata200ResponseInner) GetKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *ListOrganizationMetadata200ResponseInner) GetKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Key, true
}

// SetKey sets field value
func (o *ListOrganizationMetadata200ResponseInner) SetKey(v string) {
	o.Key = v
}

// GetValue returns the Value field value
func (o *ListOrganizationMetadata200ResponseInner) GetValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *ListOrganizationMetadata200ResponseInner) GetValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *ListOrganizationMetadata200ResponseInner) SetValue(v string) {
	o.Value = v
}

func (o ListOrganizationMetadata200ResponseInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListOrganizationMetadata200ResponseInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["provider"] = o.Provider
	toSerialize["timestamp"] = o.Timestamp
	toSerialize["key"] = o.Key
	toSerialize["value"] = o.Value
	return toSerialize, nil
}

func (o *ListOrganizationMetadata200ResponseInner) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"provider",
		"timestamp",
		"key",
		"value",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varListOrganizationMetadata200ResponseInner := _ListOrganizationMetadata200ResponseInner{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varListOrganizationMetadata200ResponseInner)

	if err != nil {
		return err
	}

	*o = ListOrganizationMetadata200ResponseInner(varListOrganizationMetadata200ResponseInner)

	return err
}

type NullableListOrganizationMetadata200ResponseInner struct {
	value *ListOrganizationMetadata200ResponseInner
	isSet bool
}

func (v NullableListOrganizationMetadata200ResponseInner) Get() *ListOrganizationMetadata200ResponseInner {
	return v.value
}

func (v *NullableListOrganizationMetadata200ResponseInner) Set(val *ListOrganizationMetadata200ResponseInner) {
	v.value = val
	v.isSet = true
}

func (v NullableListOrganizationMetadata200ResponseInner) IsSet() bool {
	return v.isSet
}

func (v *NullableListOrganizationMetadata200ResponseInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListOrganizationMetadata200ResponseInner(val *ListOrganizationMetadata200ResponseInner) *NullableListOrganizationMetadata200ResponseInner {
	return &NullableListOrganizationMetadata200ResponseInner{value: val, isSet: true}
}

func (v NullableListOrganizationMetadata200ResponseInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListOrganizationMetadata200ResponseInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


