/*
Manage API

The Keboola Connection Management API covers all tasks required for managing projects, as well as some super admin features for controlling and monitoring Keboola Connection.  ## Projects Management  * Create, modify and delete maintainers, organizations and projects  * Move projects between organizations  * Define project limits  * Provision Redshift and other Storage backends  * Access project management activity log  ## Projects Monitoring  * Monitoring of projects over organizations and maintainers  ## Super User Control and Monitoring  * UI release and deployment  * Components management  * Storage and Syrup jobs monitoring (will be provided by Syrup utilizing new tokens for authorization)  * Final project delete  * Workers start/shutdown, etc.  ## Authentication  The API supports authentication by a personal access token, which can be retrieved in [Account Settings](https://connection.keboola.com/admin/account/change-password) in Keboola Connection. An access token is tied to an administrator and its permissions are derived from their permissions. When the administrator is disabled or deleted, all their tokens become invalid too.  ## Token Types  There are the following types of tokens:  | Name | Tied to User | Token string is available only on create | Description  | | ------------- | ------------- | ------------------- | ----- | | user | Yes | Yes |Full access to maintainers, organizations and projects. Access is limited only to resources which are available for the token user.| | super | No | Yes | KBC management. Limited scopes can be specified `super_ui_deploy`, `super_monitoring`, ...  |

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"encoding/json"
)

// checks if the RegisterNewApplicationVersion201ResponseVerion type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RegisterNewApplicationVersion201ResponseVerion{}

// RegisterNewApplicationVersion201ResponseVerion struct for RegisterNewApplicationVersion201ResponseVerion
type RegisterNewApplicationVersion201ResponseVerion struct {
	Id *float32 `json:"id,omitempty"`
	Created *string `json:"created,omitempty"`
	Version *string `json:"version,omitempty"`
	IsActive *bool `json:"isActive,omitempty"`
	IsCritical *bool `json:"isCritical,omitempty"`
}

// NewRegisterNewApplicationVersion201ResponseVerion instantiates a new RegisterNewApplicationVersion201ResponseVerion object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRegisterNewApplicationVersion201ResponseVerion() *RegisterNewApplicationVersion201ResponseVerion {
	this := RegisterNewApplicationVersion201ResponseVerion{}
	return &this
}

// NewRegisterNewApplicationVersion201ResponseVerionWithDefaults instantiates a new RegisterNewApplicationVersion201ResponseVerion object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRegisterNewApplicationVersion201ResponseVerionWithDefaults() *RegisterNewApplicationVersion201ResponseVerion {
	this := RegisterNewApplicationVersion201ResponseVerion{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *RegisterNewApplicationVersion201ResponseVerion) GetId() float32 {
	if o == nil || IsNil(o.Id) {
		var ret float32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterNewApplicationVersion201ResponseVerion) GetIdOk() (*float32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *RegisterNewApplicationVersion201ResponseVerion) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given float32 and assigns it to the Id field.
func (o *RegisterNewApplicationVersion201ResponseVerion) SetId(v float32) {
	o.Id = &v
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *RegisterNewApplicationVersion201ResponseVerion) GetCreated() string {
	if o == nil || IsNil(o.Created) {
		var ret string
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterNewApplicationVersion201ResponseVerion) GetCreatedOk() (*string, bool) {
	if o == nil || IsNil(o.Created) {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *RegisterNewApplicationVersion201ResponseVerion) HasCreated() bool {
	if o != nil && !IsNil(o.Created) {
		return true
	}

	return false
}

// SetCreated gets a reference to the given string and assigns it to the Created field.
func (o *RegisterNewApplicationVersion201ResponseVerion) SetCreated(v string) {
	o.Created = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *RegisterNewApplicationVersion201ResponseVerion) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterNewApplicationVersion201ResponseVerion) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *RegisterNewApplicationVersion201ResponseVerion) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *RegisterNewApplicationVersion201ResponseVerion) SetVersion(v string) {
	o.Version = &v
}

// GetIsActive returns the IsActive field value if set, zero value otherwise.
func (o *RegisterNewApplicationVersion201ResponseVerion) GetIsActive() bool {
	if o == nil || IsNil(o.IsActive) {
		var ret bool
		return ret
	}
	return *o.IsActive
}

// GetIsActiveOk returns a tuple with the IsActive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterNewApplicationVersion201ResponseVerion) GetIsActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.IsActive) {
		return nil, false
	}
	return o.IsActive, true
}

// HasIsActive returns a boolean if a field has been set.
func (o *RegisterNewApplicationVersion201ResponseVerion) HasIsActive() bool {
	if o != nil && !IsNil(o.IsActive) {
		return true
	}

	return false
}

// SetIsActive gets a reference to the given bool and assigns it to the IsActive field.
func (o *RegisterNewApplicationVersion201ResponseVerion) SetIsActive(v bool) {
	o.IsActive = &v
}

// GetIsCritical returns the IsCritical field value if set, zero value otherwise.
func (o *RegisterNewApplicationVersion201ResponseVerion) GetIsCritical() bool {
	if o == nil || IsNil(o.IsCritical) {
		var ret bool
		return ret
	}
	return *o.IsCritical
}

// GetIsCriticalOk returns a tuple with the IsCritical field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterNewApplicationVersion201ResponseVerion) GetIsCriticalOk() (*bool, bool) {
	if o == nil || IsNil(o.IsCritical) {
		return nil, false
	}
	return o.IsCritical, true
}

// HasIsCritical returns a boolean if a field has been set.
func (o *RegisterNewApplicationVersion201ResponseVerion) HasIsCritical() bool {
	if o != nil && !IsNil(o.IsCritical) {
		return true
	}

	return false
}

// SetIsCritical gets a reference to the given bool and assigns it to the IsCritical field.
func (o *RegisterNewApplicationVersion201ResponseVerion) SetIsCritical(v bool) {
	o.IsCritical = &v
}

func (o RegisterNewApplicationVersion201ResponseVerion) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RegisterNewApplicationVersion201ResponseVerion) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Created) {
		toSerialize["created"] = o.Created
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	if !IsNil(o.IsActive) {
		toSerialize["isActive"] = o.IsActive
	}
	if !IsNil(o.IsCritical) {
		toSerialize["isCritical"] = o.IsCritical
	}
	return toSerialize, nil
}

type NullableRegisterNewApplicationVersion201ResponseVerion struct {
	value *RegisterNewApplicationVersion201ResponseVerion
	isSet bool
}

func (v NullableRegisterNewApplicationVersion201ResponseVerion) Get() *RegisterNewApplicationVersion201ResponseVerion {
	return v.value
}

func (v *NullableRegisterNewApplicationVersion201ResponseVerion) Set(val *RegisterNewApplicationVersion201ResponseVerion) {
	v.value = val
	v.isSet = true
}

func (v NullableRegisterNewApplicationVersion201ResponseVerion) IsSet() bool {
	return v.isSet
}

func (v *NullableRegisterNewApplicationVersion201ResponseVerion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRegisterNewApplicationVersion201ResponseVerion(val *RegisterNewApplicationVersion201ResponseVerion) *NullableRegisterNewApplicationVersion201ResponseVerion {
	return &NullableRegisterNewApplicationVersion201ResponseVerion{value: val, isSet: true}
}

func (v NullableRegisterNewApplicationVersion201ResponseVerion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRegisterNewApplicationVersion201ResponseVerion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


