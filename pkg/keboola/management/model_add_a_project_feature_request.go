/*
Manage API

The Keboola Connection Management API covers all tasks required for managing projects, as well as some super admin features for controlling and monitoring Keboola Connection.  ## Projects Management  * Create, modify and delete maintainers, organizations and projects  * Move projects between organizations  * Define project limits  * Provision Redshift and other Storage backends  * Access project management activity log  ## Projects Monitoring  * Monitoring of projects over organizations and maintainers  ## Super User Control and Monitoring  * UI release and deployment  * Components management  * Storage and Syrup jobs monitoring (will be provided by Syrup utilizing new tokens for authorization)  * Final project delete  * Workers start/shutdown, etc.  ## Authentication  The API supports authentication by a personal access token, which can be retrieved in [Account Settings](https://connection.keboola.com/admin/account/change-password) in Keboola Connection. An access token is tied to an administrator and its permissions are derived from their permissions. When the administrator is disabled or deleted, all their tokens become invalid too.  ## Token Types  There are the following types of tokens:  | Name | Tied to User | Token string is available only on create | Description  | | ------------- | ------------- | ------------------- | ----- | | user | Yes | Yes |Full access to maintainers, organizations and projects. Access is limited only to resources which are available for the token user.| | super | No | Yes | KBC management. Limited scopes can be specified `super_ui_deploy`, `super_monitoring`, ...  |

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AddAProjectFeatureRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AddAProjectFeatureRequest{}

// AddAProjectFeatureRequest struct for AddAProjectFeatureRequest
type AddAProjectFeatureRequest struct {
	// Feature name
	Feature string `json:"feature"`
}

type _AddAProjectFeatureRequest AddAProjectFeatureRequest

// NewAddAProjectFeatureRequest instantiates a new AddAProjectFeatureRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddAProjectFeatureRequest(feature string) *AddAProjectFeatureRequest {
	this := AddAProjectFeatureRequest{}
	this.Feature = feature
	return &this
}

// NewAddAProjectFeatureRequestWithDefaults instantiates a new AddAProjectFeatureRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddAProjectFeatureRequestWithDefaults() *AddAProjectFeatureRequest {
	this := AddAProjectFeatureRequest{}
	return &this
}

// GetFeature returns the Feature field value
func (o *AddAProjectFeatureRequest) GetFeature() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Feature
}

// GetFeatureOk returns a tuple with the Feature field value
// and a boolean to check if the value has been set.
func (o *AddAProjectFeatureRequest) GetFeatureOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Feature, true
}

// SetFeature sets field value
func (o *AddAProjectFeatureRequest) SetFeature(v string) {
	o.Feature = v
}

func (o AddAProjectFeatureRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AddAProjectFeatureRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["feature"] = o.Feature
	return toSerialize, nil
}

func (o *AddAProjectFeatureRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"feature",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAddAProjectFeatureRequest := _AddAProjectFeatureRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAddAProjectFeatureRequest)

	if err != nil {
		return err
	}

	*o = AddAProjectFeatureRequest(varAddAProjectFeatureRequest)

	return err
}

type NullableAddAProjectFeatureRequest struct {
	value *AddAProjectFeatureRequest
	isSet bool
}

func (v NullableAddAProjectFeatureRequest) Get() *AddAProjectFeatureRequest {
	return v.value
}

func (v *NullableAddAProjectFeatureRequest) Set(val *AddAProjectFeatureRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAddAProjectFeatureRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAddAProjectFeatureRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddAProjectFeatureRequest(val *AddAProjectFeatureRequest) *NullableAddAProjectFeatureRequest {
	return &NullableAddAProjectFeatureRequest{value: val, isSet: true}
}

func (v NullableAddAProjectFeatureRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddAProjectFeatureRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


