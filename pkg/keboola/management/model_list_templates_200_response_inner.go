/*
Manage API

The Keboola Connection Management API covers all tasks required for managing projects, as well as some super admin features for controlling and monitoring Keboola Connection.  ## Projects Management  * Create, modify and delete maintainers, organizations and projects  * Move projects between organizations  * Define project limits  * Provision Redshift and other Storage backends  * Access project management activity log  ## Projects Monitoring  * Monitoring of projects over organizations and maintainers  ## Super User Control and Monitoring  * UI release and deployment  * Components management  * Storage and Syrup jobs monitoring (will be provided by Syrup utilizing new tokens for authorization)  * Final project delete  * Workers start/shutdown, etc.  ## Authentication  The API supports authentication by a personal access token, which can be retrieved in [Account Settings](https://connection.keboola.com/admin/account/change-password) in Keboola Connection. An access token is tied to an administrator and its permissions are derived from their permissions. When the administrator is disabled or deleted, all their tokens become invalid too.  ## Token Types  There are the following types of tokens:  | Name | Tied to User | Token string is available only on create | Description  | | ------------- | ------------- | ------------------- | ----- | | user | Yes | Yes |Full access to maintainers, organizations and projects. Access is limited only to resources which are available for the token user.| | super | No | Yes | KBC management. Limited scopes can be specified `super_ui_deploy`, `super_monitoring`, ...  |

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ListTemplates200ResponseInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListTemplates200ResponseInner{}

// ListTemplates200ResponseInner struct for ListTemplates200ResponseInner
type ListTemplates200ResponseInner struct {
	Id string `json:"id"`
	Name string `json:"name"`
	Description string `json:"description"`
	ExpirationDays float32 `json:"expirationDays"`
	BilledMonthlyPrice interface{} `json:"billedMonthlyPrice"`
	HasTryModeOn bool `json:"hasTryModeOn"`
	DefaultBackend string `json:"defaultBackend"`
}

type _ListTemplates200ResponseInner ListTemplates200ResponseInner

// NewListTemplates200ResponseInner instantiates a new ListTemplates200ResponseInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListTemplates200ResponseInner(id string, name string, description string, expirationDays float32, billedMonthlyPrice interface{}, hasTryModeOn bool, defaultBackend string) *ListTemplates200ResponseInner {
	this := ListTemplates200ResponseInner{}
	this.Id = id
	this.Name = name
	this.Description = description
	this.ExpirationDays = expirationDays
	this.BilledMonthlyPrice = billedMonthlyPrice
	this.HasTryModeOn = hasTryModeOn
	this.DefaultBackend = defaultBackend
	return &this
}

// NewListTemplates200ResponseInnerWithDefaults instantiates a new ListTemplates200ResponseInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListTemplates200ResponseInnerWithDefaults() *ListTemplates200ResponseInner {
	this := ListTemplates200ResponseInner{}
	return &this
}

// GetId returns the Id field value
func (o *ListTemplates200ResponseInner) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ListTemplates200ResponseInner) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ListTemplates200ResponseInner) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *ListTemplates200ResponseInner) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ListTemplates200ResponseInner) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ListTemplates200ResponseInner) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value
func (o *ListTemplates200ResponseInner) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *ListTemplates200ResponseInner) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *ListTemplates200ResponseInner) SetDescription(v string) {
	o.Description = v
}

// GetExpirationDays returns the ExpirationDays field value
func (o *ListTemplates200ResponseInner) GetExpirationDays() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.ExpirationDays
}

// GetExpirationDaysOk returns a tuple with the ExpirationDays field value
// and a boolean to check if the value has been set.
func (o *ListTemplates200ResponseInner) GetExpirationDaysOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExpirationDays, true
}

// SetExpirationDays sets field value
func (o *ListTemplates200ResponseInner) SetExpirationDays(v float32) {
	o.ExpirationDays = v
}

// GetBilledMonthlyPrice returns the BilledMonthlyPrice field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *ListTemplates200ResponseInner) GetBilledMonthlyPrice() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.BilledMonthlyPrice
}

// GetBilledMonthlyPriceOk returns a tuple with the BilledMonthlyPrice field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ListTemplates200ResponseInner) GetBilledMonthlyPriceOk() (*interface{}, bool) {
	if o == nil || IsNil(o.BilledMonthlyPrice) {
		return nil, false
	}
	return &o.BilledMonthlyPrice, true
}

// SetBilledMonthlyPrice sets field value
func (o *ListTemplates200ResponseInner) SetBilledMonthlyPrice(v interface{}) {
	o.BilledMonthlyPrice = v
}

// GetHasTryModeOn returns the HasTryModeOn field value
func (o *ListTemplates200ResponseInner) GetHasTryModeOn() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.HasTryModeOn
}

// GetHasTryModeOnOk returns a tuple with the HasTryModeOn field value
// and a boolean to check if the value has been set.
func (o *ListTemplates200ResponseInner) GetHasTryModeOnOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HasTryModeOn, true
}

// SetHasTryModeOn sets field value
func (o *ListTemplates200ResponseInner) SetHasTryModeOn(v bool) {
	o.HasTryModeOn = v
}

// GetDefaultBackend returns the DefaultBackend field value
func (o *ListTemplates200ResponseInner) GetDefaultBackend() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DefaultBackend
}

// GetDefaultBackendOk returns a tuple with the DefaultBackend field value
// and a boolean to check if the value has been set.
func (o *ListTemplates200ResponseInner) GetDefaultBackendOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DefaultBackend, true
}

// SetDefaultBackend sets field value
func (o *ListTemplates200ResponseInner) SetDefaultBackend(v string) {
	o.DefaultBackend = v
}

func (o ListTemplates200ResponseInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListTemplates200ResponseInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["description"] = o.Description
	toSerialize["expirationDays"] = o.ExpirationDays
	if o.BilledMonthlyPrice != nil {
		toSerialize["billedMonthlyPrice"] = o.BilledMonthlyPrice
	}
	toSerialize["hasTryModeOn"] = o.HasTryModeOn
	toSerialize["defaultBackend"] = o.DefaultBackend
	return toSerialize, nil
}

func (o *ListTemplates200ResponseInner) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
		"description",
		"expirationDays",
		"billedMonthlyPrice",
		"hasTryModeOn",
		"defaultBackend",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varListTemplates200ResponseInner := _ListTemplates200ResponseInner{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varListTemplates200ResponseInner)

	if err != nil {
		return err
	}

	*o = ListTemplates200ResponseInner(varListTemplates200ResponseInner)

	return err
}

type NullableListTemplates200ResponseInner struct {
	value *ListTemplates200ResponseInner
	isSet bool
}

func (v NullableListTemplates200ResponseInner) Get() *ListTemplates200ResponseInner {
	return v.value
}

func (v *NullableListTemplates200ResponseInner) Set(val *ListTemplates200ResponseInner) {
	v.value = val
	v.isSet = true
}

func (v NullableListTemplates200ResponseInner) IsSet() bool {
	return v.isSet
}

func (v *NullableListTemplates200ResponseInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListTemplates200ResponseInner(val *ListTemplates200ResponseInner) *NullableListTemplates200ResponseInner {
	return &NullableListTemplates200ResponseInner{value: val, isSet: true}
}

func (v NullableListTemplates200ResponseInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListTemplates200ResponseInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


