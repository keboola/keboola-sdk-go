/*
Manage API

The Keboola Connection Management API covers all tasks required for managing projects, as well as some super admin features for controlling and monitoring Keboola Connection.  ## Projects Management  * Create, modify and delete maintainers, organizations and projects  * Move projects between organizations  * Define project limits  * Provision Redshift and other Storage backends  * Access project management activity log  ## Projects Monitoring  * Monitoring of projects over organizations and maintainers  ## Super User Control and Monitoring  * UI release and deployment  * Components management  * Storage and Syrup jobs monitoring (will be provided by Syrup utilizing new tokens for authorization)  * Final project delete  * Workers start/shutdown, etc.  ## Authentication  The API supports authentication by a personal access token, which can be retrieved in [Account Settings](https://connection.keboola.com/admin/account/change-password) in Keboola Connection. An access token is tied to an administrator and its permissions are derived from their permissions. When the administrator is disabled or deleted, all their tokens become invalid too.  ## Token Types  There are the following types of tokens:  | Name | Tied to User | Token string is available only on create | Description  | | ------------- | ------------- | ------------------- | ----- | | user | Yes | Yes |Full access to maintainers, organizations and projects. Access is limited only to resources which are available for the token user.| | super | No | Yes | KBC management. Limited scopes can be specified `super_ui_deploy`, `super_monitoring`, ...  |

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CreateNewAzureBlobStorageRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateNewAzureBlobStorageRequest{}

// CreateNewAzureBlobStorageRequest struct for CreateNewAzureBlobStorageRequest
type CreateNewAzureBlobStorageRequest struct {
	AccountName string `json:"accountName"`
	// of-container (required)
	ContainerName *string `json:"containerName,omitempty"`
	Owner string `json:"owner"`
	// new key to be rotated to
	AccountKey string `json:"accountKey"`
}

type _CreateNewAzureBlobStorageRequest CreateNewAzureBlobStorageRequest

// NewCreateNewAzureBlobStorageRequest instantiates a new CreateNewAzureBlobStorageRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateNewAzureBlobStorageRequest(accountName string, owner string, accountKey string) *CreateNewAzureBlobStorageRequest {
	this := CreateNewAzureBlobStorageRequest{}
	this.AccountName = accountName
	this.Owner = owner
	this.AccountKey = accountKey
	return &this
}

// NewCreateNewAzureBlobStorageRequestWithDefaults instantiates a new CreateNewAzureBlobStorageRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateNewAzureBlobStorageRequestWithDefaults() *CreateNewAzureBlobStorageRequest {
	this := CreateNewAzureBlobStorageRequest{}
	return &this
}

// GetAccountName returns the AccountName field value
func (o *CreateNewAzureBlobStorageRequest) GetAccountName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AccountName
}

// GetAccountNameOk returns a tuple with the AccountName field value
// and a boolean to check if the value has been set.
func (o *CreateNewAzureBlobStorageRequest) GetAccountNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccountName, true
}

// SetAccountName sets field value
func (o *CreateNewAzureBlobStorageRequest) SetAccountName(v string) {
	o.AccountName = v
}

// GetContainerName returns the ContainerName field value if set, zero value otherwise.
func (o *CreateNewAzureBlobStorageRequest) GetContainerName() string {
	if o == nil || IsNil(o.ContainerName) {
		var ret string
		return ret
	}
	return *o.ContainerName
}

// GetContainerNameOk returns a tuple with the ContainerName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateNewAzureBlobStorageRequest) GetContainerNameOk() (*string, bool) {
	if o == nil || IsNil(o.ContainerName) {
		return nil, false
	}
	return o.ContainerName, true
}

// HasContainerName returns a boolean if a field has been set.
func (o *CreateNewAzureBlobStorageRequest) HasContainerName() bool {
	if o != nil && !IsNil(o.ContainerName) {
		return true
	}

	return false
}

// SetContainerName gets a reference to the given string and assigns it to the ContainerName field.
func (o *CreateNewAzureBlobStorageRequest) SetContainerName(v string) {
	o.ContainerName = &v
}

// GetOwner returns the Owner field value
func (o *CreateNewAzureBlobStorageRequest) GetOwner() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value
// and a boolean to check if the value has been set.
func (o *CreateNewAzureBlobStorageRequest) GetOwnerOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Owner, true
}

// SetOwner sets field value
func (o *CreateNewAzureBlobStorageRequest) SetOwner(v string) {
	o.Owner = v
}

// GetAccountKey returns the AccountKey field value
func (o *CreateNewAzureBlobStorageRequest) GetAccountKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AccountKey
}

// GetAccountKeyOk returns a tuple with the AccountKey field value
// and a boolean to check if the value has been set.
func (o *CreateNewAzureBlobStorageRequest) GetAccountKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccountKey, true
}

// SetAccountKey sets field value
func (o *CreateNewAzureBlobStorageRequest) SetAccountKey(v string) {
	o.AccountKey = v
}

func (o CreateNewAzureBlobStorageRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateNewAzureBlobStorageRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["accountName"] = o.AccountName
	if !IsNil(o.ContainerName) {
		toSerialize["containerName"] = o.ContainerName
	}
	toSerialize["owner"] = o.Owner
	toSerialize["accountKey"] = o.AccountKey
	return toSerialize, nil
}

func (o *CreateNewAzureBlobStorageRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"accountName",
		"owner",
		"accountKey",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateNewAzureBlobStorageRequest := _CreateNewAzureBlobStorageRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateNewAzureBlobStorageRequest)

	if err != nil {
		return err
	}

	*o = CreateNewAzureBlobStorageRequest(varCreateNewAzureBlobStorageRequest)

	return err
}

type NullableCreateNewAzureBlobStorageRequest struct {
	value *CreateNewAzureBlobStorageRequest
	isSet bool
}

func (v NullableCreateNewAzureBlobStorageRequest) Get() *CreateNewAzureBlobStorageRequest {
	return v.value
}

func (v *NullableCreateNewAzureBlobStorageRequest) Set(val *CreateNewAzureBlobStorageRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateNewAzureBlobStorageRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateNewAzureBlobStorageRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateNewAzureBlobStorageRequest(val *CreateNewAzureBlobStorageRequest) *NullableCreateNewAzureBlobStorageRequest {
	return &NullableCreateNewAzureBlobStorageRequest{value: val, isSet: true}
}

func (v NullableCreateNewAzureBlobStorageRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateNewAzureBlobStorageRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


