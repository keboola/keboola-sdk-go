/*
Manage API

The Keboola Connection Management API covers all tasks required for managing projects, as well as some super admin features for controlling and monitoring Keboola Connection.  ## Projects Management  * Create, modify and delete maintainers, organizations and projects  * Move projects between organizations  * Define project limits  * Provision Redshift and other Storage backends  * Access project management activity log  ## Projects Monitoring  * Monitoring of projects over organizations and maintainers  ## Super User Control and Monitoring  * UI release and deployment  * Components management  * Storage and Syrup jobs monitoring (will be provided by Syrup utilizing new tokens for authorization)  * Final project delete  * Workers start/shutdown, etc.  ## Authentication  The API supports authentication by a personal access token, which can be retrieved in [Account Settings](https://connection.keboola.com/admin/account/change-password) in Keboola Connection. An access token is tied to an administrator and its permissions are derived from their permissions. When the administrator is disabled or deleted, all their tokens become invalid too.  ## Token Types  There are the following types of tokens:  | Name | Tied to User | Token string is available only on create | Description  | | ------------- | ------------- | ------------------- | ----- | | user | Yes | Yes |Full access to maintainers, organizations and projects. Access is limited only to resources which are available for the token user.| | super | No | Yes | KBC management. Limited scopes can be specified `super_ui_deploy`, `super_monitoring`, ...  |

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the StorageBackendListSynapse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StorageBackendListSynapse{}

// StorageBackendListSynapse struct for StorageBackendListSynapse
type StorageBackendListSynapse struct {
	Id float32 `json:"id"`
	// east-1 (required)
	Region *string `json:"region,omitempty"`
	Owner string `json:"owner"`
	Username *string `json:"username,omitempty"`
	Stats *StorageBackendListBaseStats `json:"stats,omitempty"`
	// The datetime (ISO8601 format) 'Y-m-d\\TH:i:sO'
	Created string `json:"created"`
	Creator *StorageBackendListBaseCreator `json:"creator,omitempty"`
	// synapse.database.windows.net (required)
	Host *string `json:"host,omitempty"`
	Backend string `json:"backend"`
	Database *string `json:"database,omitempty"`
	UseSynapseManagedIdentity *string `json:"useSynapseManagedIdentity,omitempty"`
}

type _StorageBackendListSynapse StorageBackendListSynapse

// NewStorageBackendListSynapse instantiates a new StorageBackendListSynapse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStorageBackendListSynapse(id float32, owner string, created string, backend string) *StorageBackendListSynapse {
	this := StorageBackendListSynapse{}
	this.Id = id
	this.Owner = owner
	this.Created = created
	this.Backend = backend
	return &this
}

// NewStorageBackendListSynapseWithDefaults instantiates a new StorageBackendListSynapse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStorageBackendListSynapseWithDefaults() *StorageBackendListSynapse {
	this := StorageBackendListSynapse{}
	return &this
}

// GetId returns the Id field value
func (o *StorageBackendListSynapse) GetId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *StorageBackendListSynapse) GetIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *StorageBackendListSynapse) SetId(v float32) {
	o.Id = v
}

// GetRegion returns the Region field value if set, zero value otherwise.
func (o *StorageBackendListSynapse) GetRegion() string {
	if o == nil || IsNil(o.Region) {
		var ret string
		return ret
	}
	return *o.Region
}

// GetRegionOk returns a tuple with the Region field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageBackendListSynapse) GetRegionOk() (*string, bool) {
	if o == nil || IsNil(o.Region) {
		return nil, false
	}
	return o.Region, true
}

// HasRegion returns a boolean if a field has been set.
func (o *StorageBackendListSynapse) HasRegion() bool {
	if o != nil && !IsNil(o.Region) {
		return true
	}

	return false
}

// SetRegion gets a reference to the given string and assigns it to the Region field.
func (o *StorageBackendListSynapse) SetRegion(v string) {
	o.Region = &v
}

// GetOwner returns the Owner field value
func (o *StorageBackendListSynapse) GetOwner() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value
// and a boolean to check if the value has been set.
func (o *StorageBackendListSynapse) GetOwnerOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Owner, true
}

// SetOwner sets field value
func (o *StorageBackendListSynapse) SetOwner(v string) {
	o.Owner = v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *StorageBackendListSynapse) GetUsername() string {
	if o == nil || IsNil(o.Username) {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageBackendListSynapse) GetUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.Username) {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *StorageBackendListSynapse) HasUsername() bool {
	if o != nil && !IsNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *StorageBackendListSynapse) SetUsername(v string) {
	o.Username = &v
}

// GetStats returns the Stats field value if set, zero value otherwise.
func (o *StorageBackendListSynapse) GetStats() StorageBackendListBaseStats {
	if o == nil || IsNil(o.Stats) {
		var ret StorageBackendListBaseStats
		return ret
	}
	return *o.Stats
}

// GetStatsOk returns a tuple with the Stats field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageBackendListSynapse) GetStatsOk() (*StorageBackendListBaseStats, bool) {
	if o == nil || IsNil(o.Stats) {
		return nil, false
	}
	return o.Stats, true
}

// HasStats returns a boolean if a field has been set.
func (o *StorageBackendListSynapse) HasStats() bool {
	if o != nil && !IsNil(o.Stats) {
		return true
	}

	return false
}

// SetStats gets a reference to the given StorageBackendListBaseStats and assigns it to the Stats field.
func (o *StorageBackendListSynapse) SetStats(v StorageBackendListBaseStats) {
	o.Stats = &v
}

// GetCreated returns the Created field value
func (o *StorageBackendListSynapse) GetCreated() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Created
}

// GetCreatedOk returns a tuple with the Created field value
// and a boolean to check if the value has been set.
func (o *StorageBackendListSynapse) GetCreatedOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Created, true
}

// SetCreated sets field value
func (o *StorageBackendListSynapse) SetCreated(v string) {
	o.Created = v
}

// GetCreator returns the Creator field value if set, zero value otherwise.
func (o *StorageBackendListSynapse) GetCreator() StorageBackendListBaseCreator {
	if o == nil || IsNil(o.Creator) {
		var ret StorageBackendListBaseCreator
		return ret
	}
	return *o.Creator
}

// GetCreatorOk returns a tuple with the Creator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageBackendListSynapse) GetCreatorOk() (*StorageBackendListBaseCreator, bool) {
	if o == nil || IsNil(o.Creator) {
		return nil, false
	}
	return o.Creator, true
}

// HasCreator returns a boolean if a field has been set.
func (o *StorageBackendListSynapse) HasCreator() bool {
	if o != nil && !IsNil(o.Creator) {
		return true
	}

	return false
}

// SetCreator gets a reference to the given StorageBackendListBaseCreator and assigns it to the Creator field.
func (o *StorageBackendListSynapse) SetCreator(v StorageBackendListBaseCreator) {
	o.Creator = &v
}

// GetHost returns the Host field value if set, zero value otherwise.
func (o *StorageBackendListSynapse) GetHost() string {
	if o == nil || IsNil(o.Host) {
		var ret string
		return ret
	}
	return *o.Host
}

// GetHostOk returns a tuple with the Host field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageBackendListSynapse) GetHostOk() (*string, bool) {
	if o == nil || IsNil(o.Host) {
		return nil, false
	}
	return o.Host, true
}

// HasHost returns a boolean if a field has been set.
func (o *StorageBackendListSynapse) HasHost() bool {
	if o != nil && !IsNil(o.Host) {
		return true
	}

	return false
}

// SetHost gets a reference to the given string and assigns it to the Host field.
func (o *StorageBackendListSynapse) SetHost(v string) {
	o.Host = &v
}

// GetBackend returns the Backend field value
func (o *StorageBackendListSynapse) GetBackend() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Backend
}

// GetBackendOk returns a tuple with the Backend field value
// and a boolean to check if the value has been set.
func (o *StorageBackendListSynapse) GetBackendOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Backend, true
}

// SetBackend sets field value
func (o *StorageBackendListSynapse) SetBackend(v string) {
	o.Backend = v
}

// GetDatabase returns the Database field value if set, zero value otherwise.
func (o *StorageBackendListSynapse) GetDatabase() string {
	if o == nil || IsNil(o.Database) {
		var ret string
		return ret
	}
	return *o.Database
}

// GetDatabaseOk returns a tuple with the Database field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageBackendListSynapse) GetDatabaseOk() (*string, bool) {
	if o == nil || IsNil(o.Database) {
		return nil, false
	}
	return o.Database, true
}

// HasDatabase returns a boolean if a field has been set.
func (o *StorageBackendListSynapse) HasDatabase() bool {
	if o != nil && !IsNil(o.Database) {
		return true
	}

	return false
}

// SetDatabase gets a reference to the given string and assigns it to the Database field.
func (o *StorageBackendListSynapse) SetDatabase(v string) {
	o.Database = &v
}

// GetUseSynapseManagedIdentity returns the UseSynapseManagedIdentity field value if set, zero value otherwise.
func (o *StorageBackendListSynapse) GetUseSynapseManagedIdentity() string {
	if o == nil || IsNil(o.UseSynapseManagedIdentity) {
		var ret string
		return ret
	}
	return *o.UseSynapseManagedIdentity
}

// GetUseSynapseManagedIdentityOk returns a tuple with the UseSynapseManagedIdentity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageBackendListSynapse) GetUseSynapseManagedIdentityOk() (*string, bool) {
	if o == nil || IsNil(o.UseSynapseManagedIdentity) {
		return nil, false
	}
	return o.UseSynapseManagedIdentity, true
}

// HasUseSynapseManagedIdentity returns a boolean if a field has been set.
func (o *StorageBackendListSynapse) HasUseSynapseManagedIdentity() bool {
	if o != nil && !IsNil(o.UseSynapseManagedIdentity) {
		return true
	}

	return false
}

// SetUseSynapseManagedIdentity gets a reference to the given string and assigns it to the UseSynapseManagedIdentity field.
func (o *StorageBackendListSynapse) SetUseSynapseManagedIdentity(v string) {
	o.UseSynapseManagedIdentity = &v
}

func (o StorageBackendListSynapse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StorageBackendListSynapse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	if !IsNil(o.Region) {
		toSerialize["region"] = o.Region
	}
	toSerialize["owner"] = o.Owner
	if !IsNil(o.Username) {
		toSerialize["username"] = o.Username
	}
	if !IsNil(o.Stats) {
		toSerialize["stats"] = o.Stats
	}
	toSerialize["created"] = o.Created
	if !IsNil(o.Creator) {
		toSerialize["creator"] = o.Creator
	}
	if !IsNil(o.Host) {
		toSerialize["host"] = o.Host
	}
	toSerialize["backend"] = o.Backend
	if !IsNil(o.Database) {
		toSerialize["database"] = o.Database
	}
	if !IsNil(o.UseSynapseManagedIdentity) {
		toSerialize["useSynapseManagedIdentity"] = o.UseSynapseManagedIdentity
	}
	return toSerialize, nil
}

func (o *StorageBackendListSynapse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"owner",
		"created",
		"backend",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varStorageBackendListSynapse := _StorageBackendListSynapse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varStorageBackendListSynapse)

	if err != nil {
		return err
	}

	*o = StorageBackendListSynapse(varStorageBackendListSynapse)

	return err
}

type NullableStorageBackendListSynapse struct {
	value *StorageBackendListSynapse
	isSet bool
}

func (v NullableStorageBackendListSynapse) Get() *StorageBackendListSynapse {
	return v.value
}

func (v *NullableStorageBackendListSynapse) Set(val *StorageBackendListSynapse) {
	v.value = val
	v.isSet = true
}

func (v NullableStorageBackendListSynapse) IsSet() bool {
	return v.isSet
}

func (v *NullableStorageBackendListSynapse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStorageBackendListSynapse(val *StorageBackendListSynapse) *NullableStorageBackendListSynapse {
	return &NullableStorageBackendListSynapse{value: val, isSet: true}
}

func (v NullableStorageBackendListSynapse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStorageBackendListSynapse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


