/*
Manage API

The Keboola Connection Management API covers all tasks required for managing projects, as well as some super admin features for controlling and monitoring Keboola Connection.  ## Projects Management  * Create, modify and delete maintainers, organizations and projects  * Move projects between organizations  * Define project limits  * Provision Redshift and other Storage backends  * Access project management activity log  ## Projects Monitoring  * Monitoring of projects over organizations and maintainers  ## Super User Control and Monitoring  * UI release and deployment  * Components management  * Storage and Syrup jobs monitoring (will be provided by Syrup utilizing new tokens for authorization)  * Final project delete  * Workers start/shutdown, etc.  ## Authentication  The API supports authentication by a personal access token, which can be retrieved in [Account Settings](https://connection.keboola.com/admin/account/change-password) in Keboola Connection. An access token is tied to an administrator and its permissions are derived from their permissions. When the administrator is disabled or deleted, all their tokens become invalid too.  ## Token Types  There are the following types of tokens:  | Name | Tied to User | Token string is available only on create | Description  | | ------------- | ------------- | ------------------- | ----- | | user | Yes | Yes |Full access to maintainers, organizations and projects. Access is limited only to resources which are available for the token user.| | super | No | Yes | KBC management. Limited scopes can be specified `super_ui_deploy`, `super_monitoring`, ...  |

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"encoding/json"
)

// checks if the ChangeRoleOfAUserInAProject200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChangeRoleOfAUserInAProject200Response{}

// ChangeRoleOfAUserInAProject200Response struct for ChangeRoleOfAUserInAProject200Response
type ChangeRoleOfAUserInAProject200Response struct {
	Id *float32 `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	Email *string `json:"email,omitempty"`
	Features []interface{} `json:"features,omitempty"`
	Expires interface{} `json:"expires,omitempty"`
	Created *string `json:"created,omitempty"`
	Reason *string `json:"reason,omitempty"`
	Role *string `json:"role,omitempty"`
	Status *string `json:"status,omitempty"`
	Invitor *ListMaintainersInvitations200ResponseInnerUser `json:"invitor,omitempty"`
	Approver interface{} `json:"approver,omitempty"`
}

// NewChangeRoleOfAUserInAProject200Response instantiates a new ChangeRoleOfAUserInAProject200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChangeRoleOfAUserInAProject200Response() *ChangeRoleOfAUserInAProject200Response {
	this := ChangeRoleOfAUserInAProject200Response{}
	return &this
}

// NewChangeRoleOfAUserInAProject200ResponseWithDefaults instantiates a new ChangeRoleOfAUserInAProject200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChangeRoleOfAUserInAProject200ResponseWithDefaults() *ChangeRoleOfAUserInAProject200Response {
	this := ChangeRoleOfAUserInAProject200Response{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ChangeRoleOfAUserInAProject200Response) GetId() float32 {
	if o == nil || IsNil(o.Id) {
		var ret float32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangeRoleOfAUserInAProject200Response) GetIdOk() (*float32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ChangeRoleOfAUserInAProject200Response) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given float32 and assigns it to the Id field.
func (o *ChangeRoleOfAUserInAProject200Response) SetId(v float32) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ChangeRoleOfAUserInAProject200Response) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangeRoleOfAUserInAProject200Response) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ChangeRoleOfAUserInAProject200Response) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ChangeRoleOfAUserInAProject200Response) SetName(v string) {
	o.Name = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *ChangeRoleOfAUserInAProject200Response) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangeRoleOfAUserInAProject200Response) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *ChangeRoleOfAUserInAProject200Response) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *ChangeRoleOfAUserInAProject200Response) SetEmail(v string) {
	o.Email = &v
}

// GetFeatures returns the Features field value if set, zero value otherwise.
func (o *ChangeRoleOfAUserInAProject200Response) GetFeatures() []interface{} {
	if o == nil || IsNil(o.Features) {
		var ret []interface{}
		return ret
	}
	return o.Features
}

// GetFeaturesOk returns a tuple with the Features field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangeRoleOfAUserInAProject200Response) GetFeaturesOk() ([]interface{}, bool) {
	if o == nil || IsNil(o.Features) {
		return nil, false
	}
	return o.Features, true
}

// HasFeatures returns a boolean if a field has been set.
func (o *ChangeRoleOfAUserInAProject200Response) HasFeatures() bool {
	if o != nil && !IsNil(o.Features) {
		return true
	}

	return false
}

// SetFeatures gets a reference to the given []interface{} and assigns it to the Features field.
func (o *ChangeRoleOfAUserInAProject200Response) SetFeatures(v []interface{}) {
	o.Features = v
}

// GetExpires returns the Expires field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ChangeRoleOfAUserInAProject200Response) GetExpires() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Expires
}

// GetExpiresOk returns a tuple with the Expires field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ChangeRoleOfAUserInAProject200Response) GetExpiresOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Expires) {
		return nil, false
	}
	return &o.Expires, true
}

// HasExpires returns a boolean if a field has been set.
func (o *ChangeRoleOfAUserInAProject200Response) HasExpires() bool {
	if o != nil && !IsNil(o.Expires) {
		return true
	}

	return false
}

// SetExpires gets a reference to the given interface{} and assigns it to the Expires field.
func (o *ChangeRoleOfAUserInAProject200Response) SetExpires(v interface{}) {
	o.Expires = v
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *ChangeRoleOfAUserInAProject200Response) GetCreated() string {
	if o == nil || IsNil(o.Created) {
		var ret string
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangeRoleOfAUserInAProject200Response) GetCreatedOk() (*string, bool) {
	if o == nil || IsNil(o.Created) {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *ChangeRoleOfAUserInAProject200Response) HasCreated() bool {
	if o != nil && !IsNil(o.Created) {
		return true
	}

	return false
}

// SetCreated gets a reference to the given string and assigns it to the Created field.
func (o *ChangeRoleOfAUserInAProject200Response) SetCreated(v string) {
	o.Created = &v
}

// GetReason returns the Reason field value if set, zero value otherwise.
func (o *ChangeRoleOfAUserInAProject200Response) GetReason() string {
	if o == nil || IsNil(o.Reason) {
		var ret string
		return ret
	}
	return *o.Reason
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangeRoleOfAUserInAProject200Response) GetReasonOk() (*string, bool) {
	if o == nil || IsNil(o.Reason) {
		return nil, false
	}
	return o.Reason, true
}

// HasReason returns a boolean if a field has been set.
func (o *ChangeRoleOfAUserInAProject200Response) HasReason() bool {
	if o != nil && !IsNil(o.Reason) {
		return true
	}

	return false
}

// SetReason gets a reference to the given string and assigns it to the Reason field.
func (o *ChangeRoleOfAUserInAProject200Response) SetReason(v string) {
	o.Reason = &v
}

// GetRole returns the Role field value if set, zero value otherwise.
func (o *ChangeRoleOfAUserInAProject200Response) GetRole() string {
	if o == nil || IsNil(o.Role) {
		var ret string
		return ret
	}
	return *o.Role
}

// GetRoleOk returns a tuple with the Role field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangeRoleOfAUserInAProject200Response) GetRoleOk() (*string, bool) {
	if o == nil || IsNil(o.Role) {
		return nil, false
	}
	return o.Role, true
}

// HasRole returns a boolean if a field has been set.
func (o *ChangeRoleOfAUserInAProject200Response) HasRole() bool {
	if o != nil && !IsNil(o.Role) {
		return true
	}

	return false
}

// SetRole gets a reference to the given string and assigns it to the Role field.
func (o *ChangeRoleOfAUserInAProject200Response) SetRole(v string) {
	o.Role = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ChangeRoleOfAUserInAProject200Response) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangeRoleOfAUserInAProject200Response) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ChangeRoleOfAUserInAProject200Response) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *ChangeRoleOfAUserInAProject200Response) SetStatus(v string) {
	o.Status = &v
}

// GetInvitor returns the Invitor field value if set, zero value otherwise.
func (o *ChangeRoleOfAUserInAProject200Response) GetInvitor() ListMaintainersInvitations200ResponseInnerUser {
	if o == nil || IsNil(o.Invitor) {
		var ret ListMaintainersInvitations200ResponseInnerUser
		return ret
	}
	return *o.Invitor
}

// GetInvitorOk returns a tuple with the Invitor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangeRoleOfAUserInAProject200Response) GetInvitorOk() (*ListMaintainersInvitations200ResponseInnerUser, bool) {
	if o == nil || IsNil(o.Invitor) {
		return nil, false
	}
	return o.Invitor, true
}

// HasInvitor returns a boolean if a field has been set.
func (o *ChangeRoleOfAUserInAProject200Response) HasInvitor() bool {
	if o != nil && !IsNil(o.Invitor) {
		return true
	}

	return false
}

// SetInvitor gets a reference to the given ListMaintainersInvitations200ResponseInnerUser and assigns it to the Invitor field.
func (o *ChangeRoleOfAUserInAProject200Response) SetInvitor(v ListMaintainersInvitations200ResponseInnerUser) {
	o.Invitor = &v
}

// GetApprover returns the Approver field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ChangeRoleOfAUserInAProject200Response) GetApprover() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Approver
}

// GetApproverOk returns a tuple with the Approver field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ChangeRoleOfAUserInAProject200Response) GetApproverOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Approver) {
		return nil, false
	}
	return &o.Approver, true
}

// HasApprover returns a boolean if a field has been set.
func (o *ChangeRoleOfAUserInAProject200Response) HasApprover() bool {
	if o != nil && !IsNil(o.Approver) {
		return true
	}

	return false
}

// SetApprover gets a reference to the given interface{} and assigns it to the Approver field.
func (o *ChangeRoleOfAUserInAProject200Response) SetApprover(v interface{}) {
	o.Approver = v
}

func (o ChangeRoleOfAUserInAProject200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChangeRoleOfAUserInAProject200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !IsNil(o.Features) {
		toSerialize["features"] = o.Features
	}
	if o.Expires != nil {
		toSerialize["expires"] = o.Expires
	}
	if !IsNil(o.Created) {
		toSerialize["created"] = o.Created
	}
	if !IsNil(o.Reason) {
		toSerialize["reason"] = o.Reason
	}
	if !IsNil(o.Role) {
		toSerialize["role"] = o.Role
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Invitor) {
		toSerialize["invitor"] = o.Invitor
	}
	if o.Approver != nil {
		toSerialize["approver"] = o.Approver
	}
	return toSerialize, nil
}

type NullableChangeRoleOfAUserInAProject200Response struct {
	value *ChangeRoleOfAUserInAProject200Response
	isSet bool
}

func (v NullableChangeRoleOfAUserInAProject200Response) Get() *ChangeRoleOfAUserInAProject200Response {
	return v.value
}

func (v *NullableChangeRoleOfAUserInAProject200Response) Set(val *ChangeRoleOfAUserInAProject200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableChangeRoleOfAUserInAProject200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableChangeRoleOfAUserInAProject200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChangeRoleOfAUserInAProject200Response(val *ChangeRoleOfAUserInAProject200Response) *NullableChangeRoleOfAUserInAProject200Response {
	return &NullableChangeRoleOfAUserInAProject200Response{value: val, isSet: true}
}

func (v NullableChangeRoleOfAUserInAProject200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChangeRoleOfAUserInAProject200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


