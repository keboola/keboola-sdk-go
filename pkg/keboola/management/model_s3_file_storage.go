/*
Manage API

The Keboola Connection Management API covers all tasks required for managing projects, as well as some super admin features for controlling and monitoring Keboola Connection.  ## Projects Management  * Create, modify and delete maintainers, organizations and projects  * Move projects between organizations  * Define project limits  * Provision Redshift and other Storage backends  * Access project management activity log  ## Projects Monitoring  * Monitoring of projects over organizations and maintainers  ## Super User Control and Monitoring  * UI release and deployment  * Components management  * Storage and Syrup jobs monitoring (will be provided by Syrup utilizing new tokens for authorization)  * Final project delete  * Workers start/shutdown, etc.  ## Authentication  The API supports authentication by a personal access token, which can be retrieved in [Account Settings](https://connection.keboola.com/admin/account/change-password) in Keboola Connection. An access token is tied to an administrator and its permissions are derived from their permissions. When the administrator is disabled or deleted, all their tokens become invalid too.  ## Token Types  There are the following types of tokens:  | Name | Tied to User | Token string is available only on create | Description  | | ------------- | ------------- | ------------------- | ----- | | user | Yes | Yes |Full access to maintainers, organizations and projects. Access is limited only to resources which are available for the token user.| | super | No | Yes | KBC management. Limited scopes can be specified `super_ui_deploy`, `super_monitoring`, ...  |

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the S3FileStorage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &S3FileStorage{}

// S3FileStorage struct for S3FileStorage
type S3FileStorage struct {
	AwsKey string `json:"awsKey"`
	FilesBucket string `json:"filesBucket"`
	Region string `json:"region"`
	// Associated AWS account owner
	Owner string `json:"owner"`
	Id string `json:"id"`
	IsDefault *string `json:"isDefault,omitempty"`
	Provider *string `json:"provider,omitempty"`
	// 06-17T15:07:48+01:00
	Created *string `json:"created,omitempty"`
	Creator *ABSCreatedAllOfCreator `json:"creator,omitempty"`
}

type _S3FileStorage S3FileStorage

// NewS3FileStorage instantiates a new S3FileStorage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewS3FileStorage(awsKey string, filesBucket string, region string, owner string, id string) *S3FileStorage {
	this := S3FileStorage{}
	this.AwsKey = awsKey
	this.FilesBucket = filesBucket
	this.Region = region
	this.Owner = owner
	this.Id = id
	return &this
}

// NewS3FileStorageWithDefaults instantiates a new S3FileStorage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewS3FileStorageWithDefaults() *S3FileStorage {
	this := S3FileStorage{}
	return &this
}

// GetAwsKey returns the AwsKey field value
func (o *S3FileStorage) GetAwsKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AwsKey
}

// GetAwsKeyOk returns a tuple with the AwsKey field value
// and a boolean to check if the value has been set.
func (o *S3FileStorage) GetAwsKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AwsKey, true
}

// SetAwsKey sets field value
func (o *S3FileStorage) SetAwsKey(v string) {
	o.AwsKey = v
}

// GetFilesBucket returns the FilesBucket field value
func (o *S3FileStorage) GetFilesBucket() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FilesBucket
}

// GetFilesBucketOk returns a tuple with the FilesBucket field value
// and a boolean to check if the value has been set.
func (o *S3FileStorage) GetFilesBucketOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FilesBucket, true
}

// SetFilesBucket sets field value
func (o *S3FileStorage) SetFilesBucket(v string) {
	o.FilesBucket = v
}

// GetRegion returns the Region field value
func (o *S3FileStorage) GetRegion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Region
}

// GetRegionOk returns a tuple with the Region field value
// and a boolean to check if the value has been set.
func (o *S3FileStorage) GetRegionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Region, true
}

// SetRegion sets field value
func (o *S3FileStorage) SetRegion(v string) {
	o.Region = v
}

// GetOwner returns the Owner field value
func (o *S3FileStorage) GetOwner() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value
// and a boolean to check if the value has been set.
func (o *S3FileStorage) GetOwnerOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Owner, true
}

// SetOwner sets field value
func (o *S3FileStorage) SetOwner(v string) {
	o.Owner = v
}

// GetId returns the Id field value
func (o *S3FileStorage) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *S3FileStorage) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *S3FileStorage) SetId(v string) {
	o.Id = v
}

// GetIsDefault returns the IsDefault field value if set, zero value otherwise.
func (o *S3FileStorage) GetIsDefault() string {
	if o == nil || IsNil(o.IsDefault) {
		var ret string
		return ret
	}
	return *o.IsDefault
}

// GetIsDefaultOk returns a tuple with the IsDefault field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *S3FileStorage) GetIsDefaultOk() (*string, bool) {
	if o == nil || IsNil(o.IsDefault) {
		return nil, false
	}
	return o.IsDefault, true
}

// HasIsDefault returns a boolean if a field has been set.
func (o *S3FileStorage) HasIsDefault() bool {
	if o != nil && !IsNil(o.IsDefault) {
		return true
	}

	return false
}

// SetIsDefault gets a reference to the given string and assigns it to the IsDefault field.
func (o *S3FileStorage) SetIsDefault(v string) {
	o.IsDefault = &v
}

// GetProvider returns the Provider field value if set, zero value otherwise.
func (o *S3FileStorage) GetProvider() string {
	if o == nil || IsNil(o.Provider) {
		var ret string
		return ret
	}
	return *o.Provider
}

// GetProviderOk returns a tuple with the Provider field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *S3FileStorage) GetProviderOk() (*string, bool) {
	if o == nil || IsNil(o.Provider) {
		return nil, false
	}
	return o.Provider, true
}

// HasProvider returns a boolean if a field has been set.
func (o *S3FileStorage) HasProvider() bool {
	if o != nil && !IsNil(o.Provider) {
		return true
	}

	return false
}

// SetProvider gets a reference to the given string and assigns it to the Provider field.
func (o *S3FileStorage) SetProvider(v string) {
	o.Provider = &v
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *S3FileStorage) GetCreated() string {
	if o == nil || IsNil(o.Created) {
		var ret string
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *S3FileStorage) GetCreatedOk() (*string, bool) {
	if o == nil || IsNil(o.Created) {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *S3FileStorage) HasCreated() bool {
	if o != nil && !IsNil(o.Created) {
		return true
	}

	return false
}

// SetCreated gets a reference to the given string and assigns it to the Created field.
func (o *S3FileStorage) SetCreated(v string) {
	o.Created = &v
}

// GetCreator returns the Creator field value if set, zero value otherwise.
func (o *S3FileStorage) GetCreator() ABSCreatedAllOfCreator {
	if o == nil || IsNil(o.Creator) {
		var ret ABSCreatedAllOfCreator
		return ret
	}
	return *o.Creator
}

// GetCreatorOk returns a tuple with the Creator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *S3FileStorage) GetCreatorOk() (*ABSCreatedAllOfCreator, bool) {
	if o == nil || IsNil(o.Creator) {
		return nil, false
	}
	return o.Creator, true
}

// HasCreator returns a boolean if a field has been set.
func (o *S3FileStorage) HasCreator() bool {
	if o != nil && !IsNil(o.Creator) {
		return true
	}

	return false
}

// SetCreator gets a reference to the given ABSCreatedAllOfCreator and assigns it to the Creator field.
func (o *S3FileStorage) SetCreator(v ABSCreatedAllOfCreator) {
	o.Creator = &v
}

func (o S3FileStorage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o S3FileStorage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["awsKey"] = o.AwsKey
	toSerialize["filesBucket"] = o.FilesBucket
	toSerialize["region"] = o.Region
	toSerialize["owner"] = o.Owner
	toSerialize["id"] = o.Id
	if !IsNil(o.IsDefault) {
		toSerialize["isDefault"] = o.IsDefault
	}
	if !IsNil(o.Provider) {
		toSerialize["provider"] = o.Provider
	}
	if !IsNil(o.Created) {
		toSerialize["created"] = o.Created
	}
	if !IsNil(o.Creator) {
		toSerialize["creator"] = o.Creator
	}
	return toSerialize, nil
}

func (o *S3FileStorage) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"awsKey",
		"filesBucket",
		"region",
		"owner",
		"id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varS3FileStorage := _S3FileStorage{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varS3FileStorage)

	if err != nil {
		return err
	}

	*o = S3FileStorage(varS3FileStorage)

	return err
}

type NullableS3FileStorage struct {
	value *S3FileStorage
	isSet bool
}

func (v NullableS3FileStorage) Get() *S3FileStorage {
	return v.value
}

func (v *NullableS3FileStorage) Set(val *S3FileStorage) {
	v.value = val
	v.isSet = true
}

func (v NullableS3FileStorage) IsSet() bool {
	return v.isSet
}

func (v *NullableS3FileStorage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableS3FileStorage(val *S3FileStorage) *NullableS3FileStorage {
	return &NullableS3FileStorage{value: val, isSet: true}
}

func (v NullableS3FileStorage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableS3FileStorage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


