/*
Manage API

The Keboola Connection Management API covers all tasks required for managing projects, as well as some super admin features for controlling and monitoring Keboola Connection.  ## Projects Management  * Create, modify and delete maintainers, organizations and projects  * Move projects between organizations  * Define project limits  * Provision Redshift and other Storage backends  * Access project management activity log  ## Projects Monitoring  * Monitoring of projects over organizations and maintainers  ## Super User Control and Monitoring  * UI release and deployment  * Components management  * Storage and Syrup jobs monitoring (will be provided by Syrup utilizing new tokens for authorization)  * Final project delete  * Workers start/shutdown, etc.  ## Authentication  The API supports authentication by a personal access token, which can be retrieved in [Account Settings](https://connection.keboola.com/admin/account/change-password) in Keboola Connection. An access token is tied to an administrator and its permissions are derived from their permissions. When the administrator is disabled or deleted, all their tokens become invalid too.  ## Token Types  There are the following types of tokens:  | Name | Tied to User | Token string is available only on create | Description  | | ------------- | ------------- | ------------------- | ----- | | user | Yes | Yes |Full access to maintainers, organizations and projects. Access is limited only to resources which are available for the token user.| | super | No | Yes | KBC management. Limited scopes can be specified `super_ui_deploy`, `super_monitoring`, ...  |

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"encoding/json"
)

// checks if the RetrieveAnOrganization200ResponseProjectsInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RetrieveAnOrganization200ResponseProjectsInner{}

// RetrieveAnOrganization200ResponseProjectsInner struct for RetrieveAnOrganization200ResponseProjectsInner
type RetrieveAnOrganization200ResponseProjectsInner struct {
	Id *float32 `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	Created *string `json:"created,omitempty"`
}

// NewRetrieveAnOrganization200ResponseProjectsInner instantiates a new RetrieveAnOrganization200ResponseProjectsInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRetrieveAnOrganization200ResponseProjectsInner() *RetrieveAnOrganization200ResponseProjectsInner {
	this := RetrieveAnOrganization200ResponseProjectsInner{}
	return &this
}

// NewRetrieveAnOrganization200ResponseProjectsInnerWithDefaults instantiates a new RetrieveAnOrganization200ResponseProjectsInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRetrieveAnOrganization200ResponseProjectsInnerWithDefaults() *RetrieveAnOrganization200ResponseProjectsInner {
	this := RetrieveAnOrganization200ResponseProjectsInner{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *RetrieveAnOrganization200ResponseProjectsInner) GetId() float32 {
	if o == nil || IsNil(o.Id) {
		var ret float32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RetrieveAnOrganization200ResponseProjectsInner) GetIdOk() (*float32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *RetrieveAnOrganization200ResponseProjectsInner) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given float32 and assigns it to the Id field.
func (o *RetrieveAnOrganization200ResponseProjectsInner) SetId(v float32) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *RetrieveAnOrganization200ResponseProjectsInner) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RetrieveAnOrganization200ResponseProjectsInner) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *RetrieveAnOrganization200ResponseProjectsInner) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *RetrieveAnOrganization200ResponseProjectsInner) SetName(v string) {
	o.Name = &v
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *RetrieveAnOrganization200ResponseProjectsInner) GetCreated() string {
	if o == nil || IsNil(o.Created) {
		var ret string
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RetrieveAnOrganization200ResponseProjectsInner) GetCreatedOk() (*string, bool) {
	if o == nil || IsNil(o.Created) {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *RetrieveAnOrganization200ResponseProjectsInner) HasCreated() bool {
	if o != nil && !IsNil(o.Created) {
		return true
	}

	return false
}

// SetCreated gets a reference to the given string and assigns it to the Created field.
func (o *RetrieveAnOrganization200ResponseProjectsInner) SetCreated(v string) {
	o.Created = &v
}

func (o RetrieveAnOrganization200ResponseProjectsInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RetrieveAnOrganization200ResponseProjectsInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Created) {
		toSerialize["created"] = o.Created
	}
	return toSerialize, nil
}

type NullableRetrieveAnOrganization200ResponseProjectsInner struct {
	value *RetrieveAnOrganization200ResponseProjectsInner
	isSet bool
}

func (v NullableRetrieveAnOrganization200ResponseProjectsInner) Get() *RetrieveAnOrganization200ResponseProjectsInner {
	return v.value
}

func (v *NullableRetrieveAnOrganization200ResponseProjectsInner) Set(val *RetrieveAnOrganization200ResponseProjectsInner) {
	v.value = val
	v.isSet = true
}

func (v NullableRetrieveAnOrganization200ResponseProjectsInner) IsSet() bool {
	return v.isSet
}

func (v *NullableRetrieveAnOrganization200ResponseProjectsInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRetrieveAnOrganization200ResponseProjectsInner(val *RetrieveAnOrganization200ResponseProjectsInner) *NullableRetrieveAnOrganization200ResponseProjectsInner {
	return &NullableRetrieveAnOrganization200ResponseProjectsInner{value: val, isSet: true}
}

func (v NullableRetrieveAnOrganization200ResponseProjectsInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRetrieveAnOrganization200ResponseProjectsInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


