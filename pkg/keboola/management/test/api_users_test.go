/*
Manage API

Testing UsersAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package management

import (
	"context"
	"testing"

	openapiclient "github.com/keboola/keboola-sdk-go/pkg/keboola/management"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_management_UsersAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test UsersAPIService DisableMFAForUser", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var userIdOrEmail string

		httpRes, err := apiClient.UsersAPI.DisableMFAForUser(context.Background(), userIdOrEmail).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsersAPIService ListUserMetadata", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var userIdOrEmail string

		resp, httpRes, err := apiClient.UsersAPI.ListUserMetadata(context.Background(), userIdOrEmail).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsersAPIService RemoveSuperAdminPrivilegeFromUser", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var userIdOrEmail string

		resp, httpRes, err := apiClient.UsersAPI.RemoveSuperAdminPrivilegeFromUser(context.Background(), userIdOrEmail).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsersAPIService RemoveUser", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var userIdOrEmail string

		httpRes, err := apiClient.UsersAPI.RemoveUser(context.Background(), userIdOrEmail).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsersAPIService RemoveUserMetadata", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var userIdOrEmail string
		var metadataId string

		httpRes, err := apiClient.UsersAPI.RemoveUserMetadata(context.Background(), userIdOrEmail, metadataId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsersAPIService SetUserMetadata", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var userIdOrEmail string

		resp, httpRes, err := apiClient.UsersAPI.SetUserMetadata(context.Background(), userIdOrEmail).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsersAPIService UpdateAUser", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var userIdOrEmail string

		resp, httpRes, err := apiClient.UsersAPI.UpdateAUser(context.Background(), userIdOrEmail).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsersAPIService UserDetail", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var userIdOrEmail string

		resp, httpRes, err := apiClient.UsersAPI.UserDetail(context.Background(), userIdOrEmail).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
