/*
Manage API

Testing OrganizationsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package management

import (
	"context"
	"testing"

	openapiclient "github.com/keboola/keboola-sdk-go/v2/pkg/keboola/management"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_management_OrganizationsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test OrganizationsAPIService AddAUserToOrganization", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var organizationId float32

		httpRes, err := apiClient.OrganizationsAPI.AddAUserToOrganization(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationsAPIService CancelOrganizationInvitation", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var organizationId string
		var invitationId string

		httpRes, err := apiClient.OrganizationsAPI.CancelOrganizationInvitation(context.Background(), organizationId, invitationId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationsAPIService CreateAnOrganization", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var maintainerId float32

		resp, httpRes, err := apiClient.OrganizationsAPI.CreateAnOrganization(context.Background(), maintainerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationsAPIService DeleteAnOrganization", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var organizationId float32

		httpRes, err := apiClient.OrganizationsAPI.DeleteAnOrganization(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationsAPIService InviteAUserToAOrganization", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var organizationId string

		resp, httpRes, err := apiClient.OrganizationsAPI.InviteAUserToAOrganization(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationsAPIService JoinAOrganization", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var organizationId string

		httpRes, err := apiClient.OrganizationsAPI.JoinAOrganization(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationsAPIService ListMaintainersOrganizations", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var maintainerId float32

		httpRes, err := apiClient.OrganizationsAPI.ListMaintainersOrganizations(context.Background(), maintainerId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationsAPIService ListOrganizationInvitations", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var organizationId string

		resp, httpRes, err := apiClient.OrganizationsAPI.ListOrganizationInvitations(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationsAPIService ListOrganizationMetadata", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var organizationId string

		resp, httpRes, err := apiClient.OrganizationsAPI.ListOrganizationMetadata(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationsAPIService ListOrganizationUsers", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var organizationId float32

		resp, httpRes, err := apiClient.OrganizationsAPI.ListOrganizationUsers(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationsAPIService ListProjectUsersInOrganization", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var organizationId float32

		resp, httpRes, err := apiClient.OrganizationsAPI.ListProjectUsersInOrganization(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationsAPIService OrganizationInvitationDetail", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var organizationId string
		var invitationId string

		resp, httpRes, err := apiClient.OrganizationsAPI.OrganizationInvitationDetail(context.Background(), organizationId, invitationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationsAPIService RemoveAUserFromOrganization", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var organizationId float32
		var userId string

		httpRes, err := apiClient.OrganizationsAPI.RemoveAUserFromOrganization(context.Background(), organizationId, userId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationsAPIService RemoveOrganizationMetadata", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var organizationId string
		var metadataId string

		httpRes, err := apiClient.OrganizationsAPI.RemoveOrganizationMetadata(context.Background(), organizationId, metadataId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationsAPIService RequireMultiFactorAuthentication", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var organizationId string

		httpRes, err := apiClient.OrganizationsAPI.RequireMultiFactorAuthentication(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationsAPIService RetrieveAnOrganization", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var organizationId float32

		resp, httpRes, err := apiClient.OrganizationsAPI.RetrieveAnOrganization(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationsAPIService SetOrganizationMetadata", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var organizationId string

		resp, httpRes, err := apiClient.OrganizationsAPI.SetOrganizationMetadata(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationsAPIService UpdateAnOrganization", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var organizationId float32

		resp, httpRes, err := apiClient.OrganizationsAPI.UpdateAnOrganization(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
