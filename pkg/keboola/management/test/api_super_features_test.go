/*
Manage API

Testing SUPERFeaturesAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package management

import (
	"context"
	"testing"

	openapiclient "github.com/keboola/keboola-sdk-go/pkg/keboola/management"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_management_SUPERFeaturesAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test SUPERFeaturesAPIService AddAFeature", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var template string

		httpRes, err := apiClient.SUPERFeaturesAPI.AddAFeature(context.Background(), template).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SUPERFeaturesAPIService AddAProjectFeature", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectId string

		resp, httpRes, err := apiClient.SUPERFeaturesAPI.AddAProjectFeature(context.Background(), projectId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SUPERFeaturesAPIService AddAUserFeature", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var userIdOrEmail string

		resp, httpRes, err := apiClient.SUPERFeaturesAPI.AddAUserFeature(context.Background(), userIdOrEmail).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SUPERFeaturesAPIService CreateAFeature", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.SUPERFeaturesAPI.CreateAFeature(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SUPERFeaturesAPIService DeleteAFeature", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id float32

		httpRes, err := apiClient.SUPERFeaturesAPI.DeleteAFeature(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SUPERFeaturesAPIService ListFeatures", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var template string

		resp, httpRes, err := apiClient.SUPERFeaturesAPI.ListFeatures(context.Background(), template).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SUPERFeaturesAPIService RemoveAFeature", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var template string
		var feature string

		httpRes, err := apiClient.SUPERFeaturesAPI.RemoveAFeature(context.Background(), template, feature).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SUPERFeaturesAPIService RemoveAProjectFeature", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectId string
		var feature string

		httpRes, err := apiClient.SUPERFeaturesAPI.RemoveAProjectFeature(context.Background(), projectId, feature).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SUPERFeaturesAPIService RemoveAUserFeature", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var userIdOrEmail string
		var feature string

		resp, httpRes, err := apiClient.SUPERFeaturesAPI.RemoveAUserFeature(context.Background(), userIdOrEmail, feature).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SUPERFeaturesAPIService RetrieveAllFeatures", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var type_ string

		resp, httpRes, err := apiClient.SUPERFeaturesAPI.RetrieveAllFeatures(context.Background(), type_).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SUPERFeaturesAPIService RetrieveFeatureProjects", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id float32

		resp, httpRes, err := apiClient.SUPERFeaturesAPI.RetrieveFeatureProjects(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SUPERFeaturesAPIService RetrieveFeatureUsers", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id float32

		resp, httpRes, err := apiClient.SUPERFeaturesAPI.RetrieveFeatureUsers(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SUPERFeaturesAPIService RetrieveOneFeature", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id float32

		resp, httpRes, err := apiClient.SUPERFeaturesAPI.RetrieveOneFeature(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SUPERFeaturesAPIService UpdateAFeature", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id float32

		httpRes, err := apiClient.SUPERFeaturesAPI.UpdateAFeature(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
