/*
Manage API

Testing MaintainersAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package management

import (
	"context"
	"testing"

	openapiclient "github.com/keboola/keboola-sdk-go/v2/pkg/keboola/management"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_management_MaintainersAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test MaintainersAPIService AddAUserToMaintainer", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var maintainerId float32

		httpRes, err := apiClient.MaintainersAPI.AddAUserToMaintainer(context.Background(), maintainerId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MaintainersAPIService CancelMaintainerInvitation", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var maintainerId string
		var invitationId string

		httpRes, err := apiClient.MaintainersAPI.CancelMaintainerInvitation(context.Background(), maintainerId, invitationId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MaintainersAPIService CreateAMaintainer", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.MaintainersAPI.CreateAMaintainer(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MaintainersAPIService DeleteAMaintainer", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var maintainerId int32

		httpRes, err := apiClient.MaintainersAPI.DeleteAMaintainer(context.Background(), maintainerId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MaintainersAPIService InviteAUserToAMaintainer", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var maintainerId string

		resp, httpRes, err := apiClient.MaintainersAPI.InviteAUserToAMaintainer(context.Background(), maintainerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MaintainersAPIService ListMaintainerMetadata", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var maintainerId string

		httpRes, err := apiClient.MaintainersAPI.ListMaintainerMetadata(context.Background(), maintainerId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MaintainersAPIService ListMaintainerUsers", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var maintainerId float32

		resp, httpRes, err := apiClient.MaintainersAPI.ListMaintainerUsers(context.Background(), maintainerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MaintainersAPIService ListMaintainers", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.MaintainersAPI.ListMaintainers(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MaintainersAPIService ListMaintainersInvitations", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var maintainerId string

		resp, httpRes, err := apiClient.MaintainersAPI.ListMaintainersInvitations(context.Background(), maintainerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MaintainersAPIService MaintainerInvitationDetail", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var maintainerId string
		var invitationId string

		resp, httpRes, err := apiClient.MaintainersAPI.MaintainerInvitationDetail(context.Background(), maintainerId, invitationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MaintainersAPIService RemoveAUserFromMaintainer", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var maintainerId float32
		var userId string

		httpRes, err := apiClient.MaintainersAPI.RemoveAUserFromMaintainer(context.Background(), maintainerId, userId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MaintainersAPIService RemoveMaintainerMetadata", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var maintainerId string
		var metadataId string

		httpRes, err := apiClient.MaintainersAPI.RemoveMaintainerMetadata(context.Background(), maintainerId, metadataId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MaintainersAPIService RetrieveAMaintainer", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var maintainerId int32

		resp, httpRes, err := apiClient.MaintainersAPI.RetrieveAMaintainer(context.Background(), maintainerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MaintainersAPIService SetMaintainerMetadata", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var maintainerId string

		httpRes, err := apiClient.MaintainersAPI.SetMaintainerMetadata(context.Background(), maintainerId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MaintainersAPIService UpdateAMaintainer", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var maintainerId int32

		resp, httpRes, err := apiClient.MaintainersAPI.UpdateAMaintainer(context.Background(), maintainerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
