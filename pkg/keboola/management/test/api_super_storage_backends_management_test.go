/*
Manage API

Testing SUPERStorageBackendsManagementAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package management

import (
	"context"
	"testing"

	openapiclient "github.com/keboola/keboola-sdk-go/v2/pkg/keboola/management"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_management_SUPERStorageBackendsManagementAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test SUPERStorageBackendsManagementAPIService BackendDetail", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var backendId string

		resp, httpRes, err := apiClient.SUPERStorageBackendsManagementAPI.BackendDetail(context.Background(), backendId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SUPERStorageBackendsManagementAPIService CreateANewBackend", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.SUPERStorageBackendsManagementAPI.CreateANewBackend(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SUPERStorageBackendsManagementAPIService CreateANewBigQueryBackend", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.SUPERStorageBackendsManagementAPI.CreateANewBigQueryBackend(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SUPERStorageBackendsManagementAPIService DeleteBackend", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var backendId string

		httpRes, err := apiClient.SUPERStorageBackendsManagementAPI.DeleteBackend(context.Background(), backendId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SUPERStorageBackendsManagementAPIService ListBackends", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.SUPERStorageBackendsManagementAPI.ListBackends(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SUPERStorageBackendsManagementAPIService UpdateBackend", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var backendId string

		resp, httpRes, err := apiClient.SUPERStorageBackendsManagementAPI.UpdateBackend(context.Background(), backendId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SUPERStorageBackendsManagementAPIService UpdateBigQueryBackend", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var backendId string

		resp, httpRes, err := apiClient.SUPERStorageBackendsManagementAPI.UpdateBigQueryBackend(context.Background(), backendId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
