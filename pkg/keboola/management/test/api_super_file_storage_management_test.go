/*
Manage API

Testing SUPERFileStorageManagementAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package management

import (
	"context"
	"testing"

	openapiclient "github.com/keboola/keboola-sdk-go/v2/pkg/keboola/management"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_management_SUPERFileStorageManagementAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test SUPERFileStorageManagementAPIService CreateNewAWSS3Storage", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.SUPERFileStorageManagementAPI.CreateNewAWSS3Storage(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SUPERFileStorageManagementAPIService CreateNewAzureBlobStorage", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.SUPERFileStorageManagementAPI.CreateNewAzureBlobStorage(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SUPERFileStorageManagementAPIService CreateNewGoogleCloudStorage", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.SUPERFileStorageManagementAPI.CreateNewGoogleCloudStorage(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SUPERFileStorageManagementAPIService ListAzureBlobStorage", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.SUPERFileStorageManagementAPI.ListAzureBlobStorage(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SUPERFileStorageManagementAPIService ListGoogleCloudStorage", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.SUPERFileStorageManagementAPI.ListGoogleCloudStorage(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SUPERFileStorageManagementAPIService ListStorages", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.SUPERFileStorageManagementAPI.ListStorages(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SUPERFileStorageManagementAPIService SetBlobStorageAsDefault", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var fileStorageId string

		resp, httpRes, err := apiClient.SUPERFileStorageManagementAPI.SetBlobStorageAsDefault(context.Background(), fileStorageId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SUPERFileStorageManagementAPIService SetS3StorageAsDefault", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var fileStorageId string

		resp, httpRes, err := apiClient.SUPERFileStorageManagementAPI.SetS3StorageAsDefault(context.Background(), fileStorageId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
