/*
Manage API

Testing MyAccountAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package management

import (
	"context"
	"testing"

	openapiclient "github.com/keboola/keboola-sdk-go/pkg/keboola/management"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_management_MyAccountAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test MyAccountAPIService AcceptAMaintainerInvitation", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var invitationId float32

		httpRes, err := apiClient.MyAccountAPI.AcceptAMaintainerInvitation(context.Background(), invitationId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MyAccountAPIService AcceptAProjectInvitation", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var invitationId float32

		httpRes, err := apiClient.MyAccountAPI.AcceptAProjectInvitation(context.Background(), invitationId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MyAccountAPIService AcceptAnOrganizationInvitation", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var invitationId float32

		httpRes, err := apiClient.MyAccountAPI.AcceptAnOrganizationInvitation(context.Background(), invitationId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MyAccountAPIService CancelAJoinRequest", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var joinRequestId int32

		httpRes, err := apiClient.MyAccountAPI.CancelAJoinRequest(context.Background(), joinRequestId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MyAccountAPIService CreateProject", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.MyAccountAPI.CreateProject(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MyAccountAPIService DeclineAInvitation", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var invitationId float32

		httpRes, err := apiClient.MyAccountAPI.DeclineAInvitation(context.Background(), invitationId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MyAccountAPIService ListMyJoinRequests", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.MyAccountAPI.ListMyJoinRequests(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MyAccountAPIService ListMyMaintainerInvitations", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.MyAccountAPI.ListMyMaintainerInvitations(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MyAccountAPIService ListMyOrganizationInvitations", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.MyAccountAPI.ListMyOrganizationInvitations(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MyAccountAPIService ListMyProjectInvitations", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.MyAccountAPI.ListMyProjectInvitations(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MyAccountAPIService ListUsedPromoCodes", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.MyAccountAPI.ListUsedPromoCodes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MyAccountAPIService MyJoinRequestDetail", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var joinRequestId int32

		resp, httpRes, err := apiClient.MyAccountAPI.MyJoinRequestDetail(context.Background(), joinRequestId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MyAccountAPIService MyMaintainerInvitationDetail", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var invitationId float32

		resp, httpRes, err := apiClient.MyAccountAPI.MyMaintainerInvitationDetail(context.Background(), invitationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MyAccountAPIService MyOrganizationInvitationDetail", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var invitationId float32

		resp, httpRes, err := apiClient.MyAccountAPI.MyOrganizationInvitationDetail(context.Background(), invitationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MyAccountAPIService MyProjectInvitationDetail", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var invitationId float32

		resp, httpRes, err := apiClient.MyAccountAPI.MyProjectInvitationDetail(context.Background(), invitationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
