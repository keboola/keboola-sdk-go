/*
Manage API

The Keboola Connection Management API covers all tasks required for managing projects, as well as some super admin features for controlling and monitoring Keboola Connection.  ## Projects Management  * Create, modify and delete maintainers, organizations and projects  * Move projects between organizations  * Define project limits  * Provision Redshift and other Storage backends  * Access project management activity log  ## Projects Monitoring  * Monitoring of projects over organizations and maintainers  ## Super User Control and Monitoring  * UI release and deployment  * Components management  * Storage and Syrup jobs monitoring (will be provided by Syrup utilizing new tokens for authorization)  * Final project delete  * Workers start/shutdown, etc.  ## Authentication  The API supports authentication by a personal access token, which can be retrieved in [Account Settings](https://connection.keboola.com/admin/account/change-password) in Keboola Connection. An access token is tied to an administrator and its permissions are derived from their permissions. When the administrator is disabled or deleted, all their tokens become invalid too.  ## Token Types  There are the following types of tokens:  | Name | Tied to User | Token string is available only on create | Description  | | ------------- | ------------- | ------------------- | ----- | | user | Yes | Yes |Full access to maintainers, organizations and projects. Access is limited only to resources which are available for the token user.| | super | No | Yes | KBC management. Limited scopes can be specified `super_ui_deploy`, `super_monitoring`, ...  |

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SetBlobStorageAsDefault200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SetBlobStorageAsDefault200Response{}

// SetBlobStorageAsDefault200Response struct for SetBlobStorageAsDefault200Response
type SetBlobStorageAsDefault200Response struct {
	AccountName string `json:"accountName"`
	// of-container (required)
	ContainerName *string `json:"containerName,omitempty"`
	Owner string `json:"owner"`
	Id *string `json:"id,omitempty"`
	IsDefault *string `json:"isDefault,omitempty"`
}

type _SetBlobStorageAsDefault200Response SetBlobStorageAsDefault200Response

// NewSetBlobStorageAsDefault200Response instantiates a new SetBlobStorageAsDefault200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSetBlobStorageAsDefault200Response(accountName string, owner string) *SetBlobStorageAsDefault200Response {
	this := SetBlobStorageAsDefault200Response{}
	this.AccountName = accountName
	this.Owner = owner
	return &this
}

// NewSetBlobStorageAsDefault200ResponseWithDefaults instantiates a new SetBlobStorageAsDefault200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSetBlobStorageAsDefault200ResponseWithDefaults() *SetBlobStorageAsDefault200Response {
	this := SetBlobStorageAsDefault200Response{}
	return &this
}

// GetAccountName returns the AccountName field value
func (o *SetBlobStorageAsDefault200Response) GetAccountName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AccountName
}

// GetAccountNameOk returns a tuple with the AccountName field value
// and a boolean to check if the value has been set.
func (o *SetBlobStorageAsDefault200Response) GetAccountNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccountName, true
}

// SetAccountName sets field value
func (o *SetBlobStorageAsDefault200Response) SetAccountName(v string) {
	o.AccountName = v
}

// GetContainerName returns the ContainerName field value if set, zero value otherwise.
func (o *SetBlobStorageAsDefault200Response) GetContainerName() string {
	if o == nil || IsNil(o.ContainerName) {
		var ret string
		return ret
	}
	return *o.ContainerName
}

// GetContainerNameOk returns a tuple with the ContainerName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SetBlobStorageAsDefault200Response) GetContainerNameOk() (*string, bool) {
	if o == nil || IsNil(o.ContainerName) {
		return nil, false
	}
	return o.ContainerName, true
}

// HasContainerName returns a boolean if a field has been set.
func (o *SetBlobStorageAsDefault200Response) HasContainerName() bool {
	if o != nil && !IsNil(o.ContainerName) {
		return true
	}

	return false
}

// SetContainerName gets a reference to the given string and assigns it to the ContainerName field.
func (o *SetBlobStorageAsDefault200Response) SetContainerName(v string) {
	o.ContainerName = &v
}

// GetOwner returns the Owner field value
func (o *SetBlobStorageAsDefault200Response) GetOwner() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value
// and a boolean to check if the value has been set.
func (o *SetBlobStorageAsDefault200Response) GetOwnerOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Owner, true
}

// SetOwner sets field value
func (o *SetBlobStorageAsDefault200Response) SetOwner(v string) {
	o.Owner = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SetBlobStorageAsDefault200Response) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SetBlobStorageAsDefault200Response) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SetBlobStorageAsDefault200Response) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *SetBlobStorageAsDefault200Response) SetId(v string) {
	o.Id = &v
}

// GetIsDefault returns the IsDefault field value if set, zero value otherwise.
func (o *SetBlobStorageAsDefault200Response) GetIsDefault() string {
	if o == nil || IsNil(o.IsDefault) {
		var ret string
		return ret
	}
	return *o.IsDefault
}

// GetIsDefaultOk returns a tuple with the IsDefault field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SetBlobStorageAsDefault200Response) GetIsDefaultOk() (*string, bool) {
	if o == nil || IsNil(o.IsDefault) {
		return nil, false
	}
	return o.IsDefault, true
}

// HasIsDefault returns a boolean if a field has been set.
func (o *SetBlobStorageAsDefault200Response) HasIsDefault() bool {
	if o != nil && !IsNil(o.IsDefault) {
		return true
	}

	return false
}

// SetIsDefault gets a reference to the given string and assigns it to the IsDefault field.
func (o *SetBlobStorageAsDefault200Response) SetIsDefault(v string) {
	o.IsDefault = &v
}

func (o SetBlobStorageAsDefault200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SetBlobStorageAsDefault200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["accountName"] = o.AccountName
	if !IsNil(o.ContainerName) {
		toSerialize["containerName"] = o.ContainerName
	}
	toSerialize["owner"] = o.Owner
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.IsDefault) {
		toSerialize["isDefault"] = o.IsDefault
	}
	return toSerialize, nil
}

func (o *SetBlobStorageAsDefault200Response) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"accountName",
		"owner",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSetBlobStorageAsDefault200Response := _SetBlobStorageAsDefault200Response{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSetBlobStorageAsDefault200Response)

	if err != nil {
		return err
	}

	*o = SetBlobStorageAsDefault200Response(varSetBlobStorageAsDefault200Response)

	return err
}

type NullableSetBlobStorageAsDefault200Response struct {
	value *SetBlobStorageAsDefault200Response
	isSet bool
}

func (v NullableSetBlobStorageAsDefault200Response) Get() *SetBlobStorageAsDefault200Response {
	return v.value
}

func (v *NullableSetBlobStorageAsDefault200Response) Set(val *SetBlobStorageAsDefault200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableSetBlobStorageAsDefault200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableSetBlobStorageAsDefault200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSetBlobStorageAsDefault200Response(val *SetBlobStorageAsDefault200Response) *NullableSetBlobStorageAsDefault200Response {
	return &NullableSetBlobStorageAsDefault200Response{value: val, isSet: true}
}

func (v NullableSetBlobStorageAsDefault200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSetBlobStorageAsDefault200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


