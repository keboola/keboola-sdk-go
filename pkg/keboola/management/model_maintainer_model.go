/*
Manage API

The Keboola Connection Management API covers all tasks required for managing projects, as well as some super admin features for controlling and monitoring Keboola Connection.  ## Projects Management  * Create, modify and delete maintainers, organizations and projects  * Move projects between organizations  * Define project limits  * Provision Redshift and other Storage backends  * Access project management activity log  ## Projects Monitoring  * Monitoring of projects over organizations and maintainers  ## Super User Control and Monitoring  * UI release and deployment  * Components management  * Storage and Syrup jobs monitoring (will be provided by Syrup utilizing new tokens for authorization)  * Final project delete  * Workers start/shutdown, etc.  ## Authentication  The API supports authentication by a personal access token, which can be retrieved in [Account Settings](https://connection.keboola.com/admin/account/change-password) in Keboola Connection. An access token is tied to an administrator and its permissions are derived from their permissions. When the administrator is disabled or deleted, all their tokens become invalid too.  ## Token Types  There are the following types of tokens:  | Name | Tied to User | Token string is available only on create | Description  | | ------------- | ------------- | ------------------- | ----- | | user | Yes | Yes |Full access to maintainers, organizations and projects. Access is limited only to resources which are available for the token user.| | super | No | Yes | KBC management. Limited scopes can be specified `super_ui_deploy`, `super_monitoring`, ...  |

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"encoding/json"
)

// checks if the MaintainerModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MaintainerModel{}

// MaintainerModel struct for MaintainerModel
type MaintainerModel struct {
	Id *float32 `json:"id,omitempty"`
	Created *string `json:"created,omitempty"`
	Url *string `json:"url,omitempty"`
	DefaultConnectionMysqlId *float32 `json:"defaultConnectionMysqlId,omitempty"`
	DefaultConnectionRedshiftId *float32 `json:"defaultConnectionRedshiftId,omitempty"`
	DefaultConnectionSnowflakeId *float32 `json:"defaultConnectionSnowflakeId,omitempty"`
	DefaultConnectionSynapseId *float32 `json:"defaultConnectionSynapseId,omitempty"`
	DefaultConnectionExasolId *float32 `json:"defaultConnectionExasolId,omitempty"`
	DefaultConnectionTeradataId *float32 `json:"defaultConnectionTeradataId,omitempty"`
	DefaultFileStorageId *float32 `json:"defaultFileStorageId,omitempty"`
	ZendeskUrl *string `json:"zendeskUrl,omitempty"`
}

// NewMaintainerModel instantiates a new MaintainerModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMaintainerModel() *MaintainerModel {
	this := MaintainerModel{}
	return &this
}

// NewMaintainerModelWithDefaults instantiates a new MaintainerModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMaintainerModelWithDefaults() *MaintainerModel {
	this := MaintainerModel{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *MaintainerModel) GetId() float32 {
	if o == nil || IsNil(o.Id) {
		var ret float32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MaintainerModel) GetIdOk() (*float32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *MaintainerModel) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given float32 and assigns it to the Id field.
func (o *MaintainerModel) SetId(v float32) {
	o.Id = &v
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *MaintainerModel) GetCreated() string {
	if o == nil || IsNil(o.Created) {
		var ret string
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MaintainerModel) GetCreatedOk() (*string, bool) {
	if o == nil || IsNil(o.Created) {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *MaintainerModel) HasCreated() bool {
	if o != nil && !IsNil(o.Created) {
		return true
	}

	return false
}

// SetCreated gets a reference to the given string and assigns it to the Created field.
func (o *MaintainerModel) SetCreated(v string) {
	o.Created = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *MaintainerModel) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MaintainerModel) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *MaintainerModel) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *MaintainerModel) SetUrl(v string) {
	o.Url = &v
}

// GetDefaultConnectionMysqlId returns the DefaultConnectionMysqlId field value if set, zero value otherwise.
func (o *MaintainerModel) GetDefaultConnectionMysqlId() float32 {
	if o == nil || IsNil(o.DefaultConnectionMysqlId) {
		var ret float32
		return ret
	}
	return *o.DefaultConnectionMysqlId
}

// GetDefaultConnectionMysqlIdOk returns a tuple with the DefaultConnectionMysqlId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MaintainerModel) GetDefaultConnectionMysqlIdOk() (*float32, bool) {
	if o == nil || IsNil(o.DefaultConnectionMysqlId) {
		return nil, false
	}
	return o.DefaultConnectionMysqlId, true
}

// HasDefaultConnectionMysqlId returns a boolean if a field has been set.
func (o *MaintainerModel) HasDefaultConnectionMysqlId() bool {
	if o != nil && !IsNil(o.DefaultConnectionMysqlId) {
		return true
	}

	return false
}

// SetDefaultConnectionMysqlId gets a reference to the given float32 and assigns it to the DefaultConnectionMysqlId field.
func (o *MaintainerModel) SetDefaultConnectionMysqlId(v float32) {
	o.DefaultConnectionMysqlId = &v
}

// GetDefaultConnectionRedshiftId returns the DefaultConnectionRedshiftId field value if set, zero value otherwise.
func (o *MaintainerModel) GetDefaultConnectionRedshiftId() float32 {
	if o == nil || IsNil(o.DefaultConnectionRedshiftId) {
		var ret float32
		return ret
	}
	return *o.DefaultConnectionRedshiftId
}

// GetDefaultConnectionRedshiftIdOk returns a tuple with the DefaultConnectionRedshiftId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MaintainerModel) GetDefaultConnectionRedshiftIdOk() (*float32, bool) {
	if o == nil || IsNil(o.DefaultConnectionRedshiftId) {
		return nil, false
	}
	return o.DefaultConnectionRedshiftId, true
}

// HasDefaultConnectionRedshiftId returns a boolean if a field has been set.
func (o *MaintainerModel) HasDefaultConnectionRedshiftId() bool {
	if o != nil && !IsNil(o.DefaultConnectionRedshiftId) {
		return true
	}

	return false
}

// SetDefaultConnectionRedshiftId gets a reference to the given float32 and assigns it to the DefaultConnectionRedshiftId field.
func (o *MaintainerModel) SetDefaultConnectionRedshiftId(v float32) {
	o.DefaultConnectionRedshiftId = &v
}

// GetDefaultConnectionSnowflakeId returns the DefaultConnectionSnowflakeId field value if set, zero value otherwise.
func (o *MaintainerModel) GetDefaultConnectionSnowflakeId() float32 {
	if o == nil || IsNil(o.DefaultConnectionSnowflakeId) {
		var ret float32
		return ret
	}
	return *o.DefaultConnectionSnowflakeId
}

// GetDefaultConnectionSnowflakeIdOk returns a tuple with the DefaultConnectionSnowflakeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MaintainerModel) GetDefaultConnectionSnowflakeIdOk() (*float32, bool) {
	if o == nil || IsNil(o.DefaultConnectionSnowflakeId) {
		return nil, false
	}
	return o.DefaultConnectionSnowflakeId, true
}

// HasDefaultConnectionSnowflakeId returns a boolean if a field has been set.
func (o *MaintainerModel) HasDefaultConnectionSnowflakeId() bool {
	if o != nil && !IsNil(o.DefaultConnectionSnowflakeId) {
		return true
	}

	return false
}

// SetDefaultConnectionSnowflakeId gets a reference to the given float32 and assigns it to the DefaultConnectionSnowflakeId field.
func (o *MaintainerModel) SetDefaultConnectionSnowflakeId(v float32) {
	o.DefaultConnectionSnowflakeId = &v
}

// GetDefaultConnectionSynapseId returns the DefaultConnectionSynapseId field value if set, zero value otherwise.
func (o *MaintainerModel) GetDefaultConnectionSynapseId() float32 {
	if o == nil || IsNil(o.DefaultConnectionSynapseId) {
		var ret float32
		return ret
	}
	return *o.DefaultConnectionSynapseId
}

// GetDefaultConnectionSynapseIdOk returns a tuple with the DefaultConnectionSynapseId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MaintainerModel) GetDefaultConnectionSynapseIdOk() (*float32, bool) {
	if o == nil || IsNil(o.DefaultConnectionSynapseId) {
		return nil, false
	}
	return o.DefaultConnectionSynapseId, true
}

// HasDefaultConnectionSynapseId returns a boolean if a field has been set.
func (o *MaintainerModel) HasDefaultConnectionSynapseId() bool {
	if o != nil && !IsNil(o.DefaultConnectionSynapseId) {
		return true
	}

	return false
}

// SetDefaultConnectionSynapseId gets a reference to the given float32 and assigns it to the DefaultConnectionSynapseId field.
func (o *MaintainerModel) SetDefaultConnectionSynapseId(v float32) {
	o.DefaultConnectionSynapseId = &v
}

// GetDefaultConnectionExasolId returns the DefaultConnectionExasolId field value if set, zero value otherwise.
func (o *MaintainerModel) GetDefaultConnectionExasolId() float32 {
	if o == nil || IsNil(o.DefaultConnectionExasolId) {
		var ret float32
		return ret
	}
	return *o.DefaultConnectionExasolId
}

// GetDefaultConnectionExasolIdOk returns a tuple with the DefaultConnectionExasolId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MaintainerModel) GetDefaultConnectionExasolIdOk() (*float32, bool) {
	if o == nil || IsNil(o.DefaultConnectionExasolId) {
		return nil, false
	}
	return o.DefaultConnectionExasolId, true
}

// HasDefaultConnectionExasolId returns a boolean if a field has been set.
func (o *MaintainerModel) HasDefaultConnectionExasolId() bool {
	if o != nil && !IsNil(o.DefaultConnectionExasolId) {
		return true
	}

	return false
}

// SetDefaultConnectionExasolId gets a reference to the given float32 and assigns it to the DefaultConnectionExasolId field.
func (o *MaintainerModel) SetDefaultConnectionExasolId(v float32) {
	o.DefaultConnectionExasolId = &v
}

// GetDefaultConnectionTeradataId returns the DefaultConnectionTeradataId field value if set, zero value otherwise.
func (o *MaintainerModel) GetDefaultConnectionTeradataId() float32 {
	if o == nil || IsNil(o.DefaultConnectionTeradataId) {
		var ret float32
		return ret
	}
	return *o.DefaultConnectionTeradataId
}

// GetDefaultConnectionTeradataIdOk returns a tuple with the DefaultConnectionTeradataId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MaintainerModel) GetDefaultConnectionTeradataIdOk() (*float32, bool) {
	if o == nil || IsNil(o.DefaultConnectionTeradataId) {
		return nil, false
	}
	return o.DefaultConnectionTeradataId, true
}

// HasDefaultConnectionTeradataId returns a boolean if a field has been set.
func (o *MaintainerModel) HasDefaultConnectionTeradataId() bool {
	if o != nil && !IsNil(o.DefaultConnectionTeradataId) {
		return true
	}

	return false
}

// SetDefaultConnectionTeradataId gets a reference to the given float32 and assigns it to the DefaultConnectionTeradataId field.
func (o *MaintainerModel) SetDefaultConnectionTeradataId(v float32) {
	o.DefaultConnectionTeradataId = &v
}

// GetDefaultFileStorageId returns the DefaultFileStorageId field value if set, zero value otherwise.
func (o *MaintainerModel) GetDefaultFileStorageId() float32 {
	if o == nil || IsNil(o.DefaultFileStorageId) {
		var ret float32
		return ret
	}
	return *o.DefaultFileStorageId
}

// GetDefaultFileStorageIdOk returns a tuple with the DefaultFileStorageId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MaintainerModel) GetDefaultFileStorageIdOk() (*float32, bool) {
	if o == nil || IsNil(o.DefaultFileStorageId) {
		return nil, false
	}
	return o.DefaultFileStorageId, true
}

// HasDefaultFileStorageId returns a boolean if a field has been set.
func (o *MaintainerModel) HasDefaultFileStorageId() bool {
	if o != nil && !IsNil(o.DefaultFileStorageId) {
		return true
	}

	return false
}

// SetDefaultFileStorageId gets a reference to the given float32 and assigns it to the DefaultFileStorageId field.
func (o *MaintainerModel) SetDefaultFileStorageId(v float32) {
	o.DefaultFileStorageId = &v
}

// GetZendeskUrl returns the ZendeskUrl field value if set, zero value otherwise.
func (o *MaintainerModel) GetZendeskUrl() string {
	if o == nil || IsNil(o.ZendeskUrl) {
		var ret string
		return ret
	}
	return *o.ZendeskUrl
}

// GetZendeskUrlOk returns a tuple with the ZendeskUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MaintainerModel) GetZendeskUrlOk() (*string, bool) {
	if o == nil || IsNil(o.ZendeskUrl) {
		return nil, false
	}
	return o.ZendeskUrl, true
}

// HasZendeskUrl returns a boolean if a field has been set.
func (o *MaintainerModel) HasZendeskUrl() bool {
	if o != nil && !IsNil(o.ZendeskUrl) {
		return true
	}

	return false
}

// SetZendeskUrl gets a reference to the given string and assigns it to the ZendeskUrl field.
func (o *MaintainerModel) SetZendeskUrl(v string) {
	o.ZendeskUrl = &v
}

func (o MaintainerModel) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MaintainerModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Created) {
		toSerialize["created"] = o.Created
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	if !IsNil(o.DefaultConnectionMysqlId) {
		toSerialize["defaultConnectionMysqlId"] = o.DefaultConnectionMysqlId
	}
	if !IsNil(o.DefaultConnectionRedshiftId) {
		toSerialize["defaultConnectionRedshiftId"] = o.DefaultConnectionRedshiftId
	}
	if !IsNil(o.DefaultConnectionSnowflakeId) {
		toSerialize["defaultConnectionSnowflakeId"] = o.DefaultConnectionSnowflakeId
	}
	if !IsNil(o.DefaultConnectionSynapseId) {
		toSerialize["defaultConnectionSynapseId"] = o.DefaultConnectionSynapseId
	}
	if !IsNil(o.DefaultConnectionExasolId) {
		toSerialize["defaultConnectionExasolId"] = o.DefaultConnectionExasolId
	}
	if !IsNil(o.DefaultConnectionTeradataId) {
		toSerialize["defaultConnectionTeradataId"] = o.DefaultConnectionTeradataId
	}
	if !IsNil(o.DefaultFileStorageId) {
		toSerialize["defaultFileStorageId"] = o.DefaultFileStorageId
	}
	if !IsNil(o.ZendeskUrl) {
		toSerialize["zendeskUrl"] = o.ZendeskUrl
	}
	return toSerialize, nil
}

type NullableMaintainerModel struct {
	value *MaintainerModel
	isSet bool
}

func (v NullableMaintainerModel) Get() *MaintainerModel {
	return v.value
}

func (v *NullableMaintainerModel) Set(val *MaintainerModel) {
	v.value = val
	v.isSet = true
}

func (v NullableMaintainerModel) IsSet() bool {
	return v.isSet
}

func (v *NullableMaintainerModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMaintainerModel(val *MaintainerModel) *NullableMaintainerModel {
	return &NullableMaintainerModel{value: val, isSet: true}
}

func (v NullableMaintainerModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMaintainerModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


