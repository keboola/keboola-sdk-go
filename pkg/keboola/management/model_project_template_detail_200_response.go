/*
Manage API

The Keboola Connection Management API covers all tasks required for managing projects, as well as some super admin features for controlling and monitoring Keboola Connection.  ## Projects Management  * Create, modify and delete maintainers, organizations and projects  * Move projects between organizations  * Define project limits  * Provision Redshift and other Storage backends  * Access project management activity log  ## Projects Monitoring  * Monitoring of projects over organizations and maintainers  ## Super User Control and Monitoring  * UI release and deployment  * Components management  * Storage and Syrup jobs monitoring (will be provided by Syrup utilizing new tokens for authorization)  * Final project delete  * Workers start/shutdown, etc.  ## Authentication  The API supports authentication by a personal access token, which can be retrieved in [Account Settings](https://connection.keboola.com/admin/account/change-password) in Keboola Connection. An access token is tied to an administrator and its permissions are derived from their permissions. When the administrator is disabled or deleted, all their tokens become invalid too.  ## Token Types  There are the following types of tokens:  | Name | Tied to User | Token string is available only on create | Description  | | ------------- | ------------- | ------------------- | ----- | | user | Yes | Yes |Full access to maintainers, organizations and projects. Access is limited only to resources which are available for the token user.| | super | No | Yes | KBC management. Limited scopes can be specified `super_ui_deploy`, `super_monitoring`, ...  |

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"encoding/json"
)

// checks if the ProjectTemplateDetail200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProjectTemplateDetail200Response{}

// ProjectTemplateDetail200Response struct for ProjectTemplateDetail200Response
type ProjectTemplateDetail200Response struct {
	Id *string `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	Description *string `json:"description,omitempty"`
	ExpirationDays *float32 `json:"expirationDays,omitempty"`
	BilledMonthlyPrice interface{} `json:"billedMonthlyPrice,omitempty"`
	HasTryModeOn *bool `json:"hasTryModeOn,omitempty"`
	DefaultBackend *string `json:"defaultBackend,omitempty"`
}

// NewProjectTemplateDetail200Response instantiates a new ProjectTemplateDetail200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProjectTemplateDetail200Response() *ProjectTemplateDetail200Response {
	this := ProjectTemplateDetail200Response{}
	return &this
}

// NewProjectTemplateDetail200ResponseWithDefaults instantiates a new ProjectTemplateDetail200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProjectTemplateDetail200ResponseWithDefaults() *ProjectTemplateDetail200Response {
	this := ProjectTemplateDetail200Response{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ProjectTemplateDetail200Response) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectTemplateDetail200Response) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ProjectTemplateDetail200Response) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ProjectTemplateDetail200Response) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ProjectTemplateDetail200Response) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectTemplateDetail200Response) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ProjectTemplateDetail200Response) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ProjectTemplateDetail200Response) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ProjectTemplateDetail200Response) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectTemplateDetail200Response) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ProjectTemplateDetail200Response) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ProjectTemplateDetail200Response) SetDescription(v string) {
	o.Description = &v
}

// GetExpirationDays returns the ExpirationDays field value if set, zero value otherwise.
func (o *ProjectTemplateDetail200Response) GetExpirationDays() float32 {
	if o == nil || IsNil(o.ExpirationDays) {
		var ret float32
		return ret
	}
	return *o.ExpirationDays
}

// GetExpirationDaysOk returns a tuple with the ExpirationDays field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectTemplateDetail200Response) GetExpirationDaysOk() (*float32, bool) {
	if o == nil || IsNil(o.ExpirationDays) {
		return nil, false
	}
	return o.ExpirationDays, true
}

// HasExpirationDays returns a boolean if a field has been set.
func (o *ProjectTemplateDetail200Response) HasExpirationDays() bool {
	if o != nil && !IsNil(o.ExpirationDays) {
		return true
	}

	return false
}

// SetExpirationDays gets a reference to the given float32 and assigns it to the ExpirationDays field.
func (o *ProjectTemplateDetail200Response) SetExpirationDays(v float32) {
	o.ExpirationDays = &v
}

// GetBilledMonthlyPrice returns the BilledMonthlyPrice field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProjectTemplateDetail200Response) GetBilledMonthlyPrice() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.BilledMonthlyPrice
}

// GetBilledMonthlyPriceOk returns a tuple with the BilledMonthlyPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProjectTemplateDetail200Response) GetBilledMonthlyPriceOk() (*interface{}, bool) {
	if o == nil || IsNil(o.BilledMonthlyPrice) {
		return nil, false
	}
	return &o.BilledMonthlyPrice, true
}

// HasBilledMonthlyPrice returns a boolean if a field has been set.
func (o *ProjectTemplateDetail200Response) HasBilledMonthlyPrice() bool {
	if o != nil && !IsNil(o.BilledMonthlyPrice) {
		return true
	}

	return false
}

// SetBilledMonthlyPrice gets a reference to the given interface{} and assigns it to the BilledMonthlyPrice field.
func (o *ProjectTemplateDetail200Response) SetBilledMonthlyPrice(v interface{}) {
	o.BilledMonthlyPrice = v
}

// GetHasTryModeOn returns the HasTryModeOn field value if set, zero value otherwise.
func (o *ProjectTemplateDetail200Response) GetHasTryModeOn() bool {
	if o == nil || IsNil(o.HasTryModeOn) {
		var ret bool
		return ret
	}
	return *o.HasTryModeOn
}

// GetHasTryModeOnOk returns a tuple with the HasTryModeOn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectTemplateDetail200Response) GetHasTryModeOnOk() (*bool, bool) {
	if o == nil || IsNil(o.HasTryModeOn) {
		return nil, false
	}
	return o.HasTryModeOn, true
}

// HasHasTryModeOn returns a boolean if a field has been set.
func (o *ProjectTemplateDetail200Response) HasHasTryModeOn() bool {
	if o != nil && !IsNil(o.HasTryModeOn) {
		return true
	}

	return false
}

// SetHasTryModeOn gets a reference to the given bool and assigns it to the HasTryModeOn field.
func (o *ProjectTemplateDetail200Response) SetHasTryModeOn(v bool) {
	o.HasTryModeOn = &v
}

// GetDefaultBackend returns the DefaultBackend field value if set, zero value otherwise.
func (o *ProjectTemplateDetail200Response) GetDefaultBackend() string {
	if o == nil || IsNil(o.DefaultBackend) {
		var ret string
		return ret
	}
	return *o.DefaultBackend
}

// GetDefaultBackendOk returns a tuple with the DefaultBackend field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectTemplateDetail200Response) GetDefaultBackendOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultBackend) {
		return nil, false
	}
	return o.DefaultBackend, true
}

// HasDefaultBackend returns a boolean if a field has been set.
func (o *ProjectTemplateDetail200Response) HasDefaultBackend() bool {
	if o != nil && !IsNil(o.DefaultBackend) {
		return true
	}

	return false
}

// SetDefaultBackend gets a reference to the given string and assigns it to the DefaultBackend field.
func (o *ProjectTemplateDetail200Response) SetDefaultBackend(v string) {
	o.DefaultBackend = &v
}

func (o ProjectTemplateDetail200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProjectTemplateDetail200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.ExpirationDays) {
		toSerialize["expirationDays"] = o.ExpirationDays
	}
	if o.BilledMonthlyPrice != nil {
		toSerialize["billedMonthlyPrice"] = o.BilledMonthlyPrice
	}
	if !IsNil(o.HasTryModeOn) {
		toSerialize["hasTryModeOn"] = o.HasTryModeOn
	}
	if !IsNil(o.DefaultBackend) {
		toSerialize["defaultBackend"] = o.DefaultBackend
	}
	return toSerialize, nil
}

type NullableProjectTemplateDetail200Response struct {
	value *ProjectTemplateDetail200Response
	isSet bool
}

func (v NullableProjectTemplateDetail200Response) Get() *ProjectTemplateDetail200Response {
	return v.value
}

func (v *NullableProjectTemplateDetail200Response) Set(val *ProjectTemplateDetail200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableProjectTemplateDetail200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableProjectTemplateDetail200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProjectTemplateDetail200Response(val *ProjectTemplateDetail200Response) *NullableProjectTemplateDetail200Response {
	return &NullableProjectTemplateDetail200Response{value: val, isSet: true}
}

func (v NullableProjectTemplateDetail200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProjectTemplateDetail200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


