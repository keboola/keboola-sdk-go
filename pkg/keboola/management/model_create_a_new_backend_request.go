/*
Manage API

The Keboola Connection Management API covers all tasks required for managing projects, as well as some super admin features for controlling and monitoring Keboola Connection.  ## Projects Management  * Create, modify and delete maintainers, organizations and projects  * Move projects between organizations  * Define project limits  * Provision Redshift and other Storage backends  * Access project management activity log  ## Projects Monitoring  * Monitoring of projects over organizations and maintainers  ## Super User Control and Monitoring  * UI release and deployment  * Components management  * Storage and Syrup jobs monitoring (will be provided by Syrup utilizing new tokens for authorization)  * Final project delete  * Workers start/shutdown, etc.  ## Authentication  The API supports authentication by a personal access token, which can be retrieved in [Account Settings](https://connection.keboola.com/admin/account/change-password) in Keboola Connection. An access token is tied to an administrator and its permissions are derived from their permissions. When the administrator is disabled or deleted, all their tokens become invalid too.  ## Token Types  There are the following types of tokens:  | Name | Tied to User | Token string is available only on create | Description  | | ------------- | ------------- | ------------------- | ----- | | user | Yes | Yes |Full access to maintainers, organizations and projects. Access is limited only to resources which are available for the token user.| | super | No | Yes | KBC management. Limited scopes can be specified `super_ui_deploy`, `super_monitoring`, ...  |

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CreateANewBackendRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateANewBackendRequest{}

// CreateANewBackendRequest struct for CreateANewBackendRequest
type CreateANewBackendRequest struct {
	// can be redshift, snowflake ,synapse, exasol, teradata
	Backend string `json:"backend"`
	Host string `json:"host"`
	// required only for Snowflake
	Warehouse *string `json:"warehouse,omitempty"`
	Username string `json:"username"`
	Password string `json:"password"`
	Region string `json:"region"`
	// associated AWS account owner
	Owner string `json:"owner"`
	// required for Synapse and Teradata
	Database *string `json:"database,omitempty"`
	// optional for Synapse
	UseSynapseManagedIdentity *string `json:"useSynapseManagedIdentity,omitempty"`
	// Only for backends supporting dynamic sizing (Snowflake). When enabled, new projects get dynamic backends assigned automatically.
	UseDynamicBackends *bool `json:"useDynamicBackends,omitempty"`
}

type _CreateANewBackendRequest CreateANewBackendRequest

// NewCreateANewBackendRequest instantiates a new CreateANewBackendRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateANewBackendRequest(backend string, host string, username string, password string, region string, owner string) *CreateANewBackendRequest {
	this := CreateANewBackendRequest{}
	this.Backend = backend
	this.Host = host
	this.Username = username
	this.Password = password
	this.Region = region
	this.Owner = owner
	return &this
}

// NewCreateANewBackendRequestWithDefaults instantiates a new CreateANewBackendRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateANewBackendRequestWithDefaults() *CreateANewBackendRequest {
	this := CreateANewBackendRequest{}
	return &this
}

// GetBackend returns the Backend field value
func (o *CreateANewBackendRequest) GetBackend() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Backend
}

// GetBackendOk returns a tuple with the Backend field value
// and a boolean to check if the value has been set.
func (o *CreateANewBackendRequest) GetBackendOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Backend, true
}

// SetBackend sets field value
func (o *CreateANewBackendRequest) SetBackend(v string) {
	o.Backend = v
}

// GetHost returns the Host field value
func (o *CreateANewBackendRequest) GetHost() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Host
}

// GetHostOk returns a tuple with the Host field value
// and a boolean to check if the value has been set.
func (o *CreateANewBackendRequest) GetHostOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Host, true
}

// SetHost sets field value
func (o *CreateANewBackendRequest) SetHost(v string) {
	o.Host = v
}

// GetWarehouse returns the Warehouse field value if set, zero value otherwise.
func (o *CreateANewBackendRequest) GetWarehouse() string {
	if o == nil || IsNil(o.Warehouse) {
		var ret string
		return ret
	}
	return *o.Warehouse
}

// GetWarehouseOk returns a tuple with the Warehouse field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateANewBackendRequest) GetWarehouseOk() (*string, bool) {
	if o == nil || IsNil(o.Warehouse) {
		return nil, false
	}
	return o.Warehouse, true
}

// HasWarehouse returns a boolean if a field has been set.
func (o *CreateANewBackendRequest) HasWarehouse() bool {
	if o != nil && !IsNil(o.Warehouse) {
		return true
	}

	return false
}

// SetWarehouse gets a reference to the given string and assigns it to the Warehouse field.
func (o *CreateANewBackendRequest) SetWarehouse(v string) {
	o.Warehouse = &v
}

// GetUsername returns the Username field value
func (o *CreateANewBackendRequest) GetUsername() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Username
}

// GetUsernameOk returns a tuple with the Username field value
// and a boolean to check if the value has been set.
func (o *CreateANewBackendRequest) GetUsernameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Username, true
}

// SetUsername sets field value
func (o *CreateANewBackendRequest) SetUsername(v string) {
	o.Username = v
}

// GetPassword returns the Password field value
func (o *CreateANewBackendRequest) GetPassword() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Password
}

// GetPasswordOk returns a tuple with the Password field value
// and a boolean to check if the value has been set.
func (o *CreateANewBackendRequest) GetPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Password, true
}

// SetPassword sets field value
func (o *CreateANewBackendRequest) SetPassword(v string) {
	o.Password = v
}

// GetRegion returns the Region field value
func (o *CreateANewBackendRequest) GetRegion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Region
}

// GetRegionOk returns a tuple with the Region field value
// and a boolean to check if the value has been set.
func (o *CreateANewBackendRequest) GetRegionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Region, true
}

// SetRegion sets field value
func (o *CreateANewBackendRequest) SetRegion(v string) {
	o.Region = v
}

// GetOwner returns the Owner field value
func (o *CreateANewBackendRequest) GetOwner() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value
// and a boolean to check if the value has been set.
func (o *CreateANewBackendRequest) GetOwnerOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Owner, true
}

// SetOwner sets field value
func (o *CreateANewBackendRequest) SetOwner(v string) {
	o.Owner = v
}

// GetDatabase returns the Database field value if set, zero value otherwise.
func (o *CreateANewBackendRequest) GetDatabase() string {
	if o == nil || IsNil(o.Database) {
		var ret string
		return ret
	}
	return *o.Database
}

// GetDatabaseOk returns a tuple with the Database field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateANewBackendRequest) GetDatabaseOk() (*string, bool) {
	if o == nil || IsNil(o.Database) {
		return nil, false
	}
	return o.Database, true
}

// HasDatabase returns a boolean if a field has been set.
func (o *CreateANewBackendRequest) HasDatabase() bool {
	if o != nil && !IsNil(o.Database) {
		return true
	}

	return false
}

// SetDatabase gets a reference to the given string and assigns it to the Database field.
func (o *CreateANewBackendRequest) SetDatabase(v string) {
	o.Database = &v
}

// GetUseSynapseManagedIdentity returns the UseSynapseManagedIdentity field value if set, zero value otherwise.
func (o *CreateANewBackendRequest) GetUseSynapseManagedIdentity() string {
	if o == nil || IsNil(o.UseSynapseManagedIdentity) {
		var ret string
		return ret
	}
	return *o.UseSynapseManagedIdentity
}

// GetUseSynapseManagedIdentityOk returns a tuple with the UseSynapseManagedIdentity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateANewBackendRequest) GetUseSynapseManagedIdentityOk() (*string, bool) {
	if o == nil || IsNil(o.UseSynapseManagedIdentity) {
		return nil, false
	}
	return o.UseSynapseManagedIdentity, true
}

// HasUseSynapseManagedIdentity returns a boolean if a field has been set.
func (o *CreateANewBackendRequest) HasUseSynapseManagedIdentity() bool {
	if o != nil && !IsNil(o.UseSynapseManagedIdentity) {
		return true
	}

	return false
}

// SetUseSynapseManagedIdentity gets a reference to the given string and assigns it to the UseSynapseManagedIdentity field.
func (o *CreateANewBackendRequest) SetUseSynapseManagedIdentity(v string) {
	o.UseSynapseManagedIdentity = &v
}

// GetUseDynamicBackends returns the UseDynamicBackends field value if set, zero value otherwise.
func (o *CreateANewBackendRequest) GetUseDynamicBackends() bool {
	if o == nil || IsNil(o.UseDynamicBackends) {
		var ret bool
		return ret
	}
	return *o.UseDynamicBackends
}

// GetUseDynamicBackendsOk returns a tuple with the UseDynamicBackends field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateANewBackendRequest) GetUseDynamicBackendsOk() (*bool, bool) {
	if o == nil || IsNil(o.UseDynamicBackends) {
		return nil, false
	}
	return o.UseDynamicBackends, true
}

// HasUseDynamicBackends returns a boolean if a field has been set.
func (o *CreateANewBackendRequest) HasUseDynamicBackends() bool {
	if o != nil && !IsNil(o.UseDynamicBackends) {
		return true
	}

	return false
}

// SetUseDynamicBackends gets a reference to the given bool and assigns it to the UseDynamicBackends field.
func (o *CreateANewBackendRequest) SetUseDynamicBackends(v bool) {
	o.UseDynamicBackends = &v
}

func (o CreateANewBackendRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateANewBackendRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["backend"] = o.Backend
	toSerialize["host"] = o.Host
	if !IsNil(o.Warehouse) {
		toSerialize["warehouse"] = o.Warehouse
	}
	toSerialize["username"] = o.Username
	toSerialize["password"] = o.Password
	toSerialize["region"] = o.Region
	toSerialize["owner"] = o.Owner
	if !IsNil(o.Database) {
		toSerialize["database"] = o.Database
	}
	if !IsNil(o.UseSynapseManagedIdentity) {
		toSerialize["useSynapseManagedIdentity"] = o.UseSynapseManagedIdentity
	}
	if !IsNil(o.UseDynamicBackends) {
		toSerialize["useDynamicBackends"] = o.UseDynamicBackends
	}
	return toSerialize, nil
}

func (o *CreateANewBackendRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"backend",
		"host",
		"username",
		"password",
		"region",
		"owner",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateANewBackendRequest := _CreateANewBackendRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateANewBackendRequest)

	if err != nil {
		return err
	}

	*o = CreateANewBackendRequest(varCreateANewBackendRequest)

	return err
}

type NullableCreateANewBackendRequest struct {
	value *CreateANewBackendRequest
	isSet bool
}

func (v NullableCreateANewBackendRequest) Get() *CreateANewBackendRequest {
	return v.value
}

func (v *NullableCreateANewBackendRequest) Set(val *CreateANewBackendRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateANewBackendRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateANewBackendRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateANewBackendRequest(val *CreateANewBackendRequest) *NullableCreateANewBackendRequest {
	return &NullableCreateANewBackendRequest{value: val, isSet: true}
}

func (v NullableCreateANewBackendRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateANewBackendRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


