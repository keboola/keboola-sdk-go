/*
Manage API

The Keboola Connection Management API covers all tasks required for managing projects, as well as some super admin features for controlling and monitoring Keboola Connection.  ## Projects Management  * Create, modify and delete maintainers, organizations and projects  * Move projects between organizations  * Define project limits  * Provision Redshift and other Storage backends  * Access project management activity log  ## Projects Monitoring  * Monitoring of projects over organizations and maintainers  ## Super User Control and Monitoring  * UI release and deployment  * Components management  * Storage and Syrup jobs monitoring (will be provided by Syrup utilizing new tokens for authorization)  * Final project delete  * Workers start/shutdown, etc.  ## Authentication  The API supports authentication by a personal access token, which can be retrieved in [Account Settings](https://connection.keboola.com/admin/account/change-password) in Keboola Connection. An access token is tied to an administrator and its permissions are derived from their permissions. When the administrator is disabled or deleted, all their tokens become invalid too.  ## Token Types  There are the following types of tokens:  | Name | Tied to User | Token string is available only on create | Description  | | ------------- | ------------- | ------------------- | ----- | | user | Yes | Yes |Full access to maintainers, organizations and projects. Access is limited only to resources which are available for the token user.| | super | No | Yes | KBC management. Limited scopes can be specified `super_ui_deploy`, `super_monitoring`, ...  |

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ListProjectUsers200ResponseInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListProjectUsers200ResponseInner{}

// ListProjectUsers200ResponseInner struct for ListProjectUsers200ResponseInner
type ListProjectUsers200ResponseInner struct {
	Id float32 `json:"id"`
	Name string `json:"name"`
	Email string `json:"email"`
	Features []interface{} `json:"features"`
	Expires NullableString `json:"expires"`
	Created string `json:"created"`
	Reason string `json:"reason"`
	Role string `json:"role"`
	Status string `json:"status"`
	Invitor NullableListProjectUsers200ResponseInnerInvitor `json:"invitor"`
	Approver ListMaintainersInvitations200ResponseInnerUser `json:"approver"`
}

type _ListProjectUsers200ResponseInner ListProjectUsers200ResponseInner

// NewListProjectUsers200ResponseInner instantiates a new ListProjectUsers200ResponseInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListProjectUsers200ResponseInner(id float32, name string, email string, features []interface{}, expires NullableString, created string, reason string, role string, status string, invitor NullableListProjectUsers200ResponseInnerInvitor, approver ListMaintainersInvitations200ResponseInnerUser) *ListProjectUsers200ResponseInner {
	this := ListProjectUsers200ResponseInner{}
	this.Id = id
	this.Name = name
	this.Email = email
	this.Features = features
	this.Expires = expires
	this.Created = created
	this.Reason = reason
	this.Role = role
	this.Status = status
	this.Invitor = invitor
	this.Approver = approver
	return &this
}

// NewListProjectUsers200ResponseInnerWithDefaults instantiates a new ListProjectUsers200ResponseInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListProjectUsers200ResponseInnerWithDefaults() *ListProjectUsers200ResponseInner {
	this := ListProjectUsers200ResponseInner{}
	return &this
}

// GetId returns the Id field value
func (o *ListProjectUsers200ResponseInner) GetId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ListProjectUsers200ResponseInner) GetIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ListProjectUsers200ResponseInner) SetId(v float32) {
	o.Id = v
}

// GetName returns the Name field value
func (o *ListProjectUsers200ResponseInner) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ListProjectUsers200ResponseInner) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ListProjectUsers200ResponseInner) SetName(v string) {
	o.Name = v
}

// GetEmail returns the Email field value
func (o *ListProjectUsers200ResponseInner) GetEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Email
}

// GetEmailOk returns a tuple with the Email field value
// and a boolean to check if the value has been set.
func (o *ListProjectUsers200ResponseInner) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Email, true
}

// SetEmail sets field value
func (o *ListProjectUsers200ResponseInner) SetEmail(v string) {
	o.Email = v
}

// GetFeatures returns the Features field value
func (o *ListProjectUsers200ResponseInner) GetFeatures() []interface{} {
	if o == nil {
		var ret []interface{}
		return ret
	}

	return o.Features
}

// GetFeaturesOk returns a tuple with the Features field value
// and a boolean to check if the value has been set.
func (o *ListProjectUsers200ResponseInner) GetFeaturesOk() ([]interface{}, bool) {
	if o == nil {
		return nil, false
	}
	return o.Features, true
}

// SetFeatures sets field value
func (o *ListProjectUsers200ResponseInner) SetFeatures(v []interface{}) {
	o.Features = v
}

// GetExpires returns the Expires field value
// If the value is explicit nil, the zero value for string will be returned
func (o *ListProjectUsers200ResponseInner) GetExpires() string {
	if o == nil || o.Expires.Get() == nil {
		var ret string
		return ret
	}

	return *o.Expires.Get()
}

// GetExpiresOk returns a tuple with the Expires field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ListProjectUsers200ResponseInner) GetExpiresOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Expires.Get(), o.Expires.IsSet()
}

// SetExpires sets field value
func (o *ListProjectUsers200ResponseInner) SetExpires(v string) {
	o.Expires.Set(&v)
}

// GetCreated returns the Created field value
func (o *ListProjectUsers200ResponseInner) GetCreated() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Created
}

// GetCreatedOk returns a tuple with the Created field value
// and a boolean to check if the value has been set.
func (o *ListProjectUsers200ResponseInner) GetCreatedOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Created, true
}

// SetCreated sets field value
func (o *ListProjectUsers200ResponseInner) SetCreated(v string) {
	o.Created = v
}

// GetReason returns the Reason field value
func (o *ListProjectUsers200ResponseInner) GetReason() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Reason
}

// GetReasonOk returns a tuple with the Reason field value
// and a boolean to check if the value has been set.
func (o *ListProjectUsers200ResponseInner) GetReasonOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Reason, true
}

// SetReason sets field value
func (o *ListProjectUsers200ResponseInner) SetReason(v string) {
	o.Reason = v
}

// GetRole returns the Role field value
func (o *ListProjectUsers200ResponseInner) GetRole() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Role
}

// GetRoleOk returns a tuple with the Role field value
// and a boolean to check if the value has been set.
func (o *ListProjectUsers200ResponseInner) GetRoleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Role, true
}

// SetRole sets field value
func (o *ListProjectUsers200ResponseInner) SetRole(v string) {
	o.Role = v
}

// GetStatus returns the Status field value
func (o *ListProjectUsers200ResponseInner) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *ListProjectUsers200ResponseInner) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *ListProjectUsers200ResponseInner) SetStatus(v string) {
	o.Status = v
}

// GetInvitor returns the Invitor field value
// If the value is explicit nil, the zero value for ListProjectUsers200ResponseInnerInvitor will be returned
func (o *ListProjectUsers200ResponseInner) GetInvitor() ListProjectUsers200ResponseInnerInvitor {
	if o == nil || o.Invitor.Get() == nil {
		var ret ListProjectUsers200ResponseInnerInvitor
		return ret
	}

	return *o.Invitor.Get()
}

// GetInvitorOk returns a tuple with the Invitor field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ListProjectUsers200ResponseInner) GetInvitorOk() (*ListProjectUsers200ResponseInnerInvitor, bool) {
	if o == nil {
		return nil, false
	}
	return o.Invitor.Get(), o.Invitor.IsSet()
}

// SetInvitor sets field value
func (o *ListProjectUsers200ResponseInner) SetInvitor(v ListProjectUsers200ResponseInnerInvitor) {
	o.Invitor.Set(&v)
}

// GetApprover returns the Approver field value
func (o *ListProjectUsers200ResponseInner) GetApprover() ListMaintainersInvitations200ResponseInnerUser {
	if o == nil {
		var ret ListMaintainersInvitations200ResponseInnerUser
		return ret
	}

	return o.Approver
}

// GetApproverOk returns a tuple with the Approver field value
// and a boolean to check if the value has been set.
func (o *ListProjectUsers200ResponseInner) GetApproverOk() (*ListMaintainersInvitations200ResponseInnerUser, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Approver, true
}

// SetApprover sets field value
func (o *ListProjectUsers200ResponseInner) SetApprover(v ListMaintainersInvitations200ResponseInnerUser) {
	o.Approver = v
}

func (o ListProjectUsers200ResponseInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListProjectUsers200ResponseInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["email"] = o.Email
	toSerialize["features"] = o.Features
	toSerialize["expires"] = o.Expires.Get()
	toSerialize["created"] = o.Created
	toSerialize["reason"] = o.Reason
	toSerialize["role"] = o.Role
	toSerialize["status"] = o.Status
	toSerialize["invitor"] = o.Invitor.Get()
	toSerialize["approver"] = o.Approver
	return toSerialize, nil
}

func (o *ListProjectUsers200ResponseInner) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
		"email",
		"features",
		"expires",
		"created",
		"reason",
		"role",
		"status",
		"invitor",
		"approver",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varListProjectUsers200ResponseInner := _ListProjectUsers200ResponseInner{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varListProjectUsers200ResponseInner)

	if err != nil {
		return err
	}

	*o = ListProjectUsers200ResponseInner(varListProjectUsers200ResponseInner)

	return err
}

type NullableListProjectUsers200ResponseInner struct {
	value *ListProjectUsers200ResponseInner
	isSet bool
}

func (v NullableListProjectUsers200ResponseInner) Get() *ListProjectUsers200ResponseInner {
	return v.value
}

func (v *NullableListProjectUsers200ResponseInner) Set(val *ListProjectUsers200ResponseInner) {
	v.value = val
	v.isSet = true
}

func (v NullableListProjectUsers200ResponseInner) IsSet() bool {
	return v.isSet
}

func (v *NullableListProjectUsers200ResponseInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListProjectUsers200ResponseInner(val *ListProjectUsers200ResponseInner) *NullableListProjectUsers200ResponseInner {
	return &NullableListProjectUsers200ResponseInner{value: val, isSet: true}
}

func (v NullableListProjectUsers200ResponseInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListProjectUsers200ResponseInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


