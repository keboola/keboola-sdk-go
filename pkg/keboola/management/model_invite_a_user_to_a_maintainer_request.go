/*
Manage API

The Keboola Connection Management API covers all tasks required for managing projects, as well as some super admin features for controlling and monitoring Keboola Connection.  ## Projects Management  * Create, modify and delete maintainers, organizations and projects  * Move projects between organizations  * Define project limits  * Provision Redshift and other Storage backends  * Access project management activity log  ## Projects Monitoring  * Monitoring of projects over organizations and maintainers  ## Super User Control and Monitoring  * UI release and deployment  * Components management  * Storage and Syrup jobs monitoring (will be provided by Syrup utilizing new tokens for authorization)  * Final project delete  * Workers start/shutdown, etc.  ## Authentication  The API supports authentication by a personal access token, which can be retrieved in [Account Settings](https://connection.keboola.com/admin/account/change-password) in Keboola Connection. An access token is tied to an administrator and its permissions are derived from their permissions. When the administrator is disabled or deleted, all their tokens become invalid too.  ## Token Types  There are the following types of tokens:  | Name | Tied to User | Token string is available only on create | Description  | | ------------- | ------------- | ------------------- | ----- | | user | Yes | Yes |Full access to maintainers, organizations and projects. Access is limited only to resources which are available for the token user.| | super | No | Yes | KBC management. Limited scopes can be specified `super_ui_deploy`, `super_monitoring`, ...  |

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the InviteAUserToAMaintainerRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InviteAUserToAMaintainerRequest{}

// InviteAUserToAMaintainerRequest struct for InviteAUserToAMaintainerRequest
type InviteAUserToAMaintainerRequest struct {
	// Email of an invited user
	Email string `json:"email"`
}

type _InviteAUserToAMaintainerRequest InviteAUserToAMaintainerRequest

// NewInviteAUserToAMaintainerRequest instantiates a new InviteAUserToAMaintainerRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInviteAUserToAMaintainerRequest(email string) *InviteAUserToAMaintainerRequest {
	this := InviteAUserToAMaintainerRequest{}
	this.Email = email
	return &this
}

// NewInviteAUserToAMaintainerRequestWithDefaults instantiates a new InviteAUserToAMaintainerRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInviteAUserToAMaintainerRequestWithDefaults() *InviteAUserToAMaintainerRequest {
	this := InviteAUserToAMaintainerRequest{}
	return &this
}

// GetEmail returns the Email field value
func (o *InviteAUserToAMaintainerRequest) GetEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Email
}

// GetEmailOk returns a tuple with the Email field value
// and a boolean to check if the value has been set.
func (o *InviteAUserToAMaintainerRequest) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Email, true
}

// SetEmail sets field value
func (o *InviteAUserToAMaintainerRequest) SetEmail(v string) {
	o.Email = v
}

func (o InviteAUserToAMaintainerRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InviteAUserToAMaintainerRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["email"] = o.Email
	return toSerialize, nil
}

func (o *InviteAUserToAMaintainerRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"email",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varInviteAUserToAMaintainerRequest := _InviteAUserToAMaintainerRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varInviteAUserToAMaintainerRequest)

	if err != nil {
		return err
	}

	*o = InviteAUserToAMaintainerRequest(varInviteAUserToAMaintainerRequest)

	return err
}

type NullableInviteAUserToAMaintainerRequest struct {
	value *InviteAUserToAMaintainerRequest
	isSet bool
}

func (v NullableInviteAUserToAMaintainerRequest) Get() *InviteAUserToAMaintainerRequest {
	return v.value
}

func (v *NullableInviteAUserToAMaintainerRequest) Set(val *InviteAUserToAMaintainerRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableInviteAUserToAMaintainerRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableInviteAUserToAMaintainerRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInviteAUserToAMaintainerRequest(val *InviteAUserToAMaintainerRequest) *NullableInviteAUserToAMaintainerRequest {
	return &NullableInviteAUserToAMaintainerRequest{value: val, isSet: true}
}

func (v NullableInviteAUserToAMaintainerRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInviteAUserToAMaintainerRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


