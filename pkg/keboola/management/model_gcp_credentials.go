/*
Manage API

The Keboola Connection Management API covers all tasks required for managing projects, as well as some super admin features for controlling and monitoring Keboola Connection.  ## Projects Management  * Create, modify and delete maintainers, organizations and projects  * Move projects between organizations  * Define project limits  * Provision Redshift and other Storage backends  * Access project management activity log  ## Projects Monitoring  * Monitoring of projects over organizations and maintainers  ## Super User Control and Monitoring  * UI release and deployment  * Components management  * Storage and Syrup jobs monitoring (will be provided by Syrup utilizing new tokens for authorization)  * Final project delete  * Workers start/shutdown, etc.  ## Authentication  The API supports authentication by a personal access token, which can be retrieved in [Account Settings](https://connection.keboola.com/admin/account/change-password) in Keboola Connection. An access token is tied to an administrator and its permissions are derived from their permissions. When the administrator is disabled or deleted, all their tokens become invalid too.  ## Token Types  There are the following types of tokens:  | Name | Tied to User | Token string is available only on create | Description  | | ------------- | ------------- | ------------------- | ----- | | user | Yes | Yes |Full access to maintainers, organizations and projects. Access is limited only to resources which are available for the token user.| | super | No | Yes | KBC management. Limited scopes can be specified `super_ui_deploy`, `super_monitoring`, ...  |

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the GCPCredentials type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GCPCredentials{}

// GCPCredentials struct for GCPCredentials
type GCPCredentials struct {
	Type string `json:"type"`
	ProjectId string `json:"project_id"`
	PrivateKeyId string `json:"private_key_id"`
	PrivateKey string `json:"private_key"`
	ClientEmail string `json:"client_email"`
	ClientId string `json:"client_id"`
	AuthUri string `json:"auth_uri"`
	TokenUri string `json:"token_uri"`
	AuthProviderX509CertUrl string `json:"auth_provider_x509_cert_url"`
	ClientX509CertUrl string `json:"client_x509_cert_url"`
}

type _GCPCredentials GCPCredentials

// NewGCPCredentials instantiates a new GCPCredentials object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGCPCredentials(type_ string, projectId string, privateKeyId string, privateKey string, clientEmail string, clientId string, authUri string, tokenUri string, authProviderX509CertUrl string, clientX509CertUrl string) *GCPCredentials {
	this := GCPCredentials{}
	this.Type = type_
	this.ProjectId = projectId
	this.PrivateKeyId = privateKeyId
	this.PrivateKey = privateKey
	this.ClientEmail = clientEmail
	this.ClientId = clientId
	this.AuthUri = authUri
	this.TokenUri = tokenUri
	this.AuthProviderX509CertUrl = authProviderX509CertUrl
	this.ClientX509CertUrl = clientX509CertUrl
	return &this
}

// NewGCPCredentialsWithDefaults instantiates a new GCPCredentials object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGCPCredentialsWithDefaults() *GCPCredentials {
	this := GCPCredentials{}
	return &this
}

// GetType returns the Type field value
func (o *GCPCredentials) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *GCPCredentials) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *GCPCredentials) SetType(v string) {
	o.Type = v
}

// GetProjectId returns the ProjectId field value
func (o *GCPCredentials) GetProjectId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProjectId
}

// GetProjectIdOk returns a tuple with the ProjectId field value
// and a boolean to check if the value has been set.
func (o *GCPCredentials) GetProjectIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProjectId, true
}

// SetProjectId sets field value
func (o *GCPCredentials) SetProjectId(v string) {
	o.ProjectId = v
}

// GetPrivateKeyId returns the PrivateKeyId field value
func (o *GCPCredentials) GetPrivateKeyId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PrivateKeyId
}

// GetPrivateKeyIdOk returns a tuple with the PrivateKeyId field value
// and a boolean to check if the value has been set.
func (o *GCPCredentials) GetPrivateKeyIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PrivateKeyId, true
}

// SetPrivateKeyId sets field value
func (o *GCPCredentials) SetPrivateKeyId(v string) {
	o.PrivateKeyId = v
}

// GetPrivateKey returns the PrivateKey field value
func (o *GCPCredentials) GetPrivateKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PrivateKey
}

// GetPrivateKeyOk returns a tuple with the PrivateKey field value
// and a boolean to check if the value has been set.
func (o *GCPCredentials) GetPrivateKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PrivateKey, true
}

// SetPrivateKey sets field value
func (o *GCPCredentials) SetPrivateKey(v string) {
	o.PrivateKey = v
}

// GetClientEmail returns the ClientEmail field value
func (o *GCPCredentials) GetClientEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClientEmail
}

// GetClientEmailOk returns a tuple with the ClientEmail field value
// and a boolean to check if the value has been set.
func (o *GCPCredentials) GetClientEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClientEmail, true
}

// SetClientEmail sets field value
func (o *GCPCredentials) SetClientEmail(v string) {
	o.ClientEmail = v
}

// GetClientId returns the ClientId field value
func (o *GCPCredentials) GetClientId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClientId
}

// GetClientIdOk returns a tuple with the ClientId field value
// and a boolean to check if the value has been set.
func (o *GCPCredentials) GetClientIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClientId, true
}

// SetClientId sets field value
func (o *GCPCredentials) SetClientId(v string) {
	o.ClientId = v
}

// GetAuthUri returns the AuthUri field value
func (o *GCPCredentials) GetAuthUri() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AuthUri
}

// GetAuthUriOk returns a tuple with the AuthUri field value
// and a boolean to check if the value has been set.
func (o *GCPCredentials) GetAuthUriOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AuthUri, true
}

// SetAuthUri sets field value
func (o *GCPCredentials) SetAuthUri(v string) {
	o.AuthUri = v
}

// GetTokenUri returns the TokenUri field value
func (o *GCPCredentials) GetTokenUri() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TokenUri
}

// GetTokenUriOk returns a tuple with the TokenUri field value
// and a boolean to check if the value has been set.
func (o *GCPCredentials) GetTokenUriOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TokenUri, true
}

// SetTokenUri sets field value
func (o *GCPCredentials) SetTokenUri(v string) {
	o.TokenUri = v
}

// GetAuthProviderX509CertUrl returns the AuthProviderX509CertUrl field value
func (o *GCPCredentials) GetAuthProviderX509CertUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AuthProviderX509CertUrl
}

// GetAuthProviderX509CertUrlOk returns a tuple with the AuthProviderX509CertUrl field value
// and a boolean to check if the value has been set.
func (o *GCPCredentials) GetAuthProviderX509CertUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AuthProviderX509CertUrl, true
}

// SetAuthProviderX509CertUrl sets field value
func (o *GCPCredentials) SetAuthProviderX509CertUrl(v string) {
	o.AuthProviderX509CertUrl = v
}

// GetClientX509CertUrl returns the ClientX509CertUrl field value
func (o *GCPCredentials) GetClientX509CertUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClientX509CertUrl
}

// GetClientX509CertUrlOk returns a tuple with the ClientX509CertUrl field value
// and a boolean to check if the value has been set.
func (o *GCPCredentials) GetClientX509CertUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClientX509CertUrl, true
}

// SetClientX509CertUrl sets field value
func (o *GCPCredentials) SetClientX509CertUrl(v string) {
	o.ClientX509CertUrl = v
}

func (o GCPCredentials) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GCPCredentials) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["project_id"] = o.ProjectId
	toSerialize["private_key_id"] = o.PrivateKeyId
	toSerialize["private_key"] = o.PrivateKey
	toSerialize["client_email"] = o.ClientEmail
	toSerialize["client_id"] = o.ClientId
	toSerialize["auth_uri"] = o.AuthUri
	toSerialize["token_uri"] = o.TokenUri
	toSerialize["auth_provider_x509_cert_url"] = o.AuthProviderX509CertUrl
	toSerialize["client_x509_cert_url"] = o.ClientX509CertUrl
	return toSerialize, nil
}

func (o *GCPCredentials) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"project_id",
		"private_key_id",
		"private_key",
		"client_email",
		"client_id",
		"auth_uri",
		"token_uri",
		"auth_provider_x509_cert_url",
		"client_x509_cert_url",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGCPCredentials := _GCPCredentials{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGCPCredentials)

	if err != nil {
		return err
	}

	*o = GCPCredentials(varGCPCredentials)

	return err
}

type NullableGCPCredentials struct {
	value *GCPCredentials
	isSet bool
}

func (v NullableGCPCredentials) Get() *GCPCredentials {
	return v.value
}

func (v *NullableGCPCredentials) Set(val *GCPCredentials) {
	v.value = val
	v.isSet = true
}

func (v NullableGCPCredentials) IsSet() bool {
	return v.isSet
}

func (v *NullableGCPCredentials) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGCPCredentials(val *GCPCredentials) *NullableGCPCredentials {
	return &NullableGCPCredentials{value: val, isSet: true}
}

func (v NullableGCPCredentials) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGCPCredentials) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


