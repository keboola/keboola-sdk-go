/*
Manage API

The Keboola Connection Management API covers all tasks required for managing projects, as well as some super admin features for controlling and monitoring Keboola Connection.  ## Projects Management  * Create, modify and delete maintainers, organizations and projects  * Move projects between organizations  * Define project limits  * Provision Redshift and other Storage backends  * Access project management activity log  ## Projects Monitoring  * Monitoring of projects over organizations and maintainers  ## Super User Control and Monitoring  * UI release and deployment  * Components management  * Storage and Syrup jobs monitoring (will be provided by Syrup utilizing new tokens for authorization)  * Final project delete  * Workers start/shutdown, etc.  ## Authentication  The API supports authentication by a personal access token, which can be retrieved in [Account Settings](https://connection.keboola.com/admin/account/change-password) in Keboola Connection. An access token is tied to an administrator and its permissions are derived from their permissions. When the administrator is disabled or deleted, all their tokens become invalid too.  ## Token Types  There are the following types of tokens:  | Name | Tied to User | Token string is available only on create | Description  | | ------------- | ------------- | ------------------- | ----- | | user | Yes | Yes |Full access to maintainers, organizations and projects. Access is limited only to resources which are available for the token user.| | super | No | Yes | KBC management. Limited scopes can be specified `super_ui_deploy`, `super_monitoring`, ...  |

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"encoding/json"
)

// checks if the TokenVerification200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TokenVerification200Response{}

// TokenVerification200Response struct for TokenVerification200Response
type TokenVerification200Response struct {
	Id *float32 `json:"id,omitempty"`
	Description *string `json:"description,omitempty"`
	Created *string `json:"created,omitempty"`
	LastUsed *string `json:"lastUsed,omitempty"`
	Expires *string `json:"expires,omitempty"`
	IsSessionToken *bool `json:"isSessionToken,omitempty"`
	IsExpired *bool `json:"isExpired,omitempty"`
	IsDisabled *bool `json:"isDisabled,omitempty"`
	Scopes []interface{} `json:"scopes,omitempty"`
	Type *string `json:"type,omitempty"`
	Creator *TokenVerification200ResponseCreator `json:"creator,omitempty"`
	User *TokenVerification200ResponseUser `json:"user,omitempty"`
}

// NewTokenVerification200Response instantiates a new TokenVerification200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTokenVerification200Response() *TokenVerification200Response {
	this := TokenVerification200Response{}
	return &this
}

// NewTokenVerification200ResponseWithDefaults instantiates a new TokenVerification200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTokenVerification200ResponseWithDefaults() *TokenVerification200Response {
	this := TokenVerification200Response{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *TokenVerification200Response) GetId() float32 {
	if o == nil || IsNil(o.Id) {
		var ret float32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenVerification200Response) GetIdOk() (*float32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *TokenVerification200Response) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given float32 and assigns it to the Id field.
func (o *TokenVerification200Response) SetId(v float32) {
	o.Id = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *TokenVerification200Response) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenVerification200Response) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *TokenVerification200Response) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *TokenVerification200Response) SetDescription(v string) {
	o.Description = &v
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *TokenVerification200Response) GetCreated() string {
	if o == nil || IsNil(o.Created) {
		var ret string
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenVerification200Response) GetCreatedOk() (*string, bool) {
	if o == nil || IsNil(o.Created) {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *TokenVerification200Response) HasCreated() bool {
	if o != nil && !IsNil(o.Created) {
		return true
	}

	return false
}

// SetCreated gets a reference to the given string and assigns it to the Created field.
func (o *TokenVerification200Response) SetCreated(v string) {
	o.Created = &v
}

// GetLastUsed returns the LastUsed field value if set, zero value otherwise.
func (o *TokenVerification200Response) GetLastUsed() string {
	if o == nil || IsNil(o.LastUsed) {
		var ret string
		return ret
	}
	return *o.LastUsed
}

// GetLastUsedOk returns a tuple with the LastUsed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenVerification200Response) GetLastUsedOk() (*string, bool) {
	if o == nil || IsNil(o.LastUsed) {
		return nil, false
	}
	return o.LastUsed, true
}

// HasLastUsed returns a boolean if a field has been set.
func (o *TokenVerification200Response) HasLastUsed() bool {
	if o != nil && !IsNil(o.LastUsed) {
		return true
	}

	return false
}

// SetLastUsed gets a reference to the given string and assigns it to the LastUsed field.
func (o *TokenVerification200Response) SetLastUsed(v string) {
	o.LastUsed = &v
}

// GetExpires returns the Expires field value if set, zero value otherwise.
func (o *TokenVerification200Response) GetExpires() string {
	if o == nil || IsNil(o.Expires) {
		var ret string
		return ret
	}
	return *o.Expires
}

// GetExpiresOk returns a tuple with the Expires field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenVerification200Response) GetExpiresOk() (*string, bool) {
	if o == nil || IsNil(o.Expires) {
		return nil, false
	}
	return o.Expires, true
}

// HasExpires returns a boolean if a field has been set.
func (o *TokenVerification200Response) HasExpires() bool {
	if o != nil && !IsNil(o.Expires) {
		return true
	}

	return false
}

// SetExpires gets a reference to the given string and assigns it to the Expires field.
func (o *TokenVerification200Response) SetExpires(v string) {
	o.Expires = &v
}

// GetIsSessionToken returns the IsSessionToken field value if set, zero value otherwise.
func (o *TokenVerification200Response) GetIsSessionToken() bool {
	if o == nil || IsNil(o.IsSessionToken) {
		var ret bool
		return ret
	}
	return *o.IsSessionToken
}

// GetIsSessionTokenOk returns a tuple with the IsSessionToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenVerification200Response) GetIsSessionTokenOk() (*bool, bool) {
	if o == nil || IsNil(o.IsSessionToken) {
		return nil, false
	}
	return o.IsSessionToken, true
}

// HasIsSessionToken returns a boolean if a field has been set.
func (o *TokenVerification200Response) HasIsSessionToken() bool {
	if o != nil && !IsNil(o.IsSessionToken) {
		return true
	}

	return false
}

// SetIsSessionToken gets a reference to the given bool and assigns it to the IsSessionToken field.
func (o *TokenVerification200Response) SetIsSessionToken(v bool) {
	o.IsSessionToken = &v
}

// GetIsExpired returns the IsExpired field value if set, zero value otherwise.
func (o *TokenVerification200Response) GetIsExpired() bool {
	if o == nil || IsNil(o.IsExpired) {
		var ret bool
		return ret
	}
	return *o.IsExpired
}

// GetIsExpiredOk returns a tuple with the IsExpired field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenVerification200Response) GetIsExpiredOk() (*bool, bool) {
	if o == nil || IsNil(o.IsExpired) {
		return nil, false
	}
	return o.IsExpired, true
}

// HasIsExpired returns a boolean if a field has been set.
func (o *TokenVerification200Response) HasIsExpired() bool {
	if o != nil && !IsNil(o.IsExpired) {
		return true
	}

	return false
}

// SetIsExpired gets a reference to the given bool and assigns it to the IsExpired field.
func (o *TokenVerification200Response) SetIsExpired(v bool) {
	o.IsExpired = &v
}

// GetIsDisabled returns the IsDisabled field value if set, zero value otherwise.
func (o *TokenVerification200Response) GetIsDisabled() bool {
	if o == nil || IsNil(o.IsDisabled) {
		var ret bool
		return ret
	}
	return *o.IsDisabled
}

// GetIsDisabledOk returns a tuple with the IsDisabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenVerification200Response) GetIsDisabledOk() (*bool, bool) {
	if o == nil || IsNil(o.IsDisabled) {
		return nil, false
	}
	return o.IsDisabled, true
}

// HasIsDisabled returns a boolean if a field has been set.
func (o *TokenVerification200Response) HasIsDisabled() bool {
	if o != nil && !IsNil(o.IsDisabled) {
		return true
	}

	return false
}

// SetIsDisabled gets a reference to the given bool and assigns it to the IsDisabled field.
func (o *TokenVerification200Response) SetIsDisabled(v bool) {
	o.IsDisabled = &v
}

// GetScopes returns the Scopes field value if set, zero value otherwise.
func (o *TokenVerification200Response) GetScopes() []interface{} {
	if o == nil || IsNil(o.Scopes) {
		var ret []interface{}
		return ret
	}
	return o.Scopes
}

// GetScopesOk returns a tuple with the Scopes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenVerification200Response) GetScopesOk() ([]interface{}, bool) {
	if o == nil || IsNil(o.Scopes) {
		return nil, false
	}
	return o.Scopes, true
}

// HasScopes returns a boolean if a field has been set.
func (o *TokenVerification200Response) HasScopes() bool {
	if o != nil && !IsNil(o.Scopes) {
		return true
	}

	return false
}

// SetScopes gets a reference to the given []interface{} and assigns it to the Scopes field.
func (o *TokenVerification200Response) SetScopes(v []interface{}) {
	o.Scopes = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *TokenVerification200Response) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenVerification200Response) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *TokenVerification200Response) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *TokenVerification200Response) SetType(v string) {
	o.Type = &v
}

// GetCreator returns the Creator field value if set, zero value otherwise.
func (o *TokenVerification200Response) GetCreator() TokenVerification200ResponseCreator {
	if o == nil || IsNil(o.Creator) {
		var ret TokenVerification200ResponseCreator
		return ret
	}
	return *o.Creator
}

// GetCreatorOk returns a tuple with the Creator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenVerification200Response) GetCreatorOk() (*TokenVerification200ResponseCreator, bool) {
	if o == nil || IsNil(o.Creator) {
		return nil, false
	}
	return o.Creator, true
}

// HasCreator returns a boolean if a field has been set.
func (o *TokenVerification200Response) HasCreator() bool {
	if o != nil && !IsNil(o.Creator) {
		return true
	}

	return false
}

// SetCreator gets a reference to the given TokenVerification200ResponseCreator and assigns it to the Creator field.
func (o *TokenVerification200Response) SetCreator(v TokenVerification200ResponseCreator) {
	o.Creator = &v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *TokenVerification200Response) GetUser() TokenVerification200ResponseUser {
	if o == nil || IsNil(o.User) {
		var ret TokenVerification200ResponseUser
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenVerification200Response) GetUserOk() (*TokenVerification200ResponseUser, bool) {
	if o == nil || IsNil(o.User) {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *TokenVerification200Response) HasUser() bool {
	if o != nil && !IsNil(o.User) {
		return true
	}

	return false
}

// SetUser gets a reference to the given TokenVerification200ResponseUser and assigns it to the User field.
func (o *TokenVerification200Response) SetUser(v TokenVerification200ResponseUser) {
	o.User = &v
}

func (o TokenVerification200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TokenVerification200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Created) {
		toSerialize["created"] = o.Created
	}
	if !IsNil(o.LastUsed) {
		toSerialize["lastUsed"] = o.LastUsed
	}
	if !IsNil(o.Expires) {
		toSerialize["expires"] = o.Expires
	}
	if !IsNil(o.IsSessionToken) {
		toSerialize["isSessionToken"] = o.IsSessionToken
	}
	if !IsNil(o.IsExpired) {
		toSerialize["isExpired"] = o.IsExpired
	}
	if !IsNil(o.IsDisabled) {
		toSerialize["isDisabled"] = o.IsDisabled
	}
	if !IsNil(o.Scopes) {
		toSerialize["scopes"] = o.Scopes
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Creator) {
		toSerialize["creator"] = o.Creator
	}
	if !IsNil(o.User) {
		toSerialize["user"] = o.User
	}
	return toSerialize, nil
}

type NullableTokenVerification200Response struct {
	value *TokenVerification200Response
	isSet bool
}

func (v NullableTokenVerification200Response) Get() *TokenVerification200Response {
	return v.value
}

func (v *NullableTokenVerification200Response) Set(val *TokenVerification200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableTokenVerification200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableTokenVerification200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTokenVerification200Response(val *TokenVerification200Response) *NullableTokenVerification200Response {
	return &NullableTokenVerification200Response{value: val, isSet: true}
}

func (v NullableTokenVerification200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTokenVerification200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


